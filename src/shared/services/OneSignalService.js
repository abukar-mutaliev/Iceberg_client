/**
 * OneSignal Service - –ø—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –†–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Å–±–æ—Ä–æ–∫: development, preview, production
 */

import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ OneSignal –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
let OneSignal = null;
let oneSignalLoadAttempted = false;

const getOneSignal = () => {
    if (OneSignal !== null) {
        return OneSignal;
    }

    if (oneSignalLoadAttempted) {
        return null; // –£–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –Ω–µ —Å–º–æ–≥–ª–∏
    }

    oneSignalLoadAttempted = true;

    try {
        const OneSignalModule = require('react-native-onesignal');
        OneSignal = OneSignalModule.default || OneSignalModule.OneSignal || OneSignalModule;
        console.log('‚úÖ OneSignal –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return OneSignal;
    } catch (e) {
        console.warn('‚ö†Ô∏è OneSignal –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
        return null;
    }
};


class OneSignalService {
    constructor() {
        this.isInitialized = false;
        this.currentUserId = null;
        this.subscriptionId = null;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OneSignal
    async initialize(appId) {
        try {
            if (this.isInitialized) {
                console.log('üîî OneSignal —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return true;
            }

            const oneSignal = getOneSignal();
            if (!oneSignal) {
                console.warn('‚ö†Ô∏è OneSignal –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
                return false;
            }

            if (!appId) {
                console.error('‚ùå OneSignal App ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
                return false;
            }

            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OneSignal —Å App ID:', appId);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OneSignal
            oneSignal.initialize(appId);

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            const hasPermission = await oneSignal.Notifications.requestPermission(true);
            console.log('üîê OneSignal —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', hasPermission);

            if (!hasPermission) {
                console.warn('‚ö†Ô∏è OneSignal —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–∂–µ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            }

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this.setupNotificationHandlers(oneSignal);

            this.isInitialized = true;
            console.log('‚úÖ OneSignal –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OneSignal:', error);
            return false;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setupNotificationHandlers(oneSignal) {
        try {
            if (!oneSignal) {
                console.warn('‚ö†Ô∏è OneSignal –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤');
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            oneSignal.Notifications.addEventListener('click', (event) => {
                console.log('üì± OneSignal notification clicked:', event);

                const data = event.notification.additionalData;
                if (data) {
                    this.handleNotificationNavigation(data);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ foreground
            oneSignal.Notifications.addEventListener('foregroundWillDisplay', (event) => {
                console.log('üì® OneSignal notification received in foreground:', event);
            });

            console.log('‚úÖ OneSignal –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OneSignal –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    handleNotificationNavigation(data) {
        console.log('üß≠ OneSignal handleNotificationNavigation called with data:', {
            ...data,
            dataKeys: Object.keys(data || {}),
            hasOrderId: !!data?.orderId,
            hasType: !!data?.type,
            type: data?.type
        });

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PushNotificationService –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const PushNotificationService = require('./PushNotificationService');
            const pushNotificationService = PushNotificationService.default || PushNotificationService;
            
            if (pushNotificationService && pushNotificationService.handleNotificationNavigation) {
                console.log('üîÑ –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ PushNotificationService —Å –¥–∞–Ω–Ω—ã–º–∏:', data);
                pushNotificationService.handleNotificationNavigation(data);
            } else {
                // Fallback –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ PushNotificationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                console.log('‚ö†Ô∏è PushNotificationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
                this.fallbackNavigation(data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ OneSignal:', error);
            this.fallbackNavigation(data);
        }
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    fallbackNavigation(data) {
        if (data.type === 'CHAT_MESSAGE' && data.roomId) {
            console.log('üí¨ Fallback: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É:', data.roomId);
        } else if (data.orderId || data.type === 'ORDER_STATUS') {
            console.log('üì¶ Fallback: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–∞–∫–∞–∑—É:', data.orderId);
        } else if (data.stopId || data.type === 'STOP_NOTIFICATION' || data.type === 'STOP_UPDATE' || data.type === 'STOP_CANCEL') {
            console.log('üöõ Fallback: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', data.stopId || 'unknown', '–¢–∏–ø:', data.type);
        } else if (data.productId || data.type === 'PRODUCT_NOTIFICATION' || data.type === 'PROMOTION') {
            console.log('üõçÔ∏è Fallback: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø—Ä–æ–¥—É–∫—Ç—É:', data.productId);
        } else if (data.url) {
            console.log('üîó Fallback: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ URL:', data.url);
        } else {
            console.log('‚ÑπÔ∏è Fallback: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data.type, 'Data:', data);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async initializeForUser(user) {
        try {
            console.log('üöÄ [DEBUG] initializeForUser started for user:', user.id);
            console.log('üîç [DEBUG] Current state:', {
                isInitialized: this.isInitialized,
                hasSubscription: !!this.subscriptionId,
                currentUserId: this.currentUserId
            });
            
            if (!this.isInitialized) {
                console.log('‚ö†Ô∏è OneSignal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OneSignal —Å App ID –∏–∑ PushNotificationService
                const appId = 'a1bde379-4211-4fb9-89e2-3e94530a7041'; // –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç ID –µ—Å–ª–∏ OneSignal —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π
                const initResult = await this.initialize(appId);
                console.log('üì± [DEBUG] Late OneSignal initialization result:', initResult);
                if (!initResult) {
                    return false;
                }
            }

            console.log('üë§ OneSignal –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîÑ [DEBUG] Setting external user ID...');
            await this.setExternalUserId(user.id.toString());

            // –ü–æ–ª—É—á–∞–µ–º subscription ID
            console.log('üîÑ [DEBUG] Getting subscription ID...');
            const subscriptionId = await this.getSubscriptionId();
            console.log('üé´ [DEBUG] Received subscription ID:', subscriptionId);
            
            if (subscriptionId) {
                console.log('üé´ OneSignal Subscription ID –ø–æ–ª—É—á–µ–Ω:', subscriptionId);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                console.log('üîÑ [DEBUG] Saving to server...');
                const saveResult = await this.saveSubscriptionToServer(subscriptionId, user.id);
                console.log('üíæ [DEBUG] Save to server result:', saveResult);
            } else {
                console.warn('‚ö†Ô∏è [DEBUG] No subscription ID received!');
                return false;
            }

            this.currentUserId = user.id;
            console.log('‚úÖ OneSignal –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ OneSignal initializeForUser:', error);
            console.error('‚ùå [DEBUG] Error stack:', error.stack);
            return false;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async setExternalUserId(userId) {
        try {
            const oneSignal = getOneSignal();
            if (!oneSignal) {
                console.warn('‚ö†Ô∏è OneSignal –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ User ID');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ login
            if (!oneSignal.login || typeof oneSignal.login !== 'function') {
                console.warn('‚ö†Ô∏è OneSignal.login –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            await oneSignal.login(userId);
            console.log('üë§ OneSignal External User ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', userId);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ External User ID:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Subscription ID
    async getSubscriptionId() {
        try {
            const oneSignal = getOneSignal();
            if (!oneSignal) {
                console.warn('‚ö†Ô∏è OneSignal –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Subscription ID');
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
            if (!oneSignal.User?.pushSubscription?.getIdAsync) {
                console.warn('‚ö†Ô∏è OneSignal.User.pushSubscription.getIdAsync –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                return null;
            }

            const deviceState = await oneSignal.User.pushSubscription.getIdAsync();
            console.log('üé´ OneSignal Subscription ID:', deviceState);
            this.subscriptionId = deviceState;
            return deviceState;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Subscription ID:', error);
            return null;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ subscription –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveSubscriptionToServer(subscriptionId, userId) {
        try {
            console.log('üíæ [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OneSignal subscription –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', {
                subscriptionId,
                userId,
                platform: Platform.OS,
                subscriptionIdType: typeof subscriptionId,
                subscriptionIdLength: subscriptionId?.length
            });

            if (!subscriptionId) {
                console.error('‚ùå [DEBUG] subscriptionId –ø—É—Å—Ç–æ–π –∏–ª–∏ undefined');
                return false;
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
            console.log('üîÑ [DEBUG] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º createProtectedRequest...');
            const { createProtectedRequest } = require('@shared/api/api');
            
            if (!createProtectedRequest) {
                console.error('‚ùå [DEBUG] createProtectedRequest –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return false;
            }

            console.log('üì° [DEBUG] –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...');
            const tokenData = {
                token: subscriptionId,
                deviceId: subscriptionId, // OneSignal Player ID –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ deviceId
                platform: Platform.OS,
                tokenType: 'onesignal'
            };
            
            console.log('üì§ [DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/push-tokens:', tokenData);
            
            const response = await createProtectedRequest('post', '/api/push-tokens', tokenData);

            console.log('üì° [DEBUG] –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                response,
                responseType: typeof response,
                responseKeys: response ? Object.keys(response) : 'no response'
            });

            if (response) {
                console.log('‚úÖ [DEBUG] OneSignal —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ');
                return true;
            } else {
                console.warn('‚ö†Ô∏è [DEBUG] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                return false;
            }

        } catch (error) {
            console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è OneSignal subscription:', {
                message: error.message,
                stack: error.stack,
                response: error.response?.data,
                status: error.response?.status
            });
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async clearUserContext() {
        try {
            console.log('üßπ OneSignal –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Player ID –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            try {
                const currentPlayerId = this.subscriptionId || await this.getSubscriptionId();
                
                if (currentPlayerId) {
                    console.log('üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º OneSignal —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', currentPlayerId.substring(0, 20) + '...');
                    
                    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
                    const { createProtectedRequest } = require('@shared/api/api');
                    
                    await createProtectedRequest('put', '/api/push-tokens/deactivate', {
                        token: currentPlayerId
                    });
                    
                    console.log('‚úÖ OneSignal —Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                } else {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OneSignal Player ID –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
                }
            } catch (deactivateError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ OneSignal —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', deactivateError.message);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.currentUserId = null;
            this.subscriptionId = null;
            this.isInitialized = false;

            // –í–æ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OneSignal –º–æ–¥—É–ª—å
            // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "Could not load RNOneSignal native module"
            console.log('‚úÖ OneSignal –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ OneSignal –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.currentUserId = null;
            this.subscriptionId = null;
            this.isInitialized = false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    getStatus() {
        return {
            isInitialized: this.isInitialized,
            hasSubscription: !!this.subscriptionId,
            currentUserId: this.currentUserId,
            service: 'OneSignal'
        };
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async setUserTags(tags) {
        try {
            const oneSignal = getOneSignal();
            if (!oneSignal) {
                console.warn('‚ö†Ô∏è OneSignal –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–≥–æ–≤');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ addTags
            if (!oneSignal.User?.addTags || typeof oneSignal.User.addTags !== 'function') {
                console.warn('‚ö†Ô∏è OneSignal.User.addTags –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            await oneSignal.User.addTags(tags);
            console.log('üè∑Ô∏è OneSignal —Ç–µ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', tags);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ OneSignal —Ç–µ–≥–æ–≤:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ subscription ID
    getCurrentSubscriptionId() {
        return this.subscriptionId;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
const oneSignalService = new OneSignalService();
export default oneSignalService;