/**
 * FCM Token Service –¥–ª—è Expo –ø—Ä–æ–µ–∫—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Device Push Token –∏–∑ expo-notifications –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–æ–≤ –≤ APK —Å–±–æ—Ä–∫–∞—Ö
 * –ù–µ —Ç—Ä–µ–±—É–µ—Ç React Native Firebase –±–∏–±–ª–∏–æ—Ç–µ–∫ - —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π Firebase
 */

import { Platform } from 'react-native';
import * as Constants from 'expo-constants';
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';

class FCMTokenService {
    constructor() {
        this.currentToken = null;
        this.isInitialized = false;
        this.messaging = null;
        console.log('üî• FCMTokenService constructor');
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–±–æ—Ä–∫–∏
    getBuildType() {
        console.log('üîç FCM getBuildType:', {
            __DEV__,
            appOwnership: Constants.appOwnership,
            executionEnvironment: Constants.executionEnvironment,
            buildTypeEnv: process.env.EXPO_PUBLIC_BUILD_TYPE
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (process.env.EXPO_PUBLIC_BUILD_TYPE) {
            return process.env.EXPO_PUBLIC_BUILD_TYPE;
        }

        // Expo Go
        if (Constants.appOwnership === 'expo') {
            return 'expo-go';
        }

        // Standalone APK
        if (Constants.appOwnership === 'standalone' || Constants.executionEnvironment === 'standalone') {
            return 'production';
        }

        // Development
        if (__DEV__) {
            return 'development';
        }

        return 'preview';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ FCM
    shouldUseFCM() {
        const buildType = this.getBuildType();
        const supportsFCM = ['preview', 'production', 'standalone'].includes(buildType);
        
        console.log('üîç FCM support check:', {
            buildType,
            supportsFCM
        });
        
        return supportsFCM;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Expo (–±–µ–∑ Firebase –±–∏–±–ª–∏–æ—Ç–µ–∫)
    async initializeNotifications() {
        try {
            if (!this.shouldUseFCM()) {
                console.log('üö´ FCM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–µ');
                return false;
            }

            const buildType = this.getBuildType();
            console.log('üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ —Å–±–æ—Ä–∫–∏:', buildType);
            
            if (buildType === 'development' || buildType === 'expo-go') {
                console.log('üö´ FCM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Expo Go');
                return false;
            }

            console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Expo Notifications...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            const { status } = await Notifications.getPermissionsAsync();
            console.log('üîê –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', status);
            
            if (status !== 'granted') {
                console.log('üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
                const { status: newStatus } = await Notifications.requestPermissionsAsync();
                console.log('üîê –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', newStatus);
                
                if (newStatus !== 'granted') {
                    console.warn('‚ö†Ô∏è Permissions –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
                    return false;
                }
            }

            console.log('‚úÖ Expo Notifications –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            this.isInitialized = true;
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Device Push Token (–Ω–∞—Ç–∏–≤–Ω—ã–π Firebase –≤ APK)
    async getFCMToken() {
        try {
            if (!this.shouldUseFCM()) {
                console.log('üö´ FCM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                return null;
            }

            console.log('üé´ –ü–æ–ª—É—á–∞–µ–º Device Push Token (—ç—Ç–æ FCM —Ç–æ–∫–µ–Ω –≤ APK —Å–±–æ—Ä–∫–∞—Ö)...');
            
            // –í APK —Å–±–æ—Ä–∫–∞—Ö Device Push Token –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FCM —Ç–æ–∫–µ–Ω
            const deviceToken = await Notifications.getDevicePushTokenAsync();
            
            if (deviceToken?.data) {
                const token = deviceToken.data;
                console.log('‚úÖ Device Push Token –ø–æ–ª—É—á–µ–Ω:', {
                    length: token.length,
                    prefix: token.substring(0, 30) + '...',
                    type: deviceToken.type
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ FCM —Ç–æ–∫–µ–Ω
                const tokenType = this.getTokenType(token);
                console.log('üîç –¢–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', tokenType);
                
                if (tokenType === 'fcm') {
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π FCM —Ç–æ–∫–µ–Ω');
                    this.currentToken = token;
                    return token;
                } else {
                    console.warn('‚ö†Ô∏è Device token –Ω–µ —è–≤–ª—è–µ—Ç—Å—è FCM —Ç–æ–∫–µ–Ω–æ–º:', tokenType);
                    console.log('‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ APK —Å–±–æ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞');
                    return null;
                }
            } else {
                console.warn('‚ö†Ô∏è Device Push Token –ø—É—Å—Ç–æ–π');
                return null;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:', error);
            return null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
    getTokenType(token) {
        if (!token || typeof token !== 'string') {
            return 'unknown';
        }

        if (token.startsWith('ExponentPushToken[')) {
            return 'unsupported';
        }

        if (token.length > 140 && token.includes(':')) {
            return 'fcm';
        }

        if (token.length > 100) {
            return 'fcm';
        }

        return 'unknown';
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveTokenToServer(token, deviceId, platform) {
        try {
            console.log('üíæ FCM saveTokenToServer:', {
                tokenPrefix: token ? token.substring(0, 30) + '...' : 'no token',
                deviceId,
                platform,
                tokenLength: token?.length || 0
            });

            if (!token) {
                console.error('‚ùå Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
            const tokenType = this.getTokenType(token);
            if (tokenType !== 'fcm') {
                console.log('üö´ –ù–µ FCM —Ç–æ–∫–µ–Ω:', tokenType);
                return false;
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API
            const { createProtectedRequest } = require('@shared/api/api');
            
            const tokenData = {
                token,
                deviceId: deviceId || Platform.OS + '_device',
                platform: platform || Platform.OS
            };

            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FCM —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
            const response = await createProtectedRequest('post', '/api/push-tokens', tokenData);
            
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                status: response?.status,
                data: response?.data
            });

            if (response?.status === 200) {
                console.log('‚úÖ FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞:', response?.data);
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ saveTokenToServer:', error);
            return false;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–µ–∑ Firebase –ø–ª–∞–≥–∏–Ω–æ–≤)
    async initialize() {
        try {
            console.log('üöÄ FCMTokenService initialize (Expo Notifications)');

            const buildType = this.getBuildType();
            console.log('üì± Build type:', buildType);

            if (!this.shouldUseFCM()) {
                console.log('üö´ FCM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤:', buildType);
                return false;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const notificationsOk = await this.initializeNotifications();
            if (!notificationsOk) {
                console.error('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                return false;
            }

            // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Device Push Token
            const token = await this.getFCMToken();
            if (!token) {
                console.error('‚ùå FCM —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
                return false;
            }

            console.log('üéâ FCMTokenService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (Device Push Token)');
            return true;

        } catch (error) {
            console.error('‚ùå FCMTokenService initialization error:', error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    getCurrentToken() {
        return this.currentToken;
    }

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    async deactivateTokenOnLogout() {
        try {
            if (!this.currentToken) {
                console.log('üö´ –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
                return true;
            }

            console.log('üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º FCM —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', this.currentToken.substring(0, 30) + '...');

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API
            const { createProtectedRequest } = require('@shared/api/api');
            
            const response = await createProtectedRequest('put', '/api/push-tokens/deactivate', {
                token: this.currentToken,
                deviceId: Platform.OS + '_device',
                platform: Platform.OS
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é:', {
                status: response?.status,
                data: response?.data
            });

            if (response?.status === 200) {
                console.log('‚úÖ FCM —Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                
                // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                this.currentToken = null;
                this.isInitialized = false;
                
                // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                this.clearNotificationHandlers();
                
                return true;
            } else {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å FCM —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                return false;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', error);
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    clearNotificationHandlers() {
        try {
            if (this.responseListener) {
                this.responseListener.remove();
                this.responseListener = null;
            }
            
            if (this.notificationListener) {
                this.notificationListener.remove();
                this.notificationListener = null;
            }
            
            console.log('üßπ FCM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FCM:', error);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async initializeForUser(user) {
        try {
            console.log('üë§ FCM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

            const initialized = await this.initialize();
            if (!initialized) {
                console.log('‚ùå FCM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
                return false;
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.setupNotificationHandlers();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if (this.currentToken) {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º FCM —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                const saved = await this.saveTokenToServer(
                    this.currentToken,
                    Platform.OS + '_' + Date.now(),
                    Platform.OS
                );

                if (saved) {
                    console.log('üéâ FCM —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
                } else {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FCM —Ç–æ–∫–µ–Ω');
                }
            }

            return true;

        } catch (error) {
            console.error('‚ùå FCM initializeForUser error:', error);
            return false;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setupNotificationHandlers() {
        try {
            console.log('üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            this.responseListener = Notifications.addNotificationResponseReceivedListener((response) => {
                console.log('üì± FCM Notification response received:', response);
                
                const data = response.notification.request.content.data;
                if (data) {
                    console.log('üí¨ FCM Notification data:', data);
                    this.handleNotificationNavigation(data);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ foreground
            this.notificationListener = Notifications.addNotificationReceivedListener((notification) => {
                console.log('üì® FCM Notification received in foreground:', notification);
            });

            console.log('‚úÖ FCM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FCM:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    handleNotificationNavigation(data) {
        console.log('üß≠ FCM handleNotificationNavigation:', data);

        if (data.type === 'CHAT_MESSAGE' && data.roomId) {
            console.log('üí¨ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É:', data.roomId);
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ AppNavigator
        } else if (data.url && data.url.includes('chat')) {
            console.log('üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ URL:', data.url);
            // –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è roomId
            const match = data.url.match(/chat\/(\d+)/);
            if (match) {
                const roomId = match[1];
                console.log('üí¨ –ò–∑–≤–ª–µ—á–µ–Ω roomId –∏–∑ URL:', roomId);
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
const fcmTokenService = new FCMTokenService();
export default fcmTokenService;
