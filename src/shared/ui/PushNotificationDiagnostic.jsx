import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert, Clipboard } from 'react-native';
import * as Constants from 'expo-constants';
import * as Device from 'expo-device';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { PushNotificationService } from '@shared/services/PushNotificationService';
import OneSignalService from '@shared/services/OneSignalService';
import { pushTokenApi } from '@entities/notification/api/pushTokenApi';
import { useSelector } from 'react-redux';
import { selectUser, selectTokens } from '@entities/auth';
import { Platform } from 'react-native';

export const PushNotificationDiagnostic = () => {
    const [diagnosticData, setDiagnosticData] = useState({});
    const [loading, setLoading] = useState(false);
    const [serverTokens, setServerTokens] = useState([]);
    const [logs, setLogs] = useState([]);
    
    const user = useSelector(selectUser);
    const tokens = useSelector(selectTokens); 

    const addLog = (message, type = 'info') => {
        const timestamp = new Date().toISOString();
        const logEntry = { timestamp, message, type };
        setLogs(prev => [...prev, logEntry]);
        console.log(`[${type.toUpperCase()}] ${message}`);
    };

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    const copyLogsToClipboard = async () => {
        try {
            const logsText = logs.map(log => 
                `[${log.timestamp}] [${log.type.toUpperCase()}] ${log.message}`
            ).join('\n');
            
            if (logsText.trim()) {
                await Clipboard.setString(logsText);
                addLog('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                Alert.alert('–£—Å–ø–µ—Ö', '–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            } else {
                Alert.alert('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`, 'error');
            Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: ${error.message}`);
        }
    };

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    const clearLogs = () => {
        setLogs([]);
        addLog('–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã', 'info');
    };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ª–æ–≥–æ–≤
    const getLogColor = (type) => {
        switch (type) {
            case 'success':
                return '#d4edda';
            case 'error':
                return '#f8d7da';
            case 'warning':
                return '#fff3cd';
            case 'info':
            default:
                return '#d1ecf1';
        }
    };

    // –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OneSignal
    const runOneSignalDiagnostic = async () => {
        setLoading(true);
        addLog('üöÄ –ó–∞–ø—É—Å–∫ OneSignal –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', 'info');
        const data = {};

        try {
            // Device info
            data.device = {
                isDevice: Device.isDevice,
                platform: Device.osName,
                osVersion: Device.osVersion,
                model: Device.modelName,
                brand: Device.brand,
            };
            addLog(`üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${Device.modelName} (${Device.osName} ${Device.osVersion})`, 'info');

            // App info
            data.app = {
                expoVersion: Constants.expoVersion || 'Not available',
                executionEnvironment: Constants.executionEnvironment || 'Not available',
                buildType: process.env.EXPO_PUBLIC_BUILD_TYPE || 'Not available',
                isStandalone: Constants.appOwnership === 'standalone',
            };
            addLog(`üèóÔ∏è Build Type: ${data.app.buildType}`, 'info');
            addLog(`üì¶ Environment: ${data.app.executionEnvironment}`, 'info');

            // User info
            data.user = {
                id: user?.id,
                role: user?.role,
                email: user?.email,
                isAuthenticated: !!user,
            };
            addLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.email} (ID: ${user?.id})`, user ? 'success' : 'warning');

            // OneSignal Service Status
            try {
                const oneSignalStatus = OneSignalService.getStatus();
                data.oneSignalService = oneSignalStatus;
                addLog(`üîî OneSignal –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${oneSignalStatus.isInitialized}`, oneSignalStatus.isInitialized ? 'success' : 'warning');
                addLog(`üé´ OneSignal Player ID: ${oneSignalStatus.hasSubscription ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`, oneSignalStatus.hasSubscription ? 'success' : 'warning');
                if (oneSignalStatus.currentUserId) {
                    addLog(`üë§ OneSignal User ID: ${oneSignalStatus.currentUserId}`, 'info');
                }
            } catch (error) {
                data.oneSignalService = { error: error.message };
                addLog(`‚ùå –û—à–∏–±–∫–∞ OneSignal Service: ${error.message}`, 'error');
            }

            // Push Notification Service Status
            try {
                const pushServiceStatus = PushNotificationService.getServiceStatus();
                data.pushService = pushServiceStatus;
                addLog(`üì¨ Push Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${pushServiceStatus.isInitialized}`, pushServiceStatus.isInitialized ? 'success' : 'warning');
                addLog(`üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: ${pushServiceStatus.navigationReady}`, pushServiceStatus.navigationReady ? 'success' : 'warning');
            } catch (error) {
                data.pushService = { error: error.message };
                addLog(`‚ùå –û—à–∏–±–∫–∞ Push Service: ${error.message}`, 'error');
            }

        } catch (error) {
            data.generalError = error.message;
            addLog(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`, 'error');
        }

        setDiagnosticData(data);
        setLoading(false);
        addLog('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OneSignal
    const initializeOneSignal = async () => {
        addLog('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OneSignal', 'info');
        
        try {
            const appId = 'a1bde379-4211-4fb9-89e2-3e94530a7041';
            const result = await OneSignalService.initialize(appId);
            
            if (result) {
                addLog('‚úÖ OneSignal –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                const status = OneSignalService.getStatus();
                addLog(`üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${JSON.stringify(status)}`, 'info');
            } else {
                addLog('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OneSignal', 'error');
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OneSignal: ${error.message}`, 'error');
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OneSignal –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const initializeOneSignalForUser = async () => {
        if (!user) {
            addLog('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            Alert.alert('–û—à–∏–±–∫–∞', '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OneSignal');
            return;
        }

        addLog(`üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OneSignal –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`, 'info');
        
        try {
            const result = await OneSignalService.initializeForUser(user);
            
            if (result) {
                addLog('‚úÖ OneSignal –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'success');
                
                // –ü–æ–ª—É—á–∞–µ–º Player ID
                const playerId = OneSignalService.getCurrentSubscriptionId();
                if (playerId) {
                    addLog(`üé´ OneSignal Player ID: ${playerId}`, 'success');
                } else {
                    addLog('‚ö†Ô∏è Player ID –Ω–µ –ø–æ–ª—É—á–µ–Ω', 'warning');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                runOneSignalDiagnostic();
            } else {
                addLog('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OneSignal –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OneSignal –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`, 'error');
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ Player ID
    const getOneSignalPlayerId = async () => {
        addLog('üé´ –ü–æ–ª—É—á–µ–Ω–∏–µ OneSignal Player ID', 'info');
        
        try {
            const playerId = await OneSignalService.getSubscriptionId();
            
            if (playerId) {
                addLog(`‚úÖ Player ID –ø–æ–ª—É—á–µ–Ω: ${playerId}`, 'success');
                Alert.alert('Player ID –ø–æ–ª—É—á–µ–Ω', `Player ID: ${playerId}`);
                
                // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                await Clipboard.setString(playerId);
                addLog('üìã Player ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'info');
            } else {
                addLog('‚ùå Player ID –Ω–µ –ø–æ–ª—É—á–µ–Ω', 'error');
                Alert.alert('–û—à–∏–±–∫–∞', 'Player ID –Ω–µ –ø–æ–ª—É—á–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ OneSignal –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Player ID: ${error.message}`, 'error');
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const checkServerTokens = async () => {
        addLog('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', 'info');
        
        try {
            const response = await pushTokenApi.getUserPushTokens();
            if (response.status === 'success') {
                const tokens = response.data || [];
                setServerTokens(tokens);
                
                addLog(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${tokens.length}`, tokens.length > 0 ? 'success' : 'warning');
                
                if (Array.isArray(tokens)) {
                    tokens.forEach((token, index) => {
                        addLog(`  ${index + 1}. ${token.tokenType || 'unknown'}: ${token.token ? token.token.substring(0, 40) + '...' : 'no token'}`, 'info');
                    });
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º OneSignal —Ç–æ–∫–µ–Ω—ã
                    const oneSignalTokens = tokens.filter(t => t.tokenType === 'onesignal');
                    if (oneSignalTokens.length > 0) {
                        addLog(`‚úÖ OneSignal —Ç–æ–∫–µ–Ω–æ–≤: ${oneSignalTokens.length}`, 'success');
                    } else {
                        addLog('‚ö†Ô∏è OneSignal —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'warning');
                    }
                } else {
                    addLog('‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º', 'warning');
                }
                
                return response;
            } else {
                addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ${response.message}`, 'error');
                return { data: [] };
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`, 'error');
            return { data: [] };
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const sendTestPushNotification = async () => {
        addLog('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'info');
        
        try {
            if (!user) {
                addLog('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
                Alert.alert('–û—à–∏–±–∫–∞', '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
                return;
            }

            const authToken = tokens?.accessToken || user?.token || user?.accessToken;
            if (!authToken) {
                addLog('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º Player ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            addLog('üîç –ü–æ–ª—É—á–∞–µ–º Player ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...', 'info');
            const playerId = await OneSignalService.getSubscriptionId(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            
            addLog(`üé´ Player ID –∏–∑ —Å–µ—Ä–≤–∏—Å–∞: ${playerId || 'null/undefined'}`, playerId ? 'success' : 'warning');
            
            if (!playerId) {
                addLog('‚ùå –ù–µ—Ç OneSignal Player ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
                addLog('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å "üé´ Player ID" –∏–ª–∏ "üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"', 'info');
                Alert.alert('–û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ OneSignal Player ID —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üé´ Player ID"');
                return;
            }

            addLog(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å Player ID: ${playerId}...`, 'info');
            
            const response = await fetch('http://212.67.11.134:5000/api/push-tokens/test', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify({
                    token: playerId, // –ü–µ—Ä–µ–¥–∞–µ–º OneSignal Player ID
                    title: 'üß™ OneSignal Test',
                    message: `–¢–µ—Å—Ç OneSignal –æ—Ç ${new Date().toLocaleTimeString()}`,
                    data: {
                        type: 'ONESIGNAL_TEST',
                        timestamp: Date.now(),
                        source: 'diagnostic_screen'
                    }
                })
            });
            
            const result = await response.json();
            addLog(`üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(result)}`, 'info');
            
            if (response.ok && result.success) {
                addLog('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'success');
                Alert.alert('–£—Å–ø–µ—Ö', '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.');
            } else {
                addLog(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                Alert.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`, 'error');
            Alert.alert('–û—à–∏–±–∫–∞', error.message);
        }
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const setUserTags = async () => {
        addLog('üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤', 'info');
        
        try {
            const tags = {
                user_id: user?.id?.toString() || 'unknown',
                user_role: user?.role || 'unknown',
                platform: Platform.OS,
                app_version: Constants.expoVersion || '1.0.0',
                test_user: 'true'
            };
            
            await OneSignalService.setUserTags(tags);
            addLog(`‚úÖ –¢–µ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${JSON.stringify(tags)}`, 'success');
            Alert.alert('–£—Å–ø–µ—Ö', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–≥–æ–≤: ${error.message}`, 'error');
        }
    };

    // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ OneSignal
    const clearOneSignalContext = async () => {
        addLog('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ OneSignal', 'info');
        
        try {
            await OneSignalService.clearUserContext();
            addLog('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç OneSignal –æ—á–∏—â–µ–Ω', 'success');
            Alert.alert('–£—Å–ø–µ—Ö', '–ö–æ–Ω—Ç–µ–∫—Å—Ç OneSignal –æ—á–∏—â–µ–Ω');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            runOneSignalDiagnostic();
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`, 'error');
        }
    };

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const forceTokenRegistration = async () => {
        addLog('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è OneSignal —Ç–æ–∫–µ–Ω–∞', 'info');
        
        try {
            if (!user) {
                addLog('‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
                Alert.alert('–û—à–∏–±–∫–∞', '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Push Service –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const result = await PushNotificationService.initializeForUser(user);
            
            if (result) {
                addLog('‚úÖ Push Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'success');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                setTimeout(async () => {
                    await checkServerTokens();
                }, 1000);
            } else {
                addLog('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Push Service', 'error');
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
        }
    };

    // –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    const testChatMessage = async () => {
        addLog('üí¨ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–∞—Ç–∞', 'info');
        
        try {
            Alert.alert(
                '–¢–µ—Å—Ç —á–∞—Ç–∞',
                '–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OneSignal —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n' +
                '1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å OneSignal Player ID\n' +
                '2. –ó–∞–π–¥–∏—Ç–µ –≤ –ª—é–±–æ–π —á–∞—Ç\n' +
                '3. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
                '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n' +
                '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üì® –¢–µ—Å—Ç Push"',
                [{ text: 'OK' }]
            );
            
            addLog('üí° –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞', 'info');
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    };

    const renderValue = (value, label) => (
        <View style={styles.item}>
            <Text style={styles.label}>{label}:</Text>
            <Text style={styles.value}>
                {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}
            </Text>
        </View>
    );

    useEffect(() => {
        runOneSignalDiagnostic();
        checkServerTokens();
    }, []);

    return (
        <ScrollView style={styles.container}>
            <Text style={styles.title}>üîî OneSignal Diagnostic</Text>
            
            <View style={styles.buttonContainer}>
                <TouchableOpacity style={styles.button} onPress={runOneSignalDiagnostic} disabled={loading}>
                    <Text style={styles.buttonText}>
                        {loading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : 'üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'}
                    </Text>
                </TouchableOpacity>
                
                <TouchableOpacity style={[styles.button, { backgroundColor: '#34C759' }]} onPress={initializeOneSignal}>
                    <Text style={styles.buttonText}>üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#FF9500' }]} onPress={initializeOneSignalForUser}>
                    <Text style={styles.buttonText}>üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#9B59B6' }]} onPress={getOneSignalPlayerId}>
                    <Text style={styles.buttonText}>üé´ Player ID</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#3498DB' }]} onPress={forceTokenRegistration}>
                    <Text style={styles.buttonText}>üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#E74C3C' }]} onPress={sendTestPushNotification}>
                    <Text style={styles.buttonText}>üì® –¢–µ—Å—Ç Push</Text>
                </TouchableOpacity>
            </View>

            <View style={styles.buttonContainer}>
                <TouchableOpacity style={[styles.button, { backgroundColor: '#27AE60' }]} onPress={setUserTags}>
                    <Text style={styles.buttonText}>üè∑Ô∏è –¢–µ–≥–∏</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#F39C12' }]} onPress={checkServerTokens}>
                    <Text style={styles.buttonText}>üìã –¢–æ–∫–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#8E44AD' }]} onPress={testChatMessage}>
                    <Text style={styles.buttonText}>üí¨ –¢–µ—Å—Ç —á–∞—Ç–∞</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.button, { backgroundColor: '#E67E22' }]} onPress={clearOneSignalContext}>
                    <Text style={styles.buttonText}>üßπ –û—á–∏—Å—Ç–∏—Ç—å</Text>
                </TouchableOpacity>
            </View>

            {Object.keys(diagnosticData).length > 0 && (
                <View style={styles.section}>
                    <Text style={styles.sectionTitle}>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</Text>
                    
                    {diagnosticData.user && (
                        <View>
                            <Text style={styles.subTitle}>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</Text>
                            {Object.entries(diagnosticData.user).map(([key, value]) => 
                                <View key={key}>{renderValue(value, key)}</View>
                            )}
                        </View>
                    )}

                    {diagnosticData.device && (
                        <View>
                            <Text style={styles.subTitle}>üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</Text>
                            {Object.entries(diagnosticData.device).map(([key, value]) => 
                                <View key={key}>{renderValue(value, key)}</View>
                            )}
                        </View>
                    )}

                    {diagnosticData.app && (
                        <View>
                            <Text style={styles.subTitle}>üèóÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</Text>
                            {Object.entries(diagnosticData.app).map(([key, value]) => 
                                <View key={key}>{renderValue(value, key)}</View>
                            )}
                        </View>
                    )}

                    {diagnosticData.oneSignalService && (
                        <View>
                            <Text style={styles.subTitle}>üîî OneSignal Service:</Text>
                            {renderValue(diagnosticData.oneSignalService, 'OneSignal Status')}
                        </View>
                    )}

                    {diagnosticData.pushService && (
                        <View>
                            <Text style={styles.subTitle}>üì¨ Push Service:</Text>
                            {renderValue(diagnosticData.pushService, 'Push Service Status')}
                        </View>
                    )}

                    {serverTokens.length > 0 && (
                        <View>
                            <Text style={styles.subTitle}>üìã –¢–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</Text>
                            {serverTokens.map((token, index) => (
                                <View key={index} style={styles.item}>
                                    <Text style={styles.label}>–¢–æ–∫–µ–Ω {index + 1}:</Text>
                                    <Text style={styles.value}>
                                        –¢–∏–ø: {token.tokenType || 'unknown'}
                                    </Text>
                                    <Text style={styles.value}>
                                        –¢–æ–∫–µ–Ω: {token.token?.substring(0, 50)}...
                                    </Text>
                                    <Text style={[styles.value, { color: token.isActive ? '#34C759' : '#FF3B30' }]}>
                                        –ê–∫—Ç–∏–≤–µ–Ω: {token.isActive ? '‚úÖ' : '‚ùå'}
                                    </Text>
                                </View>
                            ))}
                        </View>
                    )}

                    {diagnosticData.generalError && (
                        <View>
                            <Text style={styles.errorTitle}>‚ùå –û—à–∏–±–∫–∞:</Text>
                            {renderValue(diagnosticData.generalError, 'Error')}
                        </View>
                    )}
                </View>
            )}

            {/* –õ–æ–≥–∏ */}
            <View style={styles.section}>
                <View style={styles.sectionHeader}>
                    <Text style={styles.sectionTitle}>üìã –õ–æ–≥–∏:</Text>
                    <View style={styles.logsHeaderButtons}>
                        <TouchableOpacity
                            style={styles.copyLogsButton}
                            onPress={copyLogsToClipboard}
                            disabled={logs.length === 0}
                        >
                            <Text style={styles.copyLogsButtonText}>üìã</Text>
                        </TouchableOpacity>
                        <TouchableOpacity
                            style={styles.clearLogsButton}
                            onPress={clearLogs}
                            disabled={logs.length === 0}
                        >
                            <Text style={styles.clearLogsButtonText}>üóëÔ∏è</Text>
                        </TouchableOpacity>
                    </View>
                </View>
                
                <Text style={styles.logCount}>
                    –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: {logs.length}
                </Text>

                <View style={styles.logsContainer}>
                    <ScrollView 
                        style={styles.logsScrollView} 
                        nestedScrollEnabled 
                        showsVerticalScrollIndicator={true}
                    >
                        {logs.length === 0 ? (
                            <Text style={styles.noLogsText}>
                                –ù–µ—Ç –ª–æ–≥–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤.
                            </Text>
                        ) : (
                            logs.map((log, index) => (
                                <View key={index} style={[
                                    styles.logListItem,
                                    { borderLeftColor: getLogColor(log.type) }
                                ]}>
                                    <View style={styles.logItemHeader}>
                                        <Text style={styles.logItemTimestamp}>
                                            {new Date(log.timestamp).toLocaleTimeString()}
                                        </Text>
                                        <Text style={styles.logItemType}>
                                            {log.type.toUpperCase()}
                                        </Text>
                                    </View>
                                    <Text style={styles.logItemMessage}>
                                        {log.message}
                                    </Text>
                                </View>
                            ))
                        )}
                    </ScrollView>
                </View>
            </View>
        </ScrollView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 12,
        backgroundColor: '#f5f5f5'
    },
    title: {
        fontSize: 18,
        fontWeight: 'bold',
        marginBottom: 12,
        textAlign: 'center'
    },
    buttonContainer: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between',
        marginBottom: 8,
        gap: 6
    },
    button: {
        backgroundColor: '#007AFF',
        padding: 10,
        borderRadius: 6,
        minWidth: 80,
        maxWidth: 120,
        marginBottom: 6
    },
    buttonText: {
        color: 'white',
        textAlign: 'center',
        fontWeight: 'bold',
        fontSize: 10,
        lineHeight: 14
    },
    section: {
        backgroundColor: 'white',
        padding: 12,
        borderRadius: 8,
        marginBottom: 12
    },
    sectionTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        marginBottom: 8
    },
    sectionHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 12
    },
    subTitle: {
        fontSize: 14,
        fontWeight: '600',
        marginTop: 12,
        marginBottom: 6,
        color: '#333'
    },
    errorTitle: {
        fontSize: 16,
        fontWeight: '600',
        marginTop: 16,
        marginBottom: 8,
        color: '#FF3B30'
    },
    item: {
        marginBottom: 6,
        padding: 6,
        backgroundColor: '#f8f8f8',
        borderRadius: 4
    },
    label: {
        fontSize: 12,
        fontWeight: '500',
        color: '#333',
        marginBottom: 2
    },
    value: {
        fontSize: 11,
        color: '#666',
        fontFamily: 'monospace'
    },
    logCount: {
        fontSize: 14,
        color: '#555',
        marginTop: 8,
        marginBottom: 8,
        textAlign: 'center'
    },
    logsHeaderButtons: {
        flexDirection: 'row',
        gap: 4
    },
    copyLogsButton: {
        backgroundColor: '#34C759',
        paddingHorizontal: 8,
        paddingVertical: 4,
        borderRadius: 4
    },
    copyLogsButtonText: {
        color: 'white',
        fontSize: 10,
        fontWeight: 'bold'
    },
    clearLogsButton: {
        backgroundColor: '#FF3B30',
        paddingHorizontal: 8,
        paddingVertical: 4,
        borderRadius: 4
    },
    clearLogsButtonText: {
        color: 'white',
        fontSize: 10,
        fontWeight: 'bold'
    },
    logsContainer: {
        height: 300,
        backgroundColor: '#ffffff',
        borderRadius: 8,
        borderWidth: 1,
        borderColor: '#e0e0e0',
        overflow: 'hidden',
        marginTop: 8
    },
    logsScrollView: {
        flex: 1,
        backgroundColor: '#ffffff'
    },
    noLogsText: {
        textAlign: 'center',
        color: '#999',
        fontStyle: 'italic',
        padding: 20
    },
    logListItem: {
        padding: 8,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
        borderLeftWidth: 4,
        backgroundColor: '#ffffff',
        marginBottom: 2
    },
    logItemHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 4
    },
    logItemTimestamp: {
        fontSize: 10,
        color: '#666',
        fontFamily: 'monospace',
        fontWeight: '500'
    },
    logItemType: {
        fontSize: 9,
        color: '#888',
        fontWeight: 'bold',
        textTransform: 'uppercase',
        paddingHorizontal: 4,
        paddingVertical: 1,
        backgroundColor: '#f0f0f0',
        borderRadius: 2
    },
    logItemMessage: {
        fontSize: 12,
        color: '#333',
        lineHeight: 16
    }
});

export default PushNotificationDiagnostic;