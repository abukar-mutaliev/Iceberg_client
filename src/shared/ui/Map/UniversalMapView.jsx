import React from 'react';
import { Platform } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import Constants from 'expo-constants';
import { logData } from '@shared/lib/logger';

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ref
export const UniversalMapView = React.forwardRef(({ children, provider, ...otherProps }, ref) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Google Maps –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const hasGoogleMapsConfig = React.useMemo(() => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const manifest = Constants.manifest;
      const expoConfig = Constants.expoConfig;
      const manifest2 = Constants.manifest2;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ API –∫–ª—é—á–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      const sources = [
        // –ò–∑ expoConfig (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è development builds)
        { key: expoConfig?.android?.config?.googleMaps?.apiKey, source: 'expoConfig.android.config.googleMaps.apiKey' },
        { key: expoConfig?.ios?.config?.googleMapsApiKey, source: 'expoConfig.ios.config.googleMapsApiKey' },
        { key: expoConfig?.extra?.googleMapsApiKey, source: 'expoConfig.extra.googleMapsApiKey' },
        // –ò–∑ manifest2 (–¥–ª—è EAS builds)
        { key: manifest2?.android?.config?.googleMaps?.apiKey, source: 'manifest2.android.config.googleMaps.apiKey' },
        { key: manifest2?.ios?.config?.googleMapsApiKey, source: 'manifest2.ios.config.googleMapsApiKey' },
        { key: manifest2?.extra?.googleMapsApiKey, source: 'manifest2.extra.googleMapsApiKey' },
        // –ò–∑ manifest (–¥–ª—è Expo Go)
        { key: manifest?.android?.config?.googleMaps?.apiKey, source: 'manifest.android.config.googleMaps.apiKey' },
        { key: manifest?.ios?.config?.googleMapsApiKey, source: 'manifest.ios.config.googleMapsApiKey' },
        { key: manifest?.extra?.googleMapsApiKey, source: 'manifest.extra.googleMapsApiKey' },
        // –ò–∑ environment variables
        { key: process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY, source: 'process.env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY' },
        { key: process.env.GOOGLE_MAPS_API_KEY, source: 'process.env.GOOGLE_MAPS_API_KEY' },
        // Hardcoded fallback –¥–ª—è development (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)
        { key: "AIzaSyDev-AMb24bvlQn3a-b4DGsItiYB6su6_E", source: 'hardcoded_fallback' }
      ];

      const foundSource = sources.find(item => item.key && typeof item.key === 'string' && item.key.length > 0);

      // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      logData('üó∫Ô∏è Google Maps Diagnostic', {
        nodeEnv: process.env.NODE_ENV,
        platform: Platform.OS,
        isDevice: Constants.isDevice,
        expoVersion: Constants.expoVersion,
        appOwnership: Constants.appOwnership,
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        manifestExists: !!manifest,
        expoConfigExists: !!expoConfig,
        manifest2Exists: !!manifest2,
        // –ö–ª—é—á–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        expoConfigAndroid: expoConfig?.android?.config?.googleMaps?.apiKey ? 'FOUND' : 'NOT_FOUND',
        expoConfigIOS: expoConfig?.ios?.config?.googleMapsApiKey ? 'FOUND' : 'NOT_FOUND',
        expoConfigExtra: expoConfig?.extra?.googleMapsApiKey ? 'FOUND' : 'NOT_FOUND',
        manifestAndroid: manifest?.android?.config?.googleMaps?.apiKey ? 'FOUND' : 'NOT_FOUND',
        manifestIOS: manifest?.ios?.config?.googleMapsApiKey ? 'FOUND' : 'NOT_FOUND',
        manifestExtra: manifest?.extra?.googleMapsApiKey ? 'FOUND' : 'NOT_FOUND',
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        foundApiKey: !!foundSource,
        foundFrom: foundSource?.source || 'NONE',
        totalSourcesChecked: sources.length
      });

      if (foundSource) {
        logData('‚úÖ Google Maps API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω!', {
          keyLength: foundSource.key.length,
          keyPrefix: foundSource.key.substring(0, 10) + '...',
          platform: Platform.OS,
          source: foundSource.source,
          sourceIndex: sources.indexOf(foundSource),
          appOwnership: Constants.appOwnership
        });
        return true;
      } else {
        logData('‚ùå Google Maps API –∫–ª—é—á –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!', {
          checkedSources: sources.length,
          platform: Platform.OS,
          appOwnership: Constants.appOwnership,
          manifestExists: !!manifest,
          expoConfigExists: !!expoConfig
        });
        return false;
      }
    } catch (error) {
      logData('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google Maps –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', {
        error: error.message,
        stack: error.stack
      });
      return false;
    }
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞—Ä—Ç—ã
  const mapProvider = React.useMemo(() => {
    if (hasGoogleMapsConfig && provider) {
      logData('üó∫Ô∏è UniversalMapView: –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Maps');
      return provider;
    } else {
      logData('üó∫Ô∏è UniversalMapView: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã');
      return undefined; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    }
  }, [hasGoogleMapsConfig, provider]);

  return (
      <MapView
          ref={ref}
          {...otherProps}
          provider={mapProvider}
          onError={(error) => {
            logData('üó∫Ô∏è UniversalMapView: –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã', {
              error,
              provider: mapProvider,
              hasGoogleConfig: hasGoogleMapsConfig
            });
            if (otherProps.onError) {
              otherProps.onError(error);
            }
          }}
          onMapReady={() => {
            logData('üó∫Ô∏è UniversalMapView: –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', {
              provider: mapProvider,
              hasGoogleConfig: hasGoogleMapsConfig
            });
            if (otherProps.onMapReady) {
              otherProps.onMapReady();
            }
          }}
      >
        {children}
      </MapView>
  );
});

// –î–æ–±–∞–≤–ª—è–µ–º displayName –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
UniversalMapView.displayName = 'UniversalMapView';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –∏ Marker –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export { Marker };

export default UniversalMapView;