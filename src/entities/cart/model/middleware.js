/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ—Ä–æ–±–æ—á–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */

import { fetchCart, fetchCartStats, addNotification } from './slice';

const cartOperationTypes = [
    'cart/addToCart/fulfilled',
    'cart/updateCartItem/fulfilled',
    'cart/removeFromCart/fulfilled',
    'cart/setClientType/fulfilled',
    'cart/bulkUpdateQuantities/fulfilled',
    'cart/bulkRemoveItems/fulfilled'
];

const notificationOperationTypes = [
    'cart/addToCart/fulfilled',
    // 'cart/updateCartItem/fulfilled', // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    'cart/removeFromCart/fulfilled'
];

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–æ–±–æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {Object} product - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {number} quantity - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–æ—Ä–æ–±–æ–∫)
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
 */
const formatBoxQuantity = (product, quantity) => {
    if (!product) return `${quantity} —à—Ç.`;

    const itemsPerBox = product.itemsPerBox || 1;
    const totalItems = quantity * itemsPerBox;

    if (itemsPerBox === 1) {
        return `${quantity} —à—Ç.`;
    }

    return `${quantity} –∫–æ—Ä–æ–±–æ–∫ (${totalItems} —à—Ç.)`;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
 * @param {string} operationType - –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {Object} payload - –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Object|null} - –û–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ null
 */
const createCartOperationNotification = (operationType, payload, state) => {
    const { productId, quantity, itemId, guestCart } = payload;

    let product = null;

    if (guestCart && guestCart.items) {
        const cartItem = guestCart.items.find(item =>
            item.productId === productId || item.id === itemId
        );
        product = cartItem?.product;
    } else {
        product = state.products?.items?.find(p => p.id === productId);

        if (!product) {
            const cartItem = state.cart?.items?.find(item =>
                item.id === itemId || item.productId === productId || item.product?.id === productId
            );
            product = cartItem?.product;
        }
    }

    const productName = product?.name || '–¢–æ–≤–∞—Ä';
    const formattedQuantity = formatBoxQuantity(product, quantity);

    switch (operationType) {
        case 'cart/addToCart/fulfilled':
            return {
                id: `add_${productId}_${Date.now()}`,
                type: 'success',
                message: `${productName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: ${formattedQuantity}`,
                autoHide: true,
                duration: 3000,
                icon: 'üõí',
                productId,
                quantity,
                action: 'add'
            };

        case 'cart/updateCartItem/fulfilled':
            if (quantity === 0) {
                return {
                    id: `remove_${itemId}_${Date.now()}`,
                    type: 'info',
                    message: `${productName} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`,
                    autoHide: true,
                    duration: 3000,
                    icon: 'üóëÔ∏è',
                    itemId,
                    action: 'remove'
                };
            } else {
                return {
                    id: `update_${itemId}_${Date.now()}`,
                    type: 'info',
                    message: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ${productName} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${formattedQuantity}`,
                    autoHide: true,
                    duration: 3000,
                    icon: 'üìù',
                    itemId,
                    quantity,
                    action: 'update'
                };
            }

        case 'cart/removeFromCart/fulfilled':
            return {
                id: `remove_${itemId}_${Date.now()}`,
                type: 'info',
                message: `${productName} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`,
                autoHide: true,
                duration: 3000,
                icon: 'üóëÔ∏è',
                itemId,
                action: 'remove'
            };

        default:
            return null;
    }
};

export const cartReloadMiddleware = (store) => (next) => (action) => {
    const result = next(action);

    if (cartOperationTypes.includes(action.type)) {
        const state = store.getState();
        const isAuthenticated = state.auth?.user?.id;
        const userRole = state.auth?.user?.role;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
        // –ö–æ—Ä–∑–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≥–æ—Å—Ç–µ–π)
        const isCartAvailable = userRole === 'CLIENT' || !isAuthenticated;

        if (__DEV__) {
            console.log(`üîÑ CartReloadMiddleware: Detected ${action.type}`, {
                isAuthenticated: !!isAuthenticated,
                userRole,
                isCartAvailable,
                currentItemsCount: state.cart?.items?.length || 0,
                lastFetchTime: state.cart?.lastFetchTime,
                payload: action.payload
            });
        }

        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–æ–ª–∏
        if (!isCartAvailable) {
            if (__DEV__) {
                console.log(`üîÑ CartReloadMiddleware: Skipping cart operations for role ${userRole || 'guest'}`);
            }
            return result;
        }

        if (notificationOperationTypes.includes(action.type)) {
            const notification = createCartOperationNotification(action.type, action.payload, state);

            if (notification) {
                store.dispatch(addNotification(notification));

                if (__DEV__) {
                    console.log(`üì¢ CartReloadMiddleware: Added notification for ${action.type}:`, notification.message);
                }
            }
        }

        if (isAuthenticated) {
            if (__DEV__) {
                console.log(`üîÑ CartReloadMiddleware: Auto-reloading cart after ${action.type}`);
            }

            let delay = 200;

            switch (action.type) {
                case 'cart/addToCart/fulfilled':
                    delay = 300;
                    break;
                case 'cart/removeFromCart/fulfilled':
                    delay = 200;
                    break;
                case 'cart/updateCartItem/fulfilled':
                    delay = 200;
                    break;
                case 'cart/bulkUpdateQuantities/fulfilled':
                case 'cart/bulkRemoveItems/fulfilled':
                    delay = 500;
                    break;
                case 'cart/setClientType/fulfilled':
                    delay = 400;
                    break;
                default:
                    delay = 200;
            }

            setTimeout(() => {
                if (__DEV__) {
                    console.log(`üîÑ CartReloadMiddleware: Dispatching fetchCart(true) for ${action.type} (after ${delay}ms delay)`);
                }

                store.dispatch(fetchCart(true));

                if (action.type === 'cart/setClientType/fulfilled') {
                    setTimeout(() => {
                        store.dispatch(fetchCartStats());
                    }, 100);
                }
            }, delay);
        } else if (__DEV__) {
            console.log(`üîÑ CartReloadMiddleware: Skipping reload for guest user`);
        }
    }

    if (action.type === 'cart/checkout/fulfilled') {
        store.dispatch({ type: 'cart/clearNotifications' });

        store.dispatch(addNotification({
            id: `checkout_success_${Date.now()}`,
            type: 'success',
            message: 'üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!',
            autoHide: true,
            duration: 5000,
            action: 'checkout'
        }));

        if (__DEV__) {
            console.log('üéâ CartReloadMiddleware: Order completed successfully');
        }
    }

    if (action.type.startsWith('cart/') && action.type.endsWith('/rejected')) {
        const errorMessage = action.payload || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';

        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π UI –¥–ª—è —ç—Ç–æ–≥–æ
        const isAuthError = errorMessage.includes('–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') || 
                           errorMessage.includes('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') || 
                           errorMessage.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏') ||
                           errorMessage.includes('unauthorized');

        if (!isAuthError) {
            store.dispatch(addNotification({
                id: `error_${Date.now()}`,
                type: 'error',
                message: `–û—à–∏–±–∫–∞: ${errorMessage}`,
                autoHide: true,
                duration: 5000,
                icon: '‚ö†Ô∏è',
                action: 'error'
            }));
        }

        if (__DEV__) {
            console.error(`‚ùå CartReloadMiddleware: Error in ${action.type}:`, errorMessage);
        }
    }

    return result;
};

export default cartReloadMiddleware;