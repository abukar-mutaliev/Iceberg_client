import { useCallback, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigation } from '@react-navigation/native';
import { Alert } from 'react-native';
import { fetchAllStops, selectStops, selectStopById } from '@entities/stop';
import { getBaseUrl } from '@shared/api/api';

export const useStopsNavigation = () => {
    let navigation = null;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    try {
        navigation = useNavigation();
    } catch (error) {
        console.warn('Navigation not available in useStopsNavigation:', error.message);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        return {
            navigateToStops: (navigationData) => {
                console.warn('Navigation to stops skipped - no navigation available');
            }
        };
    }
    
    const dispatch = useDispatch();
    const stops = useSelector(selectStops);

    // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    const isNavigating = useRef(false);
    const lastNavigationTime = useRef(0);

    const navigateToStops = useCallback(async (navigationData) => {
        if (!navigation) {
            console.warn('Navigation not available in navigateToStops');
            return;
        }

        const {
            stopId,
            forceRefresh,
            source,
            skipDeepLinkCheck,
            timestamp
        } = navigationData || {};

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        const now = Date.now();
        if (isNavigating.current || (now - lastNavigationTime.current < 1000)) {
            console.log('üö´ Navigation blocked - too frequent or already navigating');
            return;
        }

        isNavigating.current = true;
        lastNavigationTime.current = now;

        try {
            console.log('üß≠ navigateToStops called with:', {
                stopId,
                forceRefresh,
                source,
                currentStopsCount: stops?.length || 0,
                skipDeepLinkCheck,
                apiUrl: getBaseUrl() // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API URL
            });

            if (!stopId) {
                console.error('‚ùå No stopId provided');
                return;
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–∑ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if (forceRefresh || source === 'push_notification') {
                console.log('üîÑ Force refreshing stops data due to push navigation');
                console.log('üì° API URL:', getBaseUrl());

                try {
                    await dispatch(fetchAllStops()).unwrap();
                    console.log('‚úÖ Stops data refreshed successfully from:', getBaseUrl());

                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                    await new Promise(resolve => setTimeout(resolve, 300));
                } catch (error) {
                    console.error('‚ùå Error refreshing stops from API:', error);
                    console.error('üì° Failed API URL:', getBaseUrl());
                }
            }

            console.log('üöõ Navigating to stop with ID:', stopId);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (!stops || stops.length === 0) {
                console.log('üì• Loading stops data before navigation from:', getBaseUrl());
                try {
                    await dispatch(fetchAllStops()).unwrap();
                } catch (error) {
                    console.error('‚ùå Error loading stops:', error);
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ store
            const currentStops = useSelector.getState ?
                selectStops(useSelector.getState()) : stops;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const targetStop = currentStops?.find(stop => stop.id === parseInt(stopId));

            if (!targetStop && source === 'push_notification') {
                console.log('üîÑ Stop not found, forcing data refresh from API...');
                console.log('üì° Retrying with API:', getBaseUrl());

                // –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ —ç—Ç–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                try {
                    await dispatch(fetchAllStops()).unwrap();
                    await new Promise(resolve => setTimeout(resolve, 500));

                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑
                    const updatedStops = useSelector.getState ?
                        selectStops(useSelector.getState()) : stops;
                    const retryStop = updatedStops?.find(stop => stop.id === parseInt(stopId));

                    if (!retryStop) {
                        console.error(`‚ùå Stop ${stopId} still not found after refresh among ${updatedStops?.length || 0} stops`);
                        console.error('üì° API URL used:', getBaseUrl());

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        Alert.alert(
                            '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                            `–û—Å—Ç–∞–Ω–æ–≤–∫–∞ #${stopId} –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞...`,
                            [
                                { text: 'OK' },
                                {
                                    text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                                    onPress: () => {
                                        setTimeout(() => {
                                            navigateToStops({
                                                ...navigationData,
                                                forceRefresh: true
                                            });
                                        }, 1000);
                                    }
                                }
                            ]
                        );
                        return;
                    }
                } catch (error) {
                    console.error('‚ùå Error in retry loading from API:', error);
                    console.error('üì° Failed API URL:', getBaseUrl());
                }
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            const navigationParams = {
                stopId: parseInt(stopId),
                source: source || 'unknown',
                timestamp: timestamp || Date.now(),
                forceRefresh: forceRefresh || false,
                apiUrl: getBaseUrl()
            };

            if (navigation.getState().routeNames.includes('StopDetails')) {
                navigation.replace('StopDetails', navigationParams);
            } else {
                navigation.navigate('StopDetails', navigationParams);
            }

            console.log('‚úÖ Successfully navigated to StopDetails');

        } catch (error) {
            console.error('‚ùå Error in navigateToStops:', error);
            console.error('üì° API URL during error:', getBaseUrl());

            Alert.alert(
                '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.',
                [{ text: 'OK' }]
            );
        } finally {
            setTimeout(() => {
                isNavigating.current = false;
            }, 1000);
        }
    }, [navigation, dispatch, stops]);

    return { navigateToStops };
};