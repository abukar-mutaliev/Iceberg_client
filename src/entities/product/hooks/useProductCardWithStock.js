import { useCallback, useMemo } from 'react';
import { useCartProduct } from '@entities/cart';
import { useProductStock } from '@entities/warehouse';
import { getBaseUrl } from '@shared/api/api';

// –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
const DEFAULT_PRODUCT_IMAGE = null;

// –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const getImageBaseUrl = () => {
    const baseUrl = getBaseUrl();
    return baseUrl ? `${baseUrl}/uploads/` : 'http://212.67.11.134:5000/uploads/';
};

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–ª–∞–¥–æ–≤
 * @param {Object} product - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @param {Object} options - –û–ø—Ü–∏–∏
 * @param {boolean} options.useWarehouseStock - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
 * @param {boolean} options.findNearestWarehouses - –ò—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–∫–ª–∞–¥—ã —Å —Ç–æ–≤–∞—Ä–æ–º
 * @returns {Object} - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–ª–∞–¥–∞—Ö
 */
export const useProductCardWithStock = (product, {
    useWarehouseStock = false,
    findNearestWarehouses = false
} = {}) => {
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞
    const productId = useMemo(() => {
        if (!product) return null;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º originalData, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–∏–∑ ProductsList)
        const actualProduct = product.originalData || product;

        let rawId = null;
        if (actualProduct.id) {
            rawId = actualProduct.id;
        } else if (actualProduct.productId) {
            rawId = actualProduct.productId;
        } else if (actualProduct.product && actualProduct.product.id) {
            rawId = actualProduct.product.id;
        } else if (product.id) {
            rawId = product.id;
        }

        if (rawId === null) return null;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        try {
            const numericId = Number(rawId);
            if (isNaN(numericId) || numericId <= 0) {
                return null;
            }
            return numericId;
        } catch (error) {
            return null;
        }
    }, [product]);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const {
        isInCart,
        quantity,
        cartItem,
        isAdding,
        isUpdating,
        isRemoving,
        isLoading: cartLoading,
        addToCart,
        updateQuantity,
        removeFromCart,
        incrementQuantity,
        decrementQuantity
    } = useCartProduct(productId);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    const {
        totalStock,
        availableStock,
        warehousesWithStock,
        nearestWarehouses,
        loading: stockLoading,
        error: stockError,
        hasStock,
        isAvailable: stockAvailable,
        isLowStock,
        stats: stockStats,
        getWarehouseStock,
        hasStockInWarehouse
    } = useProductStock(productId, {
        autoLoad: useWarehouseStock,
        findWarehouses: findNearestWarehouses
    });

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
    const productData = useMemo(() => {
        if (!product) return {
            id: null,
            name: '',
            description: '',
            price: 0,
            image: DEFAULT_PRODUCT_IMAGE,
            stockQuantity: 0,
            availableQuantity: 0,
            isActive: false,
            weight: null,
            supplier: null,
            formattedPrice: '0 ‚ÇΩ'
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º originalData, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–∏–∑ ProductsList)
        const actualProduct = product.originalData || product;

        const price = typeof actualProduct.price === 'number' ? actualProduct.price :
            typeof actualProduct.price === 'string' ? parseFloat(actualProduct.price) || 0 : 0;

        const formattedPrice = new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
        }).format(price);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        let stockQuantity, availableQuantity;
        
        if (useWarehouseStock && hasStock) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–ª–∞–¥–æ–≤
            stockQuantity = totalStock;
            availableQuantity = availableStock;
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            stockQuantity = actualProduct.stockQuantity || 0;
            availableQuantity = actualProduct.availableQuantity !== undefined && actualProduct.availableQuantity !== null 
                ? actualProduct.availableQuantity 
                : stockQuantity;
        }

        console.log('üè¢ useProductCardWithStock data processing:', {
            productId,
            name: actualProduct.name || actualProduct.title,
            useWarehouseStock,
            fromWarehouse: { totalStock, availableStock },
            fromProduct: { 
                stockQuantity: actualProduct.stockQuantity, 
                availableQuantity: actualProduct.availableQuantity 
            },
            final: { stockQuantity, availableQuantity },
            warehousesCount: warehousesWithStock?.length || 0
        });

        return {
            id: productId,
            name: actualProduct.name || actualProduct.title || '',
            description: actualProduct.description || '',
            price: price,
            image: getProductImage(actualProduct),
            stockQuantity: stockQuantity,
            availableQuantity: availableQuantity,
            isActive: actualProduct.isActive !== undefined ? actualProduct.isActive : true,
            weight: actualProduct.weight || null,
            supplier: actualProduct.supplier || null,
            formattedPrice: formattedPrice
        };
    }, [product, productId, useWarehouseStock, totalStock, availableStock, hasStock, warehousesWithStock]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º availableQuantity
    const isAvailable = useMemo(() => {
        const isActive = productData.isActive !== false;
        const availableQuantity = productData.availableQuantity || 0;
        return isActive && availableQuantity > 0;
    }, [productData.isActive, productData.availableQuantity]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º availableQuantity
    const isExceedsStock = useMemo(() => {
        return quantity >= productData.availableQuantity;
    }, [quantity, productData.availableQuantity]);

    // –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º availableQuantity
    const status = useMemo(() => {
        if (!productData.isActive) return 'inactive';
        if (productData.availableQuantity <= 0) return 'out_of_stock';
        if (isExceedsStock) return 'exceeds_stock';
        if (productData.availableQuantity < 5) return 'low_stock';
        return 'available';
    }, [productData.isActive, productData.availableQuantity, isExceedsStock]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π Redux dispatch)
    const handleAddToCart = useCallback(async (qty = 1) => {
        if (!productId || !productData.isActive) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
            return;
        }

        try {
            await addToCart(qty);
            console.log(`–¢–æ–≤–∞—Ä ${productData.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            throw error;
        }
    }, [productId, productData.isActive, productData.name, addToCart]);

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ
    const getWarehouseInfo = useCallback((warehouseId) => {
        if (!useWarehouseStock) return null;
        
        const stock = getWarehouseStock(warehouseId);
        const warehouse = warehousesWithStock?.find(w => w.id === parseInt(warehouseId, 10));
        
        return {
            warehouse,
            stock,
            hasStock: hasStockInWarehouse(warehouseId),
            availableQuantity: stock ? Math.max(0, (stock.quantity || 0) - (stock.reserved || 0)) : 0
        };
    }, [useWarehouseStock, getWarehouseStock, warehousesWithStock, hasStockInWarehouse]);

    return {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API)
        productId,
        productData,
        handleAddToCart, // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥

        // –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        isInCart,
        quantity,
        cartItem,

        // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        isAdding,
        isUpdating,
        isRemoving,
        isLoading: cartLoading || stockLoading,

        // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        isAvailable,
        isExceedsStock,
        status,

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        addToCart,
        updateQuantity,
        removeFromCart,
        incrementQuantity,
        decrementQuantity,

        // –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ (–Ω–æ–≤–æ–µ)
        warehouseData: useWarehouseStock ? {
            totalStock,
            availableStock,
            warehousesWithStock,
            nearestWarehouses,
            stockStats,
            hasStock,
            isLowStock,
            getWarehouseInfo,
            
            // –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–ª–∞–¥–æ–≤
            hasStockInWarehouse,
            getWarehouseStock,
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–æ–≤
            stockLoading,
            stockError
        } : null
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function getProductImage(product) {
    try {
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formatImageUrl = (imagePath) => {
            if (!imagePath) return null;

            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
                return imagePath;
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
            return `${getImageBaseUrl()}${imagePath}`;
        };

        // –í–∞—Ä–∏–∞–Ω—Ç 1: product.images (–º–∞—Å—Å–∏–≤)
        if (product?.images && Array.isArray(product.images) && product.images.length > 0) {
            const firstImage = product.images[0];

            if (typeof firstImage === 'string') {
                const fullUrl = formatImageUrl(firstImage);
                return fullUrl ? { uri: fullUrl } : null;
            } else if (firstImage && typeof firstImage === 'object') {
                const imageUrl = firstImage.url || firstImage.uri || firstImage.path || firstImage.src;
                if (imageUrl) {
                    const fullUrl = formatImageUrl(imageUrl);
                    return fullUrl ? { uri: fullUrl } : null;
                }
            }
        }

        // –í–∞—Ä–∏–∞–Ω—Ç 2: product.image (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
        if (product?.image) {
            if (typeof product.image === 'string') {
                const fullUrl = formatImageUrl(product.image);
                return fullUrl ? { uri: fullUrl } : null;
            } else if (typeof product.image === 'object' && product.image.uri) {
                const fullUrl = formatImageUrl(product.image.uri);
                return fullUrl ? { uri: fullUrl } : product.image;
            } else if (typeof product.image === 'object') {
                const imageUrl = product.image.url || product.image.uri || product.image.path || product.image.src;
                if (imageUrl) {
                    const fullUrl = formatImageUrl(imageUrl);
                    return fullUrl ? { uri: fullUrl } : null;
                }
            }
        }

        // –í–∞—Ä–∏–∞–Ω—Ç 3: product.product.images (–≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        if (product?.product?.images && Array.isArray(product.product.images) && product.product.images.length > 0) {
            const firstImage = product.product.images[0];

            if (typeof firstImage === 'string') {
                const fullUrl = formatImageUrl(firstImage);
                return fullUrl ? { uri: fullUrl } : null;
            } else if (firstImage && typeof firstImage === 'object') {
                const imageUrl = firstImage.url || firstImage.uri || firstImage.path || firstImage.src;
                if (imageUrl) {
                    const fullUrl = formatImageUrl(imageUrl);
                    return fullUrl ? { uri: fullUrl } : null;
                }
            }
        }

        // –í–∞—Ä–∏–∞–Ω—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
        const possibleImageFields = [
            'imageUrl', 'img', 'picture', 'photo', 'thumbnail', 'cover'
        ];

        for (const field of possibleImageFields) {
            if (product?.[field]) {
                if (typeof product[field] === 'string') {
                    const fullUrl = formatImageUrl(product[field]);
                    return fullUrl ? { uri: fullUrl } : null;
                }
            }
        }

        return DEFAULT_PRODUCT_IMAGE;
    } catch (e) {
        console.error('getProductImage - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', e);
        return DEFAULT_PRODUCT_IMAGE;
    }
}

export default useProductCardWithStock; 