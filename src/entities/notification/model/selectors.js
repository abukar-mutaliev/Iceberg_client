import { createSelector } from '@reduxjs/toolkit';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
const EMPTY_ARRAY = [];

// –ë–∞–∑–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
export const selectNotifications = (state) => {
    const notifications = state.notification?.notifications || EMPTY_ARRAY;

    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
    if (__DEV__) {
        console.log('üîç selectNotifications debug:', {
            stateNotification: state.notification,
            notifications: notifications,
            length: notifications.length,
            type: typeof notifications,
            isArray: Array.isArray(notifications),
            // –ù–û–í–û–ï: –û—Ç–ª–∞–¥–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            withStopId: notifications.filter(n => n.stopId).length,
            withOrderId: notifications.filter(n => n.orderId).length,
            withProductId: notifications.filter(n => n.productId).length,
            withData: notifications.filter(n => n.data).length
        });
    }

    return notifications;
};

export const selectNotificationLoading = (state) => state.notification?.loading || false;
export const selectNotificationError = (state) => state.notification?.error || null;
export const selectUnreadCount = (state) => state.notification?.unreadCount || 0;
export const selectHasNextPage = (state) => state.notification?.hasNextPage || false;
export const selectCurrentPage = (state) => state.notification?.currentPage || 1;

// –ù–û–í–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
export const selectBulkOperationLoading = (state) => state.notification?.bulkOperationLoading || false;
export const selectCreateNotificationLoading = (state) => state.notification?.createNotificationLoading || false;

// –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
export const selectUnreadNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => !notification.isRead);
    }
);

export const selectReadNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => notification.isRead);
    }
);

export const selectNotificationsByType = createSelector(
    [selectNotifications, (_, type) => type],
    (notifications, type) => {
        if (!type) return notifications;
        return notifications.filter(notification => notification.type === type);
    }
);

export const selectSystemNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => notification.type === 'SYSTEM');
    }
);

export const selectOrderNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => notification.type === 'ORDER_STATUS');
    }
);

export const selectPromotionNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => notification.type === 'PROMOTION');
    }
);

export const selectSecurityNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => notification.type === 'SECURITY_ALERT');
    }
);

// –ù–û–í–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export const selectNotificationsWithNavigation = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification =>
            notification.stopId || notification.orderId || notification.productId || notification.data
        );
    }
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö (—Å stopId)
 */
export const selectStopNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification =>
            notification.stopId ||
            (notification.type === 'SYSTEM' &&
                (notification.title.toLowerCase().includes('–æ—Å—Ç–∞–Ω–æ–≤–∫–∞') ||
                    notification.content.toLowerCase().includes('–æ—Å—Ç–∞–Ω–æ–≤–∫–∞')))
        );
    }
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
 */
export const selectNotificationsByStopId = createSelector(
    [selectNotifications, (_, stopId) => stopId],
    (notifications, stopId) => {
        if (!stopId) return EMPTY_ARRAY;
        const targetStopId = parseInt(stopId);

        return notifications.filter(notification =>
            notification.stopId === targetStopId ||
            (notification.data && parseInt(notification.data.stopId) === targetStopId)
        );
    }
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö (—Å orderId)
 */
export const selectOrderNotificationsWithId = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification =>
            notification.orderId ||
            (notification.type === 'ORDER_STATUS')
        );
    }
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
 */
export const selectNotificationsByOrderId = createSelector(
    [selectNotifications, (_, orderId) => orderId],
    (notifications, orderId) => {
        if (!orderId) return EMPTY_ARRAY;
        const targetOrderId = parseInt(orderId);

        return notifications.filter(notification =>
            notification.orderId === targetOrderId ||
            (notification.data && parseInt(notification.data.orderId) === targetOrderId)
        );
    }
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö (—Å productId)
 */
export const selectProductNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification =>
            notification.productId ||
            (notification.type === 'PROMOTION')
        );
    }
);

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
 */
export const selectNotificationsByProductId = createSelector(
    [selectNotifications, (_, productId) => productId],
    (notifications, productId) => {
        if (!productId) return EMPTY_ARRAY;
        const targetProductId = parseInt(productId);

        return notifications.filter(notification =>
            notification.productId === targetProductId ||
            (notification.data && parseInt(notification.data.productId) === targetProductId)
        );
    }
);

export const selectRecentNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        const oneDayAgo = new Date();
        oneDayAgo.setDate(oneDayAgo.getDate() - 1);

        return notifications.filter(notification =>
            new Date(notification.createdAt) > oneDayAgo
        );
    }
);

export const selectNotificationById = createSelector(
    [selectNotifications, (_, notificationId) => notificationId],
    (notifications, notificationId) => {
        return notifications.find(notification => notification.id === parseInt(notificationId));
    }
);

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
export const selectNotificationsByDay = createSelector(
    [selectNotifications],
    (notifications) => {
        const groupedByDay = {};

        notifications.forEach(notification => {
            const date = new Date(notification.createdAt);
            const dayKey = date.toDateString();

            if (!groupedByDay[dayKey]) {
                groupedByDay[dayKey] = [];
            }

            groupedByDay[dayKey].push(notification);
        });

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        return Object.entries(groupedByDay)
            .map(([date, notifications]) => ({
                date,
                notifications: notifications.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
            }))
            .sort((a, b) => new Date(b.date) - new Date(a.date));
    }
);

// –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const selectNotificationStats = createSelector(
    [selectNotifications],
    (notifications) => {
        const stats = {
            total: notifications.length,
            unread: 0,
            byType: {
                SYSTEM: 0,
                ORDER_STATUS: 0,
                PROMOTION: 0,
                TASK: 0,
                SUPPLY: 0,
                SECURITY_ALERT: 0
            },
            // –ù–û–í–´–ï —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation: {
                withStopId: 0,
                withOrderId: 0,
                withProductId: 0,
                withData: 0,
                total: 0
            },
            today: 0,
            thisWeek: 0,
            thisMonth: 0
        };

        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const oneWeekAgo = new Date(today);
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        const oneMonthAgo = new Date(today);
        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

        notifications.forEach(notification => {
            // –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            if (!notification.isRead) {
                stats.unread++;
            }

            // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
            if (stats.byType.hasOwnProperty(notification.type)) {
                stats.byType[notification.type]++;
            }

            // –ù–û–í–û–ï: –ü–æ–¥—Å—á–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (notification.stopId) {
                stats.navigation.withStopId++;
            }
            if (notification.orderId) {
                stats.navigation.withOrderId++;
            }
            if (notification.productId) {
                stats.navigation.withProductId++;
            }
            if (notification.data) {
                stats.navigation.withData++;
            }
            if (notification.stopId || notification.orderId || notification.productId || notification.data) {
                stats.navigation.total++;
            }

            // –ü–æ–¥—Å—á–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const notificationDate = new Date(notification.createdAt);

            if (notificationDate >= today) {
                stats.today++;
            }

            if (notificationDate >= oneWeekAgo) {
                stats.thisWeek++;
            }

            if (notificationDate >= oneMonthAgo) {
                stats.thisMonth++;
            }
        });

        return stats;
    }
);

/**
 * –ù–û–í–´–ô: –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
export const selectNavigationAvailability = createSelector(
    [selectNotifications],
    (notifications) => {
        const navStats = {
            canNavigate: 0,
            cannotNavigate: 0,
            total: notifications.length
        };

        notifications.forEach(notification => {
            const hasNavigation = !!(
                notification.stopId ||
                notification.orderId ||
                notification.productId ||
                (notification.data && (notification.data.stopId || notification.data.orderId || notification.data.productId || notification.data.url))
            );

            if (hasNavigation) {
                navStats.canNavigate++;
            } else {
                navStats.cannotNavigate++;
            }
        });

        return navStats;
    }
);

/**
 * –ù–û–í–´–ô: –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export const selectNotificationsBySearch = createSelector(
    [selectNotifications, (_, searchQuery) => searchQuery],
    (notifications, searchQuery) => {
        if (!searchQuery || searchQuery.trim() === '') {
            return notifications;
        }

        const query = searchQuery.toLowerCase().trim();

        return notifications.filter(notification =>
            notification.title.toLowerCase().includes(query) ||
            notification.content.toLowerCase().includes(query) ||
            notification.type.toLowerCase().includes(query) ||
            // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            (notification.stopId && notification.stopId.toString().includes(query)) ||
            (notification.orderId && notification.orderId.toString().includes(query)) ||
            (notification.productId && notification.productId.toString().includes(query)) ||
            // –ü–æ–∏—Å–∫ –≤ data –æ–±—ä–µ–∫—Ç–µ
            (notification.data && JSON.stringify(notification.data).toLowerCase().includes(query))
        );
    }
);

/**
 * –ù–û–í–´–ô: –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
export const selectNavigableNotifications = createSelector(
    [selectNotifications],
    (notifications) => {
        return notifications.filter(notification => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            return !!(
                notification.stopId ||
                notification.orderId ||
                notification.productId ||
                (notification.data && (
                    notification.data.stopId ||
                    notification.data.orderId ||
                    notification.data.productId ||
                    notification.data.url
                ))
            );
        });
    }
);

/**
 * –ù–û–í–´–ô: –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–∏–ø—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
export const selectNotificationsByNavigationType = createSelector(
    [selectNotifications],
    (notifications) => {
        const grouped = {
            stops: [],
            orders: [],
            products: [],
            other: [],
            noNavigation: []
        };

        notifications.forEach(notification => {
            if (notification.stopId || (notification.data && notification.data.stopId)) {
                grouped.stops.push(notification);
            } else if (notification.orderId || (notification.data && notification.data.orderId)) {
                grouped.orders.push(notification);
            } else if (notification.productId || (notification.data && notification.data.productId)) {
                grouped.products.push(notification);
            } else if (notification.data && notification.data.url) {
                grouped.other.push(notification);
            } else {
                grouped.noNavigation.push(notification);
            }
        });

        return grouped;
    }
);

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
export const selectIsNotificationCacheValid = createSelector(
    [(state) => state.notification.lastFetchTime],
    (lastFetchTime) => {
        const CACHE_EXPIRY_TIME = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
        return lastFetchTime && Date.now() - lastFetchTime < CACHE_EXPIRY_TIME;
    }
);

/**
 * –ù–û–í–´–ô: –ú–µ—Ç–∞-—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
export const selectNotificationNavigationMeta = createSelector(
    [selectNotifications],
    (notifications) => {
        const meta = {
            total: notifications.length,
            navigable: 0,
            byType: {
                stop: 0,
                order: 0,
                product: 0,
                url: 0,
                none: 0
            },
            dataQuality: {
                complete: 0,    // –ï—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                partial: 0,     // –ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                minimal: 0,     // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                none: 0         // –ù–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            }
        };

        notifications.forEach(notification => {
            let hasNavigation = false;
            let navigationQuality = 'none';

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (notification.stopId || (notification.data && notification.data.stopId)) {
                meta.byType.stop++;
                hasNavigation = true;
                navigationQuality = notification.data && notification.data.url ? 'complete' : 'partial';
            }

            if (notification.orderId || (notification.data && notification.data.orderId)) {
                meta.byType.order++;
                hasNavigation = true;
                navigationQuality = notification.data && notification.data.url ? 'complete' : 'partial';
            }

            if (notification.productId || (notification.data && notification.data.productId)) {
                meta.byType.product++;
                hasNavigation = true;
                navigationQuality = notification.data && notification.data.url ? 'complete' : 'partial';
            }

            if (notification.data && notification.data.url && !hasNavigation) {
                meta.byType.url++;
                hasNavigation = true;
                navigationQuality = 'minimal';
            }

            if (!hasNavigation) {
                meta.byType.none++;
                navigationQuality = 'none';
            }

            // –ü–æ–¥—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            meta.dataQuality[navigationQuality]++;

            if (hasNavigation) {
                meta.navigable++;
            }
        });

        return meta;
    }
);