import { createProtectedRequest } from '@shared/api/api';

export const pushTokenApi = {
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å push-—Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    savePushToken: async (tokenData) => {
        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push-—Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', {
                tokenPrefix: tokenData.token?.substring(0, 20) + '...',
                deviceId: tokenData.deviceId,
                platform: tokenData.platform
            });

            const response = await createProtectedRequest('post', '/api/push-tokens', tokenData);

            console.log('üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                status: response?.status,
                data: response?.data,
                dataKeys: response?.data ? Object.keys(response.data) : 'no data'
            });

            if (response?.status === 200) {
                console.log('‚úÖ HTTP 200 - Push-—Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                return {
                    status: 'success',
                    data: response.data?.data || response.data || { id: 1, isActive: true },
                    message: response.data?.message || 'Push-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
                };
            }

            if (response?.data) {
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º');
                return {
                    status: 'success',
                    data: response.data.data || response.data || { id: 1, isActive: true },
                    message: response.data.message || 'Push-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
                };
            }

            console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', response);
            throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è push-—Ç–æ–∫–µ–Ω–∞:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    },

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å push-—Ç–æ–∫–µ–Ω
     */
    deactivatePushToken: async (deactivateData) => {
        try {
            console.log('üîí –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è push-—Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            const response = await createProtectedRequest('put', '/api/push-tokens/deactivate', deactivateData);

            if (response?.status >= 200 && response?.status < 300) {
                console.log('‚úÖ Push-—Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                return {
                    status: 'success',
                    data: response.data?.data || { deactivatedCount: 1 },
                    message: response.data?.message || 'Push-—Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
                };
            }

            throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ push-—Ç–æ–∫–µ–Ω–∞:', error);
            throw error;
        }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ push-—Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserPushTokens: async () => {
        try {
            console.log('üìã –ó–∞–ø—Ä–æ—Å push-—Ç–æ–∫–µ–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            const response = await createProtectedRequest('get', '/api/push-tokens');

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', {
                status: response?.status,
                data: response?.data,
                dataKeys: response?.data ? Object.keys(response.data) : 'no data'
            });

            if (response?.status >= 200 && response?.status < 300) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                const tokens = response.data?.data || response.data || [];
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', {
                    count: Array.isArray(tokens) ? tokens.length : '–Ω–µ –º–∞—Å—Å–∏–≤',
                    tokens: Array.isArray(tokens) ? tokens.map(t => t.token?.substring(0, 20) + '...') : '–Ω–µ –º–∞—Å—Å–∏–≤'
                });
                
                return {
                    status: 'success',
                    data: tokens,
                    message: response.data?.message || '–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
                };
            }

            console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response?.status);
            throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç–∞—Ç—É—Å: ${response?.status})`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è push-—Ç–æ–∫–µ–Ω–æ–≤:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª–∏–∞—Å –¥–ª—è getUserPushTokens)
     */
    getUserTokens: async () => {
        try {
            console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞');
            const response = await createProtectedRequest('get', '/api/push-tokens');

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', {
                status: response?.status,
                data: response?.data,
                dataKeys: response?.data ? Object.keys(response.data) : 'no data'
            });

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if (response?.status >= 200 && response?.status < 300) {
                const tokens = response.data?.data || response.data || [];
                console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', Array.isArray(tokens) ? tokens.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
                return {
                    status: 'success',
                    data: Array.isArray(tokens) ? tokens : [],
                    message: response.data?.message || '–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã'
                };
            }

            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 2xx, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            if (response?.data) {
                console.log('‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ');
                const tokens = response.data?.data || response.data || [];
                return {
                    status: 'success',
                    data: Array.isArray(tokens) ? tokens : [],
                    message: response.data?.message || '–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã'
                };
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ response undefined –∏–ª–∏ –ø—É—Å—Ç–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if (!response || !response.data) {
                console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–∫–µ–Ω–æ–≤');
                return {
                    status: 'success',
                    data: [],
                    message: '–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)'
                };
            }

            throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            return {
                status: 'success',
                data: [],
                message: '–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)'
            };
        }
    },

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    sendTestNotification: async (testData = {}) => {
        try {
            console.log('üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä');

            const response = await createProtectedRequest('post', '/api/push-tokens/test', testData);

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
                status: response?.status,
                data: response?.data,
                dataKeys: response?.data ? Object.keys(response.data) : 'no data'
            });

            if (response?.data) {
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

                const responseData = response.data;

                return {
                    status: 'success',
                    data: {
                        sentCount: responseData.sentCount || 1,
                        totalTokens: responseData.totalTokens || 1,
                        results: responseData.results || []
                    },
                    message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (mock —Ä–µ–∂–∏–º - —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)'
                };
            }

            throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });
            throw error;
        }
    }
};

export default pushTokenApi;