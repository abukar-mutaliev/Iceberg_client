import { useRef } from 'react';

// Simple throttle helper
const throttle = (fn, wait) => {
  let inFlight = false;
  let lastArgs = null;
  return (...args) => {
    lastArgs = args;
    if (inFlight) return;
    inFlight = true;
    fn(...lastArgs);
    setTimeout(() => { inFlight = false; }, wait);
  };
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ socket –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
let globalSocketRef = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ socket
export const setGlobalSocket = (socket) => {
  globalSocketRef = socket;
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π WebSocket –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const useChatSocketActions = () => {
  // API for emitting typing with throttle 500ms
  const emitTyping = useRef(throttle((roomId, isTyping) => {
    const socket = globalSocketRef;
    if (!socket || !socket.connected) return;
    socket.emit('chat:typing', { roomId, isTyping });
  }, 500)).current;

  // API for marking messages as read via socket
  const emitMarkRead = useRef((roomId, messageIds = []) => {
    const socket = globalSocketRef;
    if (!socket || !socket.connected || !roomId || messageIds.length === 0) return;
    
    console.log(`üìñ Emitting mark-read for room ${roomId}, messages:`, messageIds);
    socket.emit('chat:mark-read', { roomId, messageIds }, (response) => {
      if (response?.ok) {
        console.log(`‚úÖ Mark-read successful for room ${roomId}`);
      } else {
        console.error(`‚ùå Mark-read failed for room ${roomId}:`, response?.error);
      }
    });
  }).current;

  // API for setting active room (for push notification filtering)
  const emitActiveRoom = useRef((roomId) => {
    const socket = globalSocketRef;
    if (!socket || !socket.connected) return;
    

    socket.emit('chat:room:active', { roomId }, (response) => {
      if (response?.ok) {
        // Success
      } else {
        console.error(`‚ùå Failed to set active room:`, response?.error);
      }
    });
  }).current;

  return {
    emitTyping,
    emitMarkRead,
    emitActiveRoom,
  };
};


