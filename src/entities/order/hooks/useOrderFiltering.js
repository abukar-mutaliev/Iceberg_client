import { useMemo } from 'react';

export const useOrderFiltering = (staffOrders, filters, canViewAllOrders, actualProcessingRole, relevantStatuses, historyStatuses, showHistory) => {
    return useMemo(() => {
        // –ó–∞—â–∏—â–∞–µ–º –æ—Ç undefined –∑–Ω–∞—á–µ–Ω–∏–π
        if (!Array.isArray(staffOrders)) {
            console.log('‚ùå useOrderFiltering: staffOrders –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º', { staffOrders, type: typeof staffOrders });
            return [];
        }

        console.log('üîç useOrderFiltering: –Ω–∞—á–∞–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', {
            staffOrdersLength: staffOrders.length,
            canViewAllOrders,
            actualProcessingRole,
            showHistory,
            relevantStatuses,
            historyStatuses,
            filters
        });

        let filtered = [...staffOrders];

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º
        if (!canViewAllOrders && actualProcessingRole) {
            const targetStatuses = showHistory ? historyStatuses : relevantStatuses;
            console.log('üéØ useOrderFiltering: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º', {
                showHistory,
                targetStatuses,
                relevantStatusesLength: relevantStatuses.length,
                historyStatusesLength: historyStatuses.length,
                actualProcessingRole
            });

            if (targetStatuses && targetStatuses.length > 0) {
                filtered = filtered.filter(order => {
                    const includes = targetStatuses.includes(order.status);
                    if (!includes) {
                        console.log('‚ùå useOrderFiltering: –∑–∞–∫–∞–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω', {
                            orderId: order.id,
                            orderStatus: order.status,
                            targetStatuses
                        });
                    }
                    return includes;
                });
            } else {
                console.log('‚ö†Ô∏è useOrderFiltering: targetStatuses –ø—É—Å—Ç–æ–π –∏–ª–∏ undefined', {
                    targetStatuses,
                    showHistory,
                    relevantStatuses,
                    historyStatuses
                });

                // –ï—Å–ª–∏ targetStatuses –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if (!showHistory) {
                    // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É
                    switch (actualProcessingRole) {
                        case 'PICKER':
                            filtered = filtered.filter(order => order.status === 'PENDING');
                            break;
                        case 'PACKER':
                            // –≠—Ç–∞–ø —É–ø–∞–∫–æ–≤–∫–∏ —É–±—Ä–∞–Ω - PACKER –±–æ–ª—å—à–µ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã
                            // –°–±–æ—Ä—â–∏–∫ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞–º
                            filtered = [];
                            break;
                        case 'COURIER':
                            filtered = filtered.filter(order => order.status === 'IN_DELIVERY');
                            break;
                        default:
                            // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫—Ä–æ–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
                            filtered = filtered.filter(order =>
                                !['DELIVERED', 'CANCELLED', 'RETURNED'].includes(order.status)
                            );
                    }
                } else {
                    // –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    if (historyStatuses && historyStatuses.length > 0) {
                        filtered = filtered.filter(order => historyStatuses.includes(order.status));
                    } else {
                        // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                        filtered = filtered.filter(order =>
                            ['DELIVERED', 'CANCELLED', 'RETURNED'].includes(order.status)
                        );
                    }
                }
                console.log('‚úÖ useOrderFiltering: –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ fallback —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è', {
                    actualProcessingRole,
                    showHistory,
                    filteredLength: filtered.length
                });
            }
        } else {
            console.log('üîÑ useOrderFiltering: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–æ–ª—è–º', {
                canViewAllOrders,
                actualProcessingRole,
                relevantStatusesType: typeof relevantStatuses,
                historyStatusesType: typeof historyStatuses
            });
        }

        // –ü–æ–∏—Å–∫
        if (filters?.search && typeof filters.search === 'string') {
            const searchLower = filters.search.toLowerCase();
            filtered = filtered.filter(order =>
                order?.orderNumber?.toLowerCase().includes(searchLower) ||
                order?.client?.name?.toLowerCase().includes(searchLower) ||
                order?.client?.phone?.toLowerCase().includes(searchLower) ||
                order?.deliveryAddress?.toLowerCase().includes(searchLower) ||
                order?.comment?.toLowerCase().includes(searchLower) ||
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
                order?.orderItems?.some(item =>
                    item?.product?.name?.toLowerCase().includes(searchLower)
                )
            );
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (filters?.status && filters.status !== 'all') {
            filtered = filtered.filter(order => order?.status === filters.status);
        }

        if (filters?.priority && filters.priority !== 'all') {
            filtered = filtered.filter(order => order?.priority === filters.priority);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        if (filters?.dateFrom || filters?.dateTo) {
            try {
                let startDate = null;
                let endDate = null;

                if (filters.dateFrom) {
                    startDate = new Date(filters.dateFrom);
                    startDate.setHours(0, 0, 0, 0);
                }

                if (filters.dateTo) {
                    endDate = new Date(filters.dateTo);
                    endDate.setHours(23, 59, 59, 999);
                }

                console.log('üìÖ useOrderFiltering: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç', {
                    dateFrom: filters.dateFrom,
                    dateTo: filters.dateTo,
                    startDate: startDate?.toISOString(),
                    endDate: endDate?.toISOString(),
                    ordersBeforeFiltering: filtered.length
                });

                filtered = filtered.filter(order => {
                    if (!order?.createdAt) return false;
                    const orderDate = new Date(order.createdAt);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                    if (startDate && orderDate < startDate) return false;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                    if (endDate && orderDate > endDate) return false;

                    return true;
                });

                console.log('üìÖ useOrderFiltering: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ', {
                    ordersAfterFiltering: filtered.length,
                    showHistory
                });
            } catch (error) {
                console.warn('Error filtering by date range:', error);
            }
        }

        console.log('‚úÖ useOrderFiltering: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏', {
            originalLength: staffOrders.length,
            filteredLength: filtered.length,
            showHistory
        });

        return filtered;
    }, [staffOrders, filters, canViewAllOrders, actualProcessingRole, relevantStatuses, historyStatuses, showHistory]);
};
