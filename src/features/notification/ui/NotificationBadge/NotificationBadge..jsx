import React, { useEffect, useRef } from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { Color, FontFamily, FontSize } from '@app/styles/GlobalStyles';
import {
    selectUnreadCount,
    fetchUnreadCount,
    fetchNotifications
} from '@entities/notification';
import { useAuth } from '@entities/auth/hooks/useAuth';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
let globalRefreshInterval = null;
let isGlobalRefreshActive = false;

export const NotificationBadge = ({
                                      onPress,
                                      iconComponent: IconComponent,
                                      showZero = false,
                                      maxCount = 99,
                                      style = {},
                                      badgeStyle = {},
                                      textStyle = {}
                                  }) => {
    const dispatch = useDispatch();
    const unreadCount = useSelector(selectUnreadCount);
    const isMounted = useRef(true);
    const { currentUser: user } = useAuth();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isNotificationsAvailable = user?.role === 'CLIENT';

    useEffect(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (isMounted.current && isNotificationsAvailable) {
            dispatch(fetchUnreadCount());
            dispatch(fetchNotifications({ page: 1, limit: 20 }));
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
        if (!isGlobalRefreshActive && isNotificationsAvailable) {
            isGlobalRefreshActive = true;

            globalRefreshInterval = setInterval(() => {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫, –Ω–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                dispatch(fetchUnreadCount());
            }, 60000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 1 –º–∏–Ω—É—Ç—ã
        }

        return () => {
            isMounted.current = false;
        };
    }, [dispatch, isNotificationsAvailable]);

    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        return () => {
            if (globalRefreshInterval && !isMounted.current) {
                clearInterval(globalRefreshInterval);
                globalRefreshInterval = null;
                isGlobalRefreshActive = false;
            }
        };
    }, []);

    const forceShowInDev = __DEV__ && unreadCount > 0;
    const shouldShowBadge = (unreadCount > 0 || showZero) || forceShowInDev;
    const displayCount = unreadCount > maxCount ? `${maxCount}+` : unreadCount.toString();

    return (
        <TouchableOpacity
            style={[styles.container, style]}
            onPress={() => {
                onPress && onPress();
            }}
            activeOpacity={0.7}
        >
            {IconComponent && <IconComponent />}

            {shouldShowBadge && (
                <View style={[styles.badge, badgeStyle]}>
                    <Text style={[styles.badgeText, textStyle]}>
                        {displayCount}
                    </Text>
                </View>
            )}
        </TouchableOpacity>
    );
};

export const BellIcon = ({ size = 24, color = Color.dark }) => (
    <View style={[styles.bellIcon, { width: size, height: size }]}>
        <Text style={[styles.bellText, { fontSize: size * 0.75, color }]}>
            üîî
        </Text>
    </View>
);

export const HeaderNotificationBadge = ({ navigation }) => {
    const { currentUser: user } = useAuth();
    const isNotificationsAvailable = user?.role === 'CLIENT';

    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤
    if (!isNotificationsAvailable) {
        return null;
    }

    return (
        <NotificationBadge
            onPress={() => {
                navigation.navigate('NotificationsScreen');
            }}
            iconComponent={() => <BellIcon size={24} color={Color.dark} />}
            style={styles.headerBadge}
        />
    );
};

const styles = StyleSheet.create({
    container: {
        position: 'relative',
        padding: 8,
        justifyContent: 'center',
        alignItems: 'center',
        minWidth: 40,
        minHeight: 40,
    },
    badge: {
        position: 'absolute',
        top: 2,
        right: 2,
        backgroundColor: '#ff4444',
        borderRadius: 12,
        minWidth: 24,
        height: 24,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 6,
        borderWidth: 2,
        borderColor: Color.colorLightMode || '#fff',
        elevation: 5,
        shadowColor: '#000',
        shadowOffset: {
            width: 0,
            height: 3,
        },
        shadowOpacity: 0.35,
        shadowRadius: 4.84,
        zIndex: 1000,
    },
    badgeText: {
        color: Color.colorLightMode || '#fff',
        fontSize: FontSize.size_xs || 12,
        fontFamily: FontFamily.sFProText || 'System',
        fontWeight: '600',
        textAlign: 'center',
        lineHeight: 16,
    },
    bellIcon: {
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.05)',
        borderRadius: 12,
    },
    bellText: {
        textAlign: 'center',
    },
    headerBadge: {
        padding: 8,
        borderRadius: 20,
        backgroundColor: 'rgba(255,255,255,0.1)',
    },
});

export default NotificationBadge;