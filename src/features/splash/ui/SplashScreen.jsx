import React, { useEffect, useState } from 'react';
import { useNavigation } from '@react-navigation/native';
import { Animated, View, Dimensions, Platform, Image } from 'react-native';
import Text from '@shared/ui/Text/Text';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
const getSafeFont = () => {
    if (__DEV__) {
        // –í development —Ä–µ–∂–∏–º–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        return 'BezierSans';
    } else {
        // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        return Platform.select({
            ios: 'System',
            android: 'Roboto',
            default: 'System'
        });
    }
};

export const SplashScreen = () => {
    const navigation = useNavigation();

    const [logoScale] = useState(new Animated.Value(1));
    const [logoPosition] = useState(new Animated.Value(100));
    const [textOpacity] = useState(new Animated.Value(0));
    const [textPosition] = useState(new Animated.Value(50));

    const { height } = Dimensions.get('window');

    const RenderLogo = () => {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π PNG –ª–æ–≥–æ—Ç–∏–ø
            return (
                <Image
                    source={require('@assets/logo/logo.png')}
                    style={{
                        width: 296,
                        height: 252,
                        resizeMode: 'contain',
                    }}
                />
            );
        } catch (error) {
            console.error('Error loading PNG logo:', error);
            // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–æ—Ç–∏–ø
            return (
                <View style={{ 
                    width: 296, 
                    height: 252, 
                    backgroundColor: '#3339B0',
                    borderRadius: 20,
                    justifyContent: 'center',
                    alignItems: 'center',
                    shadowColor: '#3339B0',
                    shadowOffset: { width: 0, height: 8 },
                    shadowOpacity: 0.3,
                    shadowRadius: 16,
                    elevation: 8,
                }}>
                    <Text style={{ fontSize: 48, color: '#fff' }}>üç¶</Text>
                </View>
            );
        }
    };

    useEffect(() => {
        Animated.sequence([
            Animated.delay(1000),

            Animated.timing(logoPosition, {
                toValue: -height * 0.90, // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–≤–µ—Ä—Ö, –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 1/4 –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
                duration: 1500,
                useNativeDriver: true,
            }),
        ]).start();

        // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞)
        Animated.timing(logoScale, {
            toValue: 0.3, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –≤–≤–µ—Ä—Ö
            duration: 1500,
            delay: 1000, // –ù–∞—á–∏–Ω–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º –≤–≤–µ—Ä—Ö
            useNativeDriver: true,
        }).start();

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        Animated.sequence([
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (—á—Ç–æ–±—ã –ª–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è)
            Animated.delay(1500),

            // –ü–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            Animated.parallel([
                Animated.timing(textOpacity, {
                    toValue: 1,
                    duration: 800,
                    useNativeDriver: true,
                }),
                Animated.timing(textPosition, {
                    toValue: -height * 0.2,
                    duration: 800,
                    useNativeDriver: true,
                }),
            ]),

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
            Animated.delay(2000),

            // –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            Animated.timing(textOpacity, {
                toValue: 0,
                duration: 800,
                useNativeDriver: true,
            }),
        ]).start();

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ Welcome —ç–∫—Ä–∞–Ω
        const timer = setTimeout(() => {
            navigation.replace('Welcome');
        }, 3000); // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –¥–æ 3 —Å–µ–∫—É–Ω–¥

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => clearTimeout(timer);
    }, [navigation, logoScale, logoPosition, textOpacity, textPosition, height]);

    return (
        <View
            style={{
                flex: 1,
                backgroundColor: 'white',
                justifyContent: 'center',
                alignItems: 'center',
            }}
        >
            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø */}
            <Animated.View
                style={{
                    transform: [
                        { scale: logoScale },
                        { translateY: logoPosition },
                    ],
                }}
            >
                <RenderLogo />
            </Animated.View>

            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç */}
            <Animated.Text
                style={{
                    opacity: textOpacity,
                    transform: [{ translateY: textPosition }],
                    fontSize: 26,
                    fontWeight: '600',
                    color: '#3339B0',
                    textAlign: 'center',
                    fontFamily: getSafeFont(),
                    marginTop: 100, // –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º
                    letterSpacing: 0.5,
                    lineHeight: 34,
                    shadowColor: '#3339B0',
                    shadowOffset: { width: 0, height: 2 },
                    shadowOpacity: 0.1,
                    shadowRadius: 4,
                    elevation: 2,
                }}
            >
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{'\n'}–≤ –ê–π—Å–±–µ—Ä–≥
            </Animated.Text>
        </View>
    );
};