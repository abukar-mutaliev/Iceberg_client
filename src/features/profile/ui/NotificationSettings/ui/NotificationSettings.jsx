import React, { useState, useEffect, useCallback } from 'react';
import {View, Text, StyleSheet, TouchableOpacity, ScrollView, Alert} from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigation } from '@react-navigation/native';
import {
    selectNotificationSettings,
    selectNotificationLoading,
    selectNotificationError,
    fetchNotificationSettings,
    updateNotificationSettings,
    resetNotificationSettings,
    updateSettingLocally,
    clearError
} from '@entities/notification/model/slice';
import { NotificationSettingItem } from './NotificationSettingItem';
import { normalize, normalizeFont } from '@shared/lib/normalize';
import { FontFamily, Border, Color } from '@app/styles/GlobalStyles';
import ArrowBackIcon from '@shared/ui/Icon/Common/ArrowBackIcon';
import { useToast } from '@shared/ui/Toast';

export const NotificationSettings = () => {
    const navigation = useNavigation();
    const dispatch = useDispatch();
    const { showSuccess, showError } = useToast();

    const settings = useSelector(selectNotificationSettings);
    const isLoading = useSelector(selectNotificationLoading);
    const error = useSelector(selectNotificationError);

    const [localSettings, setLocalSettings] = useState({});
    const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
    const [isInitialized, setIsInitialized] = useState(false);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (fetchNotificationSettings) {
            dispatch(fetchNotificationSettings());
        } else {
            console.warn('‚ö†Ô∏è fetchNotificationSettings is not available yet');
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 500ms
            const retryTimer = setTimeout(() => {
                if (fetchNotificationSettings) {
                    console.log('üîÑ Retrying fetchNotificationSettings');
                    dispatch(fetchNotificationSettings());
                }
            }, 500);
            return () => clearTimeout(retryTimer);
        }
    }, [dispatch]);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        if (Object.keys(settings).length > 0 && !isInitialized) {
            console.log('üîÑ NotificationSettings: Initializing local settings from Redux', settings);
            setLocalSettings(settings);
            setHasUnsavedChanges(false);
            setIsInitialized(true);
        }
    }, [settings, isInitialized]);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è localSettings
    useEffect(() => {
        console.log('üìä NotificationSettings: localSettings changed', {
            localSettings,
            localSettingsKeys: Object.keys(localSettings),
            localSettingsLength: Object.keys(localSettings).length
        });
    }, [localSettings]);

    // –≠—Ç–æ—Ç useEffect –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasUnsavedChanges –Ω–∞–ø—Ä—è–º—É—é –≤ handleSettingChange

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–∞
    useEffect(() => {
        if (!isLoading && !error && Object.keys(settings).length > 0 && Object.keys(localSettings).length === 0) {
            console.log('üîÑ NotificationSettings: Initial sync after load', { settings });
            setLocalSettings(settings);
        }
    }, [settings, isLoading, error, localSettings]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const handleSettingChange = useCallback((key, value) => {
        const newLocalSettings = {
            ...localSettings,
            [key]: value
        };

        setLocalSettings(newLocalSettings);
        dispatch(updateSettingLocally({ key, value }));
        setHasUnsavedChanges(true);
    }, [localSettings, dispatch]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const handleSave = async () => {
        console.log('üíæ NotificationSettings: handleSave called', {
            localSettings,
            settings,
            hasUnsavedChanges
        });

        try {
            if (updateNotificationSettings) {
                await dispatch(updateNotificationSettings(localSettings)).unwrap();
            } else {
                throw new Error('updateNotificationSettings function not available');
            }
            console.log('‚úÖ NotificationSettings: Settings saved successfully');

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            console.log('üîÑ NotificationSettings: Syncing local settings after save');
            setHasUnsavedChanges(false);

            showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå NotificationSettings: Save failed', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        }
    };

    // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    const handleReset = () => {
        Alert.alert(
            '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
            [
                { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                {
                    text: '–°–±—Ä–æ—Å–∏—Ç—å',
                    style: 'destructive',
                    onPress: async () => {
                        try {
                            if (resetNotificationSettings) {
                                await dispatch(resetNotificationSettings()).unwrap();
                            } else {
                                throw new Error('resetNotificationSettings function not available');
                            }
                            showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                        } catch (error) {
                            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                        }
                    }
                }
            ]
        );
    };

    const handleGoBack = () => {
        if (hasUnsavedChanges) {
            Alert.alert(
                '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?',
                [
                    { text: '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å', style: 'destructive', onPress: () => navigation.goBack() },
                    { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                    { text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', onPress: handleSave }
                ]
            );
        } else {
            navigation.goBack();
        }
    };

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            dispatch(clearError());
        };
    }, [dispatch]);

    const settingItems = [
        {
            key: 'chatMessages',
            title: '–°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ',
            description: '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–µ'
        },
        {
            key: 'orderUpdates',
            title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤',
            description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö'
        },
        {
            key: 'stopNotifications',
            title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö',
            description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö'
        },
        {
            key: 'promotions',
            title: '–ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏',
            description: '–ù–æ–≤–æ—Å—Ç–∏, —Å–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
        },
        {
            key: 'systemAlerts',
            title: '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            description: '–í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
        }
    ];

    return (
        <View style={styles.container}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <View style={styles.header}>
                <TouchableOpacity
                    style={styles.backButton}
                    onPress={handleGoBack}
                >
                    <ArrowBackIcon width={24} height={24} color="rgba(0, 12, 255, 1)" />
                </TouchableOpacity>
                <Text style={styles.title}>–¶–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Text>
            </View>

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
            <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <View style={styles.descriptionContainer}>
                    <Text style={styles.description}>
                        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π.
                        –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
                    </Text>
                </View>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <View style={styles.settingsContainer}>
                    {settingItems.map((item) => (
                        <NotificationSettingItem
                            key={item.key}
                            title={item.title}
                            description={item.description}
                            value={localSettings[item.key]}
                            onValueChange={(value) => handleSettingChange(item.key, value)}
                            disabled={isLoading}
                        />
                    ))}
                </View>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <View style={styles.actionsContainer}>
                    <TouchableOpacity
                        style={[styles.button, styles.saveButton, (!hasUnsavedChanges || isLoading) && styles.disabledButton]}
                        onPress={handleSave}
                        disabled={!hasUnsavedChanges || isLoading}
                    >
                        <Text style={[styles.buttonText, styles.saveButtonText]}>
                            {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                        </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                        style={[styles.button, styles.resetButton]}
                        onPress={handleReset}
                        disabled={isLoading}
                    >
                        <Text style={[styles.buttonText, styles.resetButtonText]}>
                            –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
                        </Text>
                    </TouchableOpacity>
                </View>

                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
                {error && (
                    <View style={styles.errorContainer}>
                        <Text style={styles.errorText}>{error}</Text>
                    </View>
                )}
            </ScrollView>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    header: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: normalize(16),
        paddingHorizontal: normalize(16),
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
    },
    backButton: {
        padding: normalize(8),
    },
    title: {
        fontSize: normalizeFont(18),
        fontWeight: '500',
        fontFamily: FontFamily.sFProText,
        marginLeft: normalize(24),
        color: Color.dark,
    },
    content: {
        flex: 1,
        paddingHorizontal: normalize(16),
    },
    descriptionContainer: {
        paddingVertical: normalize(16),
        paddingBottom: normalize(24),
    },
    description: {
        fontSize: normalizeFont(14),
        color: '#666',
        lineHeight: normalize(20),
        textAlign: 'center',
    },
    settingsContainer: {
        marginBottom: normalize(32),
    },
    actionsContainer: {
        gap: normalize(12),
        marginBottom: normalize(32),
    },
    button: {
        paddingVertical: normalize(16),
        paddingHorizontal: normalize(24),
        borderRadius: Border.br_3xs,
        alignItems: 'center',
    },
    saveButton: {
        backgroundColor: Color.blue2,
    },
    resetButton: {
        backgroundColor: 'transparent',
        borderWidth: 1,
        borderColor: Color.red,
    },
    disabledButton: {
        opacity: 0.5,
    },
    buttonText: {
        fontSize: normalizeFont(16),
        fontWeight: '500',
    },
    saveButtonText: {
        color: '#fff',
    },
    resetButtonText: {
        color: Color.red,
    },
    errorContainer: {
        padding: normalize(16),
        backgroundColor: '#ffebee',
        borderRadius: Border.br_3xs,
        marginBottom: normalize(16),
    },
    errorText: {
        color: Color.red,
        fontSize: normalizeFont(14),
        textAlign: 'center',
    },
});

export default NotificationSettings;
