import React, { useState, useMemo } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    ActivityIndicator, Alert,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import {useDispatch, useSelector} from 'react-redux';
import {
    selectProfileLoading,
    selectProfileError,
    selectProfile
} from '@entities/profile';
import { normalize, normalizeFont } from '@shared/lib/normalize';
import { useProfileInfo } from "@features/profile/ui/ProfileInfo/model/useProfileInfo";
import { Color, FontFamily } from "@app/styles/GlobalStyles";
import IconRight from "@shared/ui/Icon/Profile/IconRight";
import JoinTeamIcon from "@shared/ui/Icon/Profile/JoinTeamIcon";
import CustomButton from "@shared/ui/Button/CustomButton";
import { AddProductModal } from "@widgets/product/AddProductModal";
import { useAuth } from "@entities/auth/hooks/useAuth";

export const ProfileInfo = ({ onProductPress }) => {
    const navigation = useNavigation();
    const dispatch = useDispatch();
    const isLoading = useSelector(selectProfileLoading);
    const profileError = useSelector(selectProfileError);
    const profile = useSelector(selectProfile);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useAuth –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { isAuthenticated, currentUser, logout } = useAuth();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    const tokens = useSelector(state => state.auth.tokens);

    const [isAddProductModalVisible, setAddProductModalVisible] = useState(false);
    const [activeButtonId, setActiveButtonId] = useState(null);

    const {
        setRetryCount,
        activeItemId,
        setActiveItemId,
        handleLogout: logoutFromProfile,
        navigateToLogin,
        menuItems,
    } = useProfileInfo(isAuthenticated, tokens, currentUser, navigation);

    // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
    const roleChecks = useMemo(() => ({
        isAdmin: currentUser?.role === 'ADMIN',
        isEmployee: currentUser?.role === 'EMPLOYEE',
        isSupplier: currentUser?.role === 'SUPPLIER',
        isDriver: currentUser?.role === 'DRIVER',
        isClient: currentUser?.role === 'CLIENT'
    }), [currentUser?.role]);

    const handleMenuItemPress = (itemId, callback) => {
        setActiveItemId(itemId);
        setTimeout(() => {
            setActiveItemId(null);
            callback();
        }, 150);
    };

    const handleJoinTeamPress = () => {
        navigation.navigate('JoinTeam');
    };

    const handleLogoutPress = () => {
        try {
            console.log('üö™ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');

            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º FCM —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            const deactivateFCMToken = async () => {
                try {
                    const FCMTokenService = require('@shared/services/FCMTokenService').default;
                    const deactivated = await FCMTokenService.deactivateTokenOnLogout();
                    
                    if (deactivated) {
                        console.log('‚úÖ FCM —Ç–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
                    } else {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å FCM —Ç–æ–∫–µ–Ω');
                    }
                } catch (fcmError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', fcmError);
                }
            };

            // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º FCM —Ç–æ–∫–µ–Ω
            deactivateFCMToken().finally(() => {
                console.log('üö™ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');

                // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã—Ö–æ–¥
                dispatch({ type: 'RESET_APP_STATE' });
                console.log('üîÑ RESET_APP_STATE –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

                logout().then(() => {
                    console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    navigation.reset({
                        index: 0,
                        routes: [{ name: 'Auth' }],
                    });
                    console.log('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω Auth');
                }).catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
                    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                });
            });

        } catch (error) {
            console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
        }
    };



    const handleProductSuccess = (product) => {
        console.log('–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', product);
        if (onProductPress) {
            onProductPress(product);
        }
    };

    const handleManageProducts = () => {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –≤ ProfileStack
        navigation.navigate('ProductManagement', {
            fromScreen: 'Profile',
            returnTo: 'Profile'
        });
    };

    const handlePushNotificationTest = () => {
        navigation.navigate('PushNotificationTest');
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!isAuthenticated || !tokens?.accessToken) {
        return (
            <View style={styles.centered}>
                <TouchableOpacity onPress={navigateToLogin}>
                    <Text style={styles.loginMessage}>
                        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <Text style={styles.loginLink}>–≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</Text>
                    </Text>
                </TouchableOpacity>
            </View>
        );
    }

    if (isLoading) {
        return (
            <View style={styles.centered}>
                <ActivityIndicator size="large" color="#007AFF" />
                <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</Text>
            </View>
        );
    }

    const isAdminProfileError = profileError &&
        roleChecks.isAdmin &&
        profileError.includes('–ü—Ä–æ—Ñ–∏–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (profileError && !isAdminProfileError) {
        return (
            <View style={styles.centered}>
                <Text style={styles.error}>{profileError}</Text>
                <CustomButton
                    title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                    onPress={() => setRetryCount((prev) => prev + 1)}
                    outlined={false}
                    color="#007AFF"
                    activeColor="#FFFFFF"
                    height={40}
                    style={styles.retryButtonStyle}
                    textStyle={styles.retryButtonTextStyle}
                />
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <View style={styles.menuContainer}>
                {menuItems.map((item) => (
                    <TouchableOpacity
                        key={item.id}
                        style={[
                            styles.menuItem,
                            activeItemId === item.id && styles.activeMenuItem
                        ]}
                        onPress={() => handleMenuItemPress(item.id, item.onPress)}
                    >
                        <View style={styles.menuItemIcon}>
                            {React.isValidElement(item.icon)
                                ? React.cloneElement(item.icon, {
                                    color: activeItemId === item.id ? '#fff' : undefined
                                })
                                : item.icon
                            }
                        </View>
                        <Text style={[
                            styles.menuItemText,
                            activeItemId === item.id && styles.activeMenuItemText
                        ]}>
                            {item.title}
                        </Text>
                        <IconRight color={activeItemId === item.id ? '#fff' : undefined} />
                    </TouchableOpacity>
                ))}
            </View>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π */}
            {roleChecks.isClient && (
                <View style={styles.buttonContainer}>
                    <CustomButton
                        title="–°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã"
                        icon={<JoinTeamIcon />}
                        onPress={handleJoinTeamPress}
                        outlined={true}
                        color={Color.blue2}
                    />
                </View>
            )}

            {roleChecks.isSupplier && (
                <View style={styles.buttonContainer}>
                    <CustomButton
                        title="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
                        onPress={() => setAddProductModalVisible(true)}
                        outlined={true}
                        color={Color.blue2}
                        activeColor="#FFFFFF"
                        style={styles.buttonMargin}
                    />
                    <CustomButton
                        title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"
                        onPress={handleManageProducts}
                        outlined={true}
                        color={Color.blue2}
                        activeColor="#FFFFFF"
                    />
                </View>
            )}

            {roleChecks.isDriver && (
                <View style={styles.buttonContainer}>
                    <CustomButton
                        title="–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É"
                        onPress={() => navigation.navigate('AddStop')}
                        outlined={true}
                        color={Color.blue2}
                        style={styles.buttonMargin}
                    />
                    <CustomButton
                        title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏"
                        onPress={() => navigation.navigate('StopsList')}
                        outlined={true}
                        color={Color.blue2}
                    />
                </View>
            )}

            <View style={styles.logoutContainer}>
                <CustomButton
                    title="–í—ã–π—Ç–∏"
                    onPress={handleLogoutPress}
                    outlined={false}
                    color={Color.red}
                    activeColor="#FFFFFF"
                />
            </View>

            <AddProductModal
                visible={isAddProductModalVisible}
                onClose={() => setAddProductModalVisible(false)}
                onSuccess={handleProductSuccess}
            />
        </View>
    );
};

const styles = StyleSheet.create({
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª–∏
    container: {
        flex: 1,
        backgroundColor: '#FFFFFF',
    },
    centered: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: normalize(20),
    },
    menuContainer: {
        marginTop: normalize(16),
        marginHorizontal: normalize(20),
        borderColor: '#E5E5E5',
        borderBottomWidth: 0.5,
    },
    menuItem: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: normalize(15),
        borderColor: '#E5E5E5',
        borderBottomWidth: 0.5,
        backgroundColor: '#FFFFFF',
        position: 'relative',
        paddingHorizontal: normalize(10),
    },
    menuItemIcon: {
        width: normalize(24),
        alignItems: 'center',
        justifyContent: 'center',
    },
    menuItemText: {
        flex: 1,
        marginLeft: normalize(15),
        fontSize: normalizeFont(16),
        color: '#222222',
        fontFamily: FontFamily.sFProText,
    },
    activeMenuItem: {
        backgroundColor: Color.blue2,
        width: '100%',
        paddingHorizontal: normalize(10),
    },
    activeMenuItemText: {
        color: '#fff',
    },
    buttonContainer: {
        marginTop: normalize(20),
        marginHorizontal: normalize(15),
        marginBottom: normalize(15),
    },
    buttonMargin: {
        marginBottom: normalize(10),
    },
    logoutContainer: {
        margin: normalize(15),
        marginTop: normalize(50),
        marginBottom: normalize(30),
    },
    loginMessage: {
        fontSize: normalizeFont(16),
        textAlign: 'center',
        color: '#666',
    },
    loginLink: {
        color: '#007AFF',
        fontWeight: 'bold',
        textDecorationLine: 'underline',
    },
    loadingText: {
        fontSize: normalizeFont(14),
        color: '#666',
        marginTop: normalize(10),
    },
    error: {
        color: 'red',
        fontSize: normalizeFont(16),
        textAlign: 'center',
        marginBottom: normalize(20),
    },
    retryButtonStyle: {
        width: 'auto',
        paddingHorizontal: normalize(20),
    },
    retryButtonTextStyle: {
        fontSize: normalizeFont(14),
    },
});
