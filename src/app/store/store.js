import { configureStore, combineReducers } from '@reduxjs/toolkit';
import { persistStore, persistReducer } from 'redux-persist';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { authReducer } from '@entities/auth';
import { productsReducer } from '@entities/product';
import { profileReducer } from "@entities/profile";
import { categoryReducer } from '@entities/category';
import { bannerReducer } from '@entities/banner';
import { feedbackReducer } from '@entities/feedback';
import { userReducer } from "@entities/user";
import { suppliersReducer } from "@entities/supplier";
import { searchHistoryReducer } from "@entities/search";
import { filterReducer } from "@entities/filter";
import { setDispatch } from '@shared/api/api';
import { driverReducer } from "@entities/driver";
import { stopReducer } from "@entities/stop";
import { districtReducer } from "@entities/district";
import { adminReducer, processingRolesReducer } from '@entities/admin';
import { favoritesReducer } from '@entities/favorites';
import { notificationReducer, notificationSettingsSlice, fetchNotificationSettings } from '@entities/notification';
import { cartReducer } from '@entities/cart';
import { cartReloadMiddleware } from '@entities/cart/model/middleware';
import { warehouseReducer } from '@entities/warehouse';
import { orderReducer } from '@entities/order';
import { orderProcessingReducer} from '@entities/order';
import { rewardReducer } from '@entities/reward';
import { chatReducer } from '@entities/chat';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è redux-persist
const persistConfig = {
    key: 'root',
    storage: AsyncStorage,
    whitelist: ['favorites'],
    version: 1, // Increment this to force state migration if needed
};


// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–¥—å—é—Å–µ—Ä
const appReducer = combineReducers({
    auth: authReducer,
    products: productsReducer,
    profile: profileReducer,
    category: categoryReducer,
    banner: bannerReducer,
    feedback: feedbackReducer,
    user: userReducer,
    suppliers: suppliersReducer,
    searchHistory: searchHistoryReducer,
    filter: filterReducer,
    driver: driverReducer,
    stop: stopReducer,
    district: districtReducer,
    admin: adminReducer,
    processingRoles: processingRolesReducer,
    favorites: favoritesReducer,
    notification: notificationReducer,
    notificationSettings: notificationSettingsSlice.reducer,
    cart: cartReducer,
    warehouse: warehouseReducer,
    order: orderReducer,
    rewards: rewardReducer,
    orderProcessing: orderProcessingReducer,
    chat: chatReducer,
});

const rootReducer = (state, action) => {
    if (action.type === 'RESET_APP_STATE') {
        console.log('–°–±—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        state = undefined;
    }
    return appReducer(state, action);
};

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º rootReducer –≤ persistReducer
const persistedReducer = persistReducer(persistConfig, rootReducer);

const localStorageMiddleware = store => next => action => {
    const result = next(action);
    if (action.type.startsWith('auth/')) {
        // –í–∞—à –∫–æ–¥, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    }
    return result;
};

// Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –≤—Ö–æ–¥–µ
const notificationSettingsMiddleware = store => next => action => {
    const result = next(action);

    // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (action.type === 'auth/login/fulfilled' && !action.payload?.requiresTwoFactor) {
        console.log('üîî Notification middleware: Login successful, loading notification settings');
        setTimeout(() => {
            if (fetchNotificationSettings) {
                store.dispatch(fetchNotificationSettings());
            } else {
                console.warn('‚ö†Ô∏è fetchNotificationSettings not available in middleware');
            }
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }

    // –ü—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (action.type === 'RESET_APP_STATE') {
        console.log('üîî Notification middleware: App state reset, clearing notification settings');
    }

    return result;
};

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
const profileCheckMiddleware = store => next => action => {
    const result = next(action);

    // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
    if (action.type === 'profile/fetchProfile/fulfilled') {
        const state = store.getState();
        const profile = state.profile.data;
        const user = state.auth.user;

        if (profile && user && profile.id !== user.id) {
            console.warn(`Middleware: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø—Ä–æ—Ñ–∏–ª—è (${profile.id}) –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${user.id})`);
            store.dispatch({ type: 'profile/clearProfile' });
            store.dispatch({ type: 'profile/fetchProfile' });
        }
    }

    return result;
};

// –î–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π middleware –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
const favoritesDebugMiddleware = store => next => action => {
    const result = next(action);
    return result;
};

export const store = configureStore({
    reducer: persistedReducer,
    middleware: (getDefaultMiddleware) =>
        getDefaultMiddleware({
            serializableCheck: {
                ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],
            },
        })
            .concat(localStorageMiddleware)
            .concat(notificationSettingsMiddleware)
            .concat(profileCheckMiddleware)
            .concat(favoritesDebugMiddleware)
            .concat(cartReloadMiddleware)
});

// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–∏—Å—Ç–æ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const persistor = persistStore(store);

setDispatch(store.dispatch);