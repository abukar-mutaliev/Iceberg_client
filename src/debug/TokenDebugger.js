import AsyncStorage from '@react-native-async-storage/async-storage';
import { validateTokensStatus } from '@shared/api/api';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏
 * –ü–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –≤ Socket.IO
 */
export class TokenDebugger {
    static async runFullDiagnostic() {
        console.log('üîç === TOKEN DEBUGGER ===');
        console.log('üîç Starting full token diagnostic...');

        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º AsyncStorage
            console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ AsyncStorage:');
            const rawTokens = await AsyncStorage.getItem('tokens');
            console.log('Raw tokens from AsyncStorage:', {
                exists: !!rawTokens,
                length: rawTokens?.length || 0,
                preview: rawTokens ? `${rawTokens.substring(0, 50)}...` : 'null'
            });

            // 2. –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω—ã
            console.log('\n2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤:');
            let parsedTokens = null;
            if (rawTokens) {
                try {
                    parsedTokens = JSON.parse(rawTokens);
                    console.log('Parsed tokens:', {
                        hasTokens: !!parsedTokens,
                        hasAccessToken: !!parsedTokens.accessToken,
                        hasRefreshToken: !!parsedTokens.refreshToken,
                        accessTokenLength: parsedTokens.accessToken?.length || 0,
                        refreshTokenLength: parsedTokens.refreshToken?.length || 0
                    });
                } catch (parseError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤:', parseError.message);
                }
            }

            // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            console.log('\n3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤:');
            const validationResult = await validateTokensStatus();

            // 4. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            console.log('\n4Ô∏è‚É£ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:');
            if (parsedTokens?.accessToken) {
                try {
                    const payload = JSON.parse(atob(parsedTokens.accessToken.split('.')[1]));
                    const currentTime = Math.floor(Date.now() / 1000);
                    const isValid = payload.exp > currentTime;

                    console.log('Access token details:', {
                        userId: payload.userId,
                        role: payload.role,
                        exp: payload.exp,
                        iat: payload.iat,
                        currentTime,
                        isValid,
                        timeToExpiry: payload.exp - currentTime,
                        expiryDate: new Date(payload.exp * 1000).toISOString()
                    });
                } catch (decodeError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è access token:', decodeError.message);
                }
            }

            if (parsedTokens?.refreshToken) {
                try {
                    const payload = JSON.parse(atob(parsedTokens.refreshToken.split('.')[1]));
                    const currentTime = Math.floor(Date.now() / 1000);
                    const isValid = payload.exp > currentTime;

                    console.log('Refresh token details:', {
                        userId: payload.userId,
                        exp: payload.exp,
                        currentTime,
                        isValid,
                        timeToExpiry: payload.exp - currentTime,
                        expiryDate: new Date(payload.exp * 1000).toISOString()
                    });
                } catch (decodeError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è refresh token:', decodeError.message);
                }
            }

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Socket.IO –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            console.log('\n5Ô∏è‚É£ Socket.IO –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:');
            console.log('Token for Socket.IO:', {
                hasToken: !!parsedTokens?.accessToken,
                tokenLength: parsedTokens?.accessToken?.length || 0,
                tokenPrefix: parsedTokens?.accessToken ? `${parsedTokens.accessToken.substring(0, 20)}...` : 'no token'
            });

            // 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            console.log('\nüìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
            const issues = [];

            if (!rawTokens) {
                issues.push('‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ AsyncStorage');
            } else if (!parsedTokens) {
                issues.push('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ AsyncStorage');
            } else if (!parsedTokens.accessToken) {
                issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access token');
            } else if (!parsedTokens.refreshToken) {
                issues.push('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token');
            }

            if (validationResult.status === 'error') {
                issues.push('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤');
            } else if (!validationResult.accessTokenValid) {
                issues.push('‚ùå Access token –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
            }

            if (issues.length === 0) {
                console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Socket.IO');
            } else {
                console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
                issues.forEach(issue => console.log('  ', issue));
            }

            return {
                success: issues.length === 0,
                issues,
                tokens: parsedTokens,
                validation: validationResult
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    static async checkSocketAuth() {
        console.log('üîå === SOCKET.IO AUTH CHECK ===');

        try {
            const tokens = await AsyncStorage.getItem('tokens');
            const parsedTokens = tokens ? JSON.parse(tokens) : null;

            const authData = {
                token: parsedTokens?.accessToken || null
            };

            console.log('Socket.IO auth data:', {
                hasToken: !!authData.token,
                tokenLength: authData.token?.length || 0,
                tokenPrefix: authData.token ? `${authData.token.substring(0, 20)}...` : 'no token'
            });

            return authData;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Socket.IO auth:', error);
            return null;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ React Native Debugger
if (typeof global !== 'undefined') {
    global.debugTokens = () => TokenDebugger.runFullDiagnostic();
    global.checkSocketAuth = () => TokenDebugger.checkSocketAuth();
    console.log('üîß TokenDebugger –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ:');
    console.log('  - debugTokens() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤');
    console.log('  - checkSocketAuth() - –ø—Ä–æ–≤–µ—Ä–∫–∞ Socket.IO auth');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export default TokenDebugger;
