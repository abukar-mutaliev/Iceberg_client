// NavigationDebugger.js - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

import React from 'react';
import { View, Text, TouchableOpacity, Alert, StyleSheet } from 'react-native';

export const NavigationDebugger = ({ navigation }) => {

    const testNavigation = () => {
        console.log('üß™ Testing navigation structure...');

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        console.log('Navigation methods:', Object.keys(navigation || {}));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (navigation) {
            console.log('Navigation state:', navigation.getState ? navigation.getState() : 'getState not available');
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ StopDetails
        const testStopId = 13; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –≤–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        const navigationAttempts = [
            // –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            () => navigation.navigate('StopDetails', { stopId: testStopId }),

            // –ß–µ—Ä–µ–∑ —Å—Ç–µ–∫
            () => navigation.navigate('StopDetailsStack', {
                screen: 'StopDetails',
                params: { stopId: testStopId }
            }),

            // –ß–µ—Ä–µ–∑ Main
            () => navigation.navigate('Main', {
                screen: 'MainTab',
                params: {
                    screen: 'StopDetails',
                    params: { stopId: testStopId }
                }
            }),

            // –ö —Å–ø–∏—Å–∫—É –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
            () => navigation.navigate('StopsListScreen'),

            // –ß–µ—Ä–µ–∑ Main –∫ —Å–ø–∏—Å–∫—É
            () => navigation.navigate('Main', {
                screen: 'MainTab',
                params: { screen: 'StopsListScreen' }
            })
        ];

        const testMethods = [
            'Direct StopDetails',
            'StopDetails via Stack',
            'StopDetails via Main',
            'StopsListScreen direct',
            'StopsListScreen via Main'
        ];

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        Alert.alert(
            '–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            [
                ...testMethods.map((method, index) => ({
                    text: method,
                    onPress: () => {
                        try {
                            console.log(`üß™ Testing: ${method}`);
                            navigationAttempts[index]();
                            Alert.alert('–£—Å–ø–µ—Ö', `${method} —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                        } catch (error) {
                            console.error(`‚ùå ${method} failed:`, error.message);
                            Alert.alert('–û—à–∏–±–∫–∞', `${method}: ${error.message}`);
                        }
                    }
                })),
                { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' }
            ]
        );
    };

    const inspectNavigationStructure = () => {
        if (!navigation) {
            Alert.alert('–û—à–∏–±–∫–∞', 'Navigation –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        const navigationInfo = {
            available: !!navigation,
            methods: Object.keys(navigation),
            canGoBack: navigation.canGoBack ? navigation.canGoBack() : 'unknown',
            currentRoute: navigation.getCurrentRoute ? navigation.getCurrentRoute() : 'unknown'
        };

        console.log('üîç Navigation inspection:', navigationInfo);

        Alert.alert(
            '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
            `–ú–µ—Ç–æ–¥—ã: ${navigationInfo.methods.join(', ')}\n\n–ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è: ${navigationInfo.canGoBack}\n\n–¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç: ${JSON.stringify(navigationInfo.currentRoute, null, 2)}`,
            [{ text: 'OK' }]
        );
    };

    if (!__DEV__) return null;

    return (
        <View style={styles.debugContainer}>
            <Text style={styles.debugTitle}>üîß Navigation Debug</Text>

            <TouchableOpacity style={styles.debugButton} onPress={testNavigation}>
                <Text style={styles.debugButtonText}>–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.debugButton} onPress={inspectNavigationStructure}>
                <Text style={styles.debugButtonText}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</Text>
            </TouchableOpacity>

            <TouchableOpacity
                style={styles.debugButton}
                onPress={() => {
                    // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å ID 13
                    try {
                        navigation.navigate('StopDetails', {
                            stopId: 13,
                            fromNotification: true,
                            debugTest: true
                        });
                    } catch (error) {
                        Alert.alert('–û—à–∏–±–∫–∞', error.message);
                    }
                }}
            >
                <Text style={styles.debugButtonText}>–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (StopDetails, ID: 13)</Text>
            </TouchableOpacity>
        </View>
    );
};

const styles = StyleSheet.create({
    debugContainer: {
        backgroundColor: '#fff3cd',
        padding: 16,
        margin: 16,
        borderRadius: 8,
        borderWidth: 1,
        borderColor: '#ffeaa7',
    },
    debugTitle: {
        fontSize: 16,
        fontWeight: 'bold',
        marginBottom: 12,
        textAlign: 'center',
    },
    debugButton: {
        backgroundColor: '#007AFF',
        padding: 12,
        borderRadius: 6,
        marginVertical: 4,
        alignItems: 'center',
    },
    debugButtonText: {
        color: '#fff',
        fontSize: 14,
        fontWeight: '600',
    },
});

