import React, { useEffect, useState, useCallback, useRef, useMemo } from 'react';
import {
    View,
    Text,
    StyleSheet,
    ScrollView,
    ActivityIndicator,
    TouchableOpacity,
    Image,
    Alert,
    StatusBar,
    Dimensions,
    RefreshControl,
    Animated,
    Modal,
    TextInput
} from 'react-native';
import { useRoute, useNavigation, useFocusEffect } from '@react-navigation/native';
import { useDispatch, useSelector } from 'react-redux';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { OrderApi } from '@entities/order';
import { useOrders } from '@entities/order';
import { useAuth } from '@entities/auth/hooks/useAuth';
import { selectHasLocalOrderAction } from '@entities/order/model/selectors';
import { clearLocalOrderAction } from '@entities/order/model/slice';
import { Loader } from "@shared/ui/Loader";
import { ToastSimple } from '@shared/ui/Toast/ui/ToastSimple';

// –í—Ä–µ–º–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
const ORDER_STATUS_LABELS = {
    PENDING: '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    PICKING: '–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É',
    CONFIRMED: '–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    PACKING: '–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É',
    PACKING_COMPLETED: '–£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    IN_DELIVERY: '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
    DELIVERED: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    CANCELLED: '–û—Ç–º–µ–Ω–µ–Ω',
    RETURNED: '–í–æ–∑–≤—Ä–∞—â–µ–Ω'
};

const ORDER_STATUS_COLORS = {
    PENDING: '#FFA726',
    PICKING: '#FF7043',
    CONFIRMED: '#42A5F5',
    PACKING: '#AB47BC',
    PACKING_COMPLETED: '#7E57C2',
    IN_DELIVERY: '#5C6BC0',
    DELIVERED: '#66BB6A',
    CANCELLED: '#EF5350',
    RETURNED: '#78909C'
};

const ORDER_STATUS_ICONS = {
    PENDING: 'schedule',
    PICKING: 'inventory',
    CONFIRMED: 'check-circle',
    PACKING: 'package',
    PACKING_COMPLETED: 'done-all',
    IN_DELIVERY: 'local-shipping',
    DELIVERED: 'done-all',
    CANCELLED: 'cancel',
    RETURNED: 'undo'
};

const getOrderProgress = (status) => {
    const progressMap = {
        PENDING: 0,
        CONFIRMED: 33,
        IN_DELIVERY: 66,
        DELIVERED: 100,
        CANCELLED: 0,
        RETURNED: 0
    };
    return progressMap[status] || 0;
};

const formatAmount = (amount, currency = 'RUB') => {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency
    }).format(amount || 0);
};

const formatOrderNumber = (orderNumber) => {
    if (!orderNumber) return '';
    if (orderNumber.startsWith('ORD-')) {
        return orderNumber;
    }
    return `‚Ññ${orderNumber}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–∫–æ—Ä–æ–±–∫–∞"
const formatBoxesCount = (count) => {
    const num = parseInt(count);

    if (num % 10 === 1 && num % 100 !== 11) {
        return `${num} –∫–æ—Ä–æ–±–∫–∞`;
    } else if (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)) {
        return `${num} –∫–æ—Ä–æ–±–∫–∏`;
    } else {
        return `${num} –∫–æ—Ä–æ–±–æ–∫`;
    }
};

const canCancelOrder = (status, userRole = 'CLIENT') => {
    console.log('canCancelOrder: status -', status, 'userRole -', userRole);
    if (userRole === 'CLIENT') {
        const result = status === 'PENDING';
        console.log('canCancelOrder: CLIENT result -', result);
        return result;
    }
    const result = ['PENDING', 'CONFIRMED', 'IN_DELIVERY'].includes(status);
    console.log('canCancelOrder: EMPLOYEE/ADMIN result -', result);
    return result;
};

const { width } = Dimensions.get('window');

export const OrderDetailsScreen = () => {
    const route = useRoute();
    const navigation = useNavigation();
    const { orderId } = route.params || {};

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [order, setOrder] = useState(null);
    const [loading, setLoading] = useState(true);
    const [refreshing, setRefreshing] = useState(false);
    const [error, setError] = useState(null);
    const [cancelling, setCancelling] = useState(false);
    const [downloadingInvoice, setDownloadingInvoice] = useState(false);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    const [processingModalVisible, setProcessingModalVisible] = useState(false);
    const [processingComment, setProcessingComment] = useState('');
    const [processingOrder, setProcessingOrder] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const [toastConfig, setToastConfig] = useState(null);

    // –•—É–∫–∏
    const { currentUser: user } = useAuth();
    const { downloadInvoice, completeOrderStage, takeOrder } = useOrders();
    const [taking, setTaking] = useState(false);
    const dispatch = useDispatch();
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const [localOrderState, setLocalOrderState] = useState({
        assignedToId: null,
        status: null,
        lastAction: null, // 'taken' | 'completed' | null
        actionTimestamp: null,
        temporarySteps: [] // –ú–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    });

    // –ê–Ω–∏–º–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    const fadeAnim = useRef(new Animated.Value(0)).current;
    const slideAnim = useRef(new Animated.Value(30)).current;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const canViewProcessingHistory = useMemo(() => {
        return user?.role === 'ADMIN' || user?.role === 'EMPLOYEE';
    }, [user?.role]);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
    useEffect(() => {
        if (order) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            setLocalOrderState(prevState => {
                const newState = {
                    ...prevState,
                    assignedToId: order.assignedTo?.id || null,
                    status: order.status,
                    lastKnownHistoryLength: order?.statusHistory?.length || 0
                };

                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
                const hasDataChanged = prevState.assignedToId !== newState.assignedToId ||
                                      prevState.status !== newState.status ||
                                      (prevState.lastKnownHistoryLength !== (order?.statusHistory?.length || 0));

                if (hasDataChanged) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ statusHistory –æ—Ç–¥–µ–ª—å–Ω–æ
                    const historyLengthChanged = prevState.lastKnownHistoryLength !== (order?.statusHistory?.length || 0);

                    if (historyLengthChanged) {
                        console.log('üìã –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', {
                            previous: prevState.lastKnownHistoryLength,
                            current: order?.statusHistory?.length || 0
                        });

                        // –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        if ((order?.statusHistory?.length || 0) > prevState.lastKnownHistoryLength) {
                            console.log('üìã –ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');

                            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç–µ–º, —á—Ç–æ –±—ã–ª–æ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–µ–π—Å—Ç–≤–∏–∏,
                            // –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –∏ –ø–µ—Ä–µ–¥–∞–ª –∑–∞–∫–∞–∑ –¥–∞–ª—å—à–µ
                            if (prevState.status && order?.status !== prevState.status) {
                                console.log('üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                                newState.lastAction = null;
                                newState.actionTimestamp = null;
                                newState.assignedToId = null; // –ó–∞–∫–∞–∑ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
                                newState.temporarySteps = []; // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã

                                // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ Redux localOrderActions –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                                dispatch(clearLocalOrderAction({ orderId: orderId }));
                                console.log('üóëÔ∏è –û—á–∏—â–µ–Ω—ã Redux localOrderActions –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
                            }
                        }
                    } else {
                        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (assignedTo, status) –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                        const timeSinceAction = prevState.actionTimestamp ? Date.now() - prevState.actionTimestamp : Infinity;
                        if (timeSinceAction > 10000) {
                            console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
                            newState.lastAction = null;
                            newState.actionTimestamp = null;
                            newState.temporarySteps = [];
                        } else {
                            console.log('üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã - –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è');
                        }
                    }
                }

                return newState;
            });
        }
    }, [order?.assignedTo?.id, order?.status, order?.statusHistory?.length]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    useEffect(() => {
        if (localOrderState.lastAction && localOrderState.actionTimestamp) {
            const timeout = setTimeout(() => {
                setLocalOrderState(prevState => ({
                    ...prevState,
                    lastAction: null,
                    actionTimestamp: null,
                    temporarySteps: []
                }));
            }, 15000); // 15 —Å–µ–∫—É–Ω–¥ - –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

            return () => clearTimeout(timeout);
        }
    }, [localOrderState.lastAction, localOrderState.actionTimestamp]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
    const getProcessingHistory = useCallback(() => {
        if (!order?.statusHistory || order.statusHistory.length === 0) return [];

        const processingSteps = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        order.statusHistory.forEach((historyItem, index) => {
            const { status, comment, createdAt } = historyItem;

            console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ #${index + 1}:`, {
                status,
                comment,
                createdAt
            });

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º PENDING —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —ç—Ç–∞–ø "–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É"
            if (status === 'PENDING') {
                const lowerComment = comment ? comment.toLowerCase() : '';
                if (lowerComment.includes('–≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É') ||
                    lowerComment.includes('–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É')) {
                    console.log('üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PENDING —Å—Ç–∞—Ç—É—Å - –Ω–∞–π–¥–µ–Ω —ç—Ç–∞–ø "–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É"');
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                } else {
                    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º PENDING —Å—Ç–∞—Ç—É—Å - –Ω–µ —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                    return;
                }
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —ç—Ç–∞–ø –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∏ —Å—Ç–∞—Ç—É—Å—É
            let role = '';
            let roleLabel = '';
            let stepType = ''; // 'started' –∏–ª–∏ 'completed'
            let actualStatus = status; // –†–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            if (comment) {
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                const lowerComment = comment.toLowerCase();
                console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${comment}"`);
                console.log(`üîç –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: "${lowerComment}"`);
                console.log(`üîç –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏: "${status}"`);
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
                if (lowerComment.includes('—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')) {
                    role = 'PICKER';
                    roleLabel = '–°–±–æ—Ä—â–∏–∫';
                    stepType = 'completed';
                    actualStatus = 'CONFIRMED';
                    console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏');
                } else if (lowerComment.includes('—É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')) {
                    role = 'PACKER';
                    roleLabel = '–£–ø–∞–∫–æ–≤—â–∏–∫';
                    stepType = 'completed';
                    actualStatus = 'PACKING_COMPLETED';
                    console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏');
                } else if (lowerComment.includes('–¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')) {
                    role = 'COURIER';
                    roleLabel = '–ö—É—Ä—å–µ—Ä';
                    stepType = 'completed';
                    actualStatus = 'DELIVERED';
                    console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
                }
                // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ + –≤–∑—è—Ç–∏–µ)
                else if (lowerComment.includes('–≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É') ||
                         (lowerComment.includes('–Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É') && lowerComment.includes('–≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É'))) {
                    stepType = 'started';
                    console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:', comment);

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    if (lowerComment.includes('—Å–±–æ—Ä—â–∏–∫') ||
                        lowerComment.includes('—Å–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤') ||
                        lowerComment.includes('—Å–±–æ—Ä—â–∏–∫–æ–º')) {
                        role = 'PICKER';
                        roleLabel = '–°–±–æ—Ä—â–∏–∫';
                        actualStatus = 'PICKING';
                        console.log('üë∑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –°–±–æ—Ä—â–∏–∫ –¥–ª—è —ç—Ç–∞–ø–∞ "–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É"');
                    } else if (lowerComment.includes('—É–ø–∞–∫–æ–≤—â–∏–∫') ||
                              lowerComment.includes('—É–ø–∞–∫–æ–≤—â–∏–∫–æ–º')) {
                        role = 'PACKER';
                        roleLabel = '–£–ø–∞–∫–æ–≤—â–∏–∫';
                        actualStatus = 'PACKING';
                        console.log('üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –£–ø–∞–∫–æ–≤—â–∏–∫ –¥–ª—è —ç—Ç–∞–ø–∞ "–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É"');
                    } else if (lowerComment.includes('–∫—É—Ä—å–µ—Ä') ||
                              lowerComment.includes('–∫—É—Ä—å–µ—Ä–æ–º')) {
                        role = 'COURIER';
                        roleLabel = '–ö—É—Ä—å–µ—Ä';
                        actualStatus = 'IN_DELIVERY';
                        console.log('üöö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –ö—É—Ä—å–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ "–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É"');
                    } else {
                        // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
                        console.log('‚ö†Ô∏è –†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É:', status);
                        if (status === 'PENDING') {
                            role = 'PICKER';
                            roleLabel = '–°–±–æ—Ä—â–∏–∫';
                            actualStatus = 'PICKING';
                            console.log('üë∑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –°–±–æ—Ä—â–∏–∫');
                        } else if (status === 'CONFIRMED') {
                            role = 'PACKER';
                            roleLabel = '–£–ø–∞–∫–æ–≤—â–∏–∫';
                            actualStatus = 'PACKING';
                            console.log('üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –£–ø–∞–∫–æ–≤—â–∏–∫');
                        } else if (status === 'IN_DELIVERY') {
                            role = 'COURIER';
                            roleLabel = '–ö—É—Ä—å–µ—Ä';
                            actualStatus = 'IN_DELIVERY';
                            console.log('üöö –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –ö—É—Ä—å–µ—Ä');
                        }
                    }
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –≤–∑—è—Ç–∏–µ–º –≤ —Ä–∞–±–æ—Ç—É
                else if (lowerComment.includes('–Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É')) {
                    console.log('üìã –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É:', comment);

                    // –ï—Å–ª–∏ –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≤–∑—è—Ç–∏–µ –≤ —Ä–∞–±–æ—Ç—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ started
                    if (lowerComment.includes('–≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É') ||
                        lowerComment.includes('–≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É') ||
                        lowerComment.includes('–≤–∑—è–ª—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É')) {

                        stepType = 'started';
                        console.log('üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –≤–∑—è—Ç–∏–µ–º –≤ —Ä–∞–±–æ—Ç—É - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ started');

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        if (lowerComment.includes('—Å–±–æ—Ä—â–∏–∫') ||
                            lowerComment.includes('—Å–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤') ||
                            lowerComment.includes('—Å–±–æ—Ä—â–∏–∫–æ–º')) {
                            role = 'PICKER';
                            roleLabel = '–°–±–æ—Ä—â–∏–∫';
                            actualStatus = 'PICKING';
                            console.log('üë∑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –°–±–æ—Ä—â–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å –≤–∑—è—Ç–∏–µ–º');
                        } else if (lowerComment.includes('—É–ø–∞–∫–æ–≤—â–∏–∫') ||
                                  lowerComment.includes('—É–ø–∞–∫–æ–≤—â–∏–∫–æ–º')) {
                            role = 'PACKER';
                            roleLabel = '–£–ø–∞–∫–æ–≤—â–∏–∫';
                            actualStatus = 'PACKING';
                            console.log('üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –£–ø–∞–∫–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å –≤–∑—è—Ç–∏–µ–º');
                        } else if (lowerComment.includes('–∫—É—Ä—å–µ—Ä') ||
                                  lowerComment.includes('–∫—É—Ä—å–µ—Ä–æ–º')) {
                            role = 'COURIER';
                            roleLabel = '–ö—É—Ä—å–µ—Ä';
                            actualStatus = 'IN_DELIVERY';
                            console.log('üöö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å: –ö—É—Ä—å–µ—Ä –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å –≤–∑—è—Ç–∏–µ–º');
                        } else {
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞
                            console.log('‚ö†Ô∏è –†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É:', status);
                            if (status === 'PENDING') {
                                role = 'PICKER';
                                roleLabel = '–°–±–æ—Ä—â–∏–∫';
                                actualStatus = 'PICKING';
                            } else if (status === 'CONFIRMED') {
                                role = 'PACKER';
                                roleLabel = '–£–ø–∞–∫–æ–≤—â–∏–∫';
                                actualStatus = 'PACKING';
                            } else if (status === 'IN_DELIVERY') {
                                role = 'COURIER';
                                roleLabel = '–ö—É—Ä—å–µ—Ä';
                                actualStatus = 'IN_DELIVERY';
                            }
                        }
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        console.log('üö´ –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                        return;
                    }
                }
                // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
                else {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                    switch (status) {
                        case 'CONFIRMED':
                            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å CONFIRMED –∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏,
                            // –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
                            role = 'PICKER';
                            roleLabel = '–°–±–æ—Ä—â–∏–∫';
                            stepType = 'completed';
                            actualStatus = 'CONFIRMED';
                            break;
                        case 'IN_DELIVERY':
                            // –î–ª—è IN_DELIVERY –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Å IN_DELIVERY, —Ç–æ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏
                            role = 'PACKER';
                            roleLabel = '–£–ø–∞–∫–æ–≤—â–∏–∫';
                            stepType = 'completed';
                            actualStatus = 'PACKING_COMPLETED';
                            break;
                        case 'DELIVERED':
                            role = 'COURIER';
                            roleLabel = '–ö—É—Ä—å–µ—Ä';
                            stepType = 'completed';
                            actualStatus = 'DELIVERED';
                            break;
                        case 'CANCELLED':
                            role = 'MANAGER';
                            roleLabel = '–ú–µ–Ω–µ–¥–∂–µ—Ä';
                            stepType = 'completed';
                            actualStatus = 'CANCELLED';
                            break;
                        case 'RETURNED':
                            role = 'COURIER';
                            roleLabel = '–ö—É—Ä—å–µ—Ä';
                            stepType = 'completed';
                            actualStatus = 'RETURNED';
                            break;
                        default:
                            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                    }
                }
            } else {
                console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç—Ç–∞–ø–∞
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∞–ø–∞:', {
                role,
                roleLabel,
                stepType,
                actualStatus,
                employeeName,
                employeePosition,
                comment
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —ç—Ç–∞–ø
            if (!role || !stepType) {
                console.log('‚ö†Ô∏è –≠—Ç–∞–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', { role, stepType });
                return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            let employeeName = '';
            let employeePosition = '';

            if (comment) {
                console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', comment);

                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                const specialPatterns = [
                    // –§–æ—Ä–º–∞—Ç: "–ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ê—Ö–º–µ–¥ –°–±–æ—Ä—â–∏–∫ (–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤). –í–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É"
                    /–∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (.+?) \((.+?)\)\. –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É/i,
                    // –§–æ—Ä–º–∞—Ç: "–ê—Ö–º–µ–¥ –°–±–æ—Ä—â–∏–∫ (–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤) –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É"
                    /(.+?) \((.+?)\) –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É/i,
                    // –§–æ—Ä–º–∞—Ç: "–ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ê—Ö–º–µ–¥ –°–±–æ—Ä—â–∏–∫ (–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤)"
                    /–∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (.+?) \((.+?)\)/i,
                    // –§–æ—Ä–º–∞—Ç: "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ê—Ö–º–µ–¥ –°–±–æ—Ä—â–∏–∫ (–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤)"
                    /–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (.+?) \((.+?)\)/i,
                    // –§–æ—Ä–º–∞—Ç: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ê—Ö–º–µ–¥ –°–±–æ—Ä—â–∏–∫ (–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤)"
                    /–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (.+?) \((.+?)\)/i,
                    // –§–æ—Ä–º–∞—Ç: "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ê—Ö–º–µ–¥ –°–±–æ—Ä—â–∏–∫ (–°–±–æ—Ä—â–∏–∫ –∑–∞–∫–∞–∑–æ–≤)"
                    /–∑–∞–∫–∞–∑ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (.+?) \((.+?)\)/i,
                ];

                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                let foundMatch = false;
                for (const pattern of specialPatterns) {
                    const match = comment.match(pattern);
                    if (match && match[1]) {
                        employeeName = match[1].trim();
                        if (match[2]) {
                            employeePosition = match[2].trim();
                        }
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º:', { employeeName, employeePosition, pattern: pattern.toString() });
                        foundMatch = true;
                        break;
                    }
                }

                // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–µ
                if (!foundMatch) {
                    const generalPatterns = [
                        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                        /–Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (.+?)\./i,
                        /–Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (.+?)$/i,
                        /–ø—Ä–∏–Ω—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (.+?) –Ω–∞ —Å–∫–ª–∞–¥/i,
                        /(.+?) –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É/i,
                        /(.+?) –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É/i,

                        // –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å —Å–∫–æ–±–∫–∞–º–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
                        /(.+?) \((.+?)\)/i
                    ];

                    for (const pattern of generalPatterns) {
                        const match = comment.match(pattern);
                        if (match) {
                            if (match[2]) {
                                employeeName = match[1].trim();
                                employeePosition = match[2].trim();
                                // –£–±–∏—Ä–∞–µ–º —Ä–æ–ª–∏ –∏–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                                if (!['–°–±–æ—Ä—â–∏–∫', '–£–ø–∞–∫–æ–≤—â–∏–∫', '–ö—É—Ä—å–µ—Ä'].includes(employeePosition)) {
                                    // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                                } else {
                                    // –ï—Å–ª–∏ –≤ —Å–∫–æ–±–∫–∞—Ö —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å, —É–±–∏—Ä–∞–µ–º –µ—ë
                                    employeePosition = '';
                                }
                            } else if (match[1]) {
                                employeeName = match[1].trim();
                            }
                            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º:', { employeeName, employeePosition, pattern: pattern.toString() });
                            break;
                        }
                    }
                }

                // –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
                if (employeeName) {
                    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏
                    employeeName = employeeName
                        .replace(/^(–∑–∞–∫–∞–∑|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º)/i, '')
                        .replace(/(–∑–∞–∫–∞–∑|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º)$/i, '')
                        .trim();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º —Å–ª–æ–≤–æ–º
                    if (['—Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º', '–∑–∞–∫–∞–∑', '—Ä–∞–±–æ—Ç—É', '–≤–∑—è–ª'].includes(employeeName.toLowerCase())) {
                        employeeName = '';
                        employeePosition = '';
                    }

                    console.log('üìù –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', { employeeName, employeePosition });
                } else {
                    console.log('‚ùå –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:', comment);
                }
            }

            const stepData = {
                status: actualStatus,
                role,
                roleLabel,
                stepType,
                employeeName,
                employeePosition,
                comment,
                createdAt,
                originalStatus: status
            };

            console.log('üìã –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø –≤ –∏—Å—Ç–æ—Ä–∏—é:', stepData);
            processingSteps.push(stepData);
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        processingSteps.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));

        console.log('üéâ –ò—Ç–æ–≥–æ–≤—ã–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processingSteps.length);
        processingSteps.forEach((step, index) => {
            console.log(`üìã –≠—Ç–∞–ø ${index + 1}:`, {
                role: step.role,
                roleLabel: step.roleLabel,
                stepType: step.stepType,
                status: step.status,
                employeeName: step.employeeName,
                comment: step.comment
            });
        });

        // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç—Ç–∞–ø—ã
        const enhancedSteps = [];
        let lastPickerCompleted = false;
        let lastPackerCompleted = false;
        
        for (let i = 0; i < processingSteps.length; i++) {
            const step = processingSteps[i];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
            enhancedSteps.push(step);
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
            if (step.role === 'PICKER' && step.stepType === 'completed') {
                lastPickerCompleted = true;
            }
            if (step.role === 'PACKER' && step.stepType === 'completed') {
                lastPackerCompleted = true;
            }
            
            // –ï—Å–ª–∏ –º—ã –≤–∏–¥–∏–º –∫—É—Ä—å–µ—Ä–∞, –Ω–æ —É–ø–∞–∫–æ–≤—â–∏–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ–π —ç—Ç–∞–ø,
            // –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø–∞–∫–æ–≤–∫–∏
            if (step.role === 'COURIER' && step.stepType === 'started' && 
                lastPickerCompleted && !lastPackerCompleted) {
                
                // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø–∞–∫–æ–≤–∫–∏
                const packingCompletedStep = {
                    status: 'PACKING_COMPLETED',
                    role: 'PACKER',
                    roleLabel: '–£–ø–∞–∫–æ–≤—â–∏–∫',
                    stepType: 'completed',
                    employeeName: '',
                    employeePosition: '',
                    comment: '–£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    createdAt: new Date(step.createdAt).getTime() - 1, // –ß—É—Ç—å —Ä–∞–Ω—å—à–µ —á–µ–º –∫—É—Ä—å–µ—Ä
                    originalStatus: 'IN_DELIVERY',
                    isVirtual: true
                };
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º —ç—Ç–∞–ø–æ–º –∫—É—Ä—å–µ—Ä–∞
                enhancedSteps.splice(enhancedSteps.length - 1, 0, packingCompletedStep);
                lastPackerCompleted = true;
            }
        }
        
        return enhancedSteps;
    }, [order?.statusHistory]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const renderProcessingHistory = useMemo(() => {
        console.log('üìã renderProcessingHistory - –Ω–∞—á–∞–ª–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞');
        console.log('üìã canViewProcessingHistory:', canViewProcessingHistory);

        if (!canViewProcessingHistory) {
            console.log('üö´ renderProcessingHistory - –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
            return null;
        }

        let processingSteps = getProcessingHistory();
        console.log('üìã processingSteps –∏–∑ getProcessingHistory:', processingSteps.length);
        let allSteps = [...processingSteps]; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤

        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        // –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º–∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        if (localOrderState.temporarySteps && localOrderState.temporarySteps.length > 0) {
            console.log('üïí –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏:', {
                tempSteps: localOrderState.temporarySteps.length,
                realSteps: processingSteps.length,
                tempStepsDetails: localOrderState.temporarySteps.map(step => ({
                    role: step.role,
                    stepType: step.stepType,
                    employeeName: step.employeeName
                }))
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏
            const filteredTempSteps = localOrderState.temporarySteps.filter(tempStep => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
                const duplicateFound = processingSteps.some(realStep =>
                    realStep.role === tempStep.role &&
                    realStep.stepType === tempStep.stepType &&
                    realStep.employeeName === tempStep.employeeName
                );

                if (duplicateFound) {
                    console.log('üö´ –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞:', {
                        role: tempStep.role,
                        stepType: tempStep.stepType,
                        employeeName: tempStep.employeeName
                    });
                    return false;
                }
                return true;
            });

            console.log('üìã –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', {
                originalTemp: localOrderState.temporarySteps.length,
                filteredTemp: filteredTempSteps.length
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –≤ –Ω–∞—á–∞–ª–æ (–æ–Ω–∏ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
            allSteps = [...filteredTempSteps, ...processingSteps];

            console.log('üìä –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:', allSteps.length);
            console.log('üìã –°–≤–æ–¥–∫–∞ —ç—Ç–∞–ø–æ–≤:', allSteps.map(step => ({
                role: step.role,
                stepType: step.stepType,
                employeeName: step.employeeName,
                isTemporary: step.isTemporary,
                comment: step.comment?.substring(0, 50) + '...'
            })));
        } else {
            console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã:', processingSteps.length);
        }
        
        if (allSteps.length === 0) {
            console.log('üö´ renderProcessingHistory - –Ω–µ—Ç —ç—Ç–∞–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return null;
        }

        console.log('‚úÖ renderProcessingHistory - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSX —Å', allSteps.length, '—ç—Ç–∞–ø–∞–º–∏');
        return (
            <View style={styles.modernCard}>
                <View style={styles.cardHeader}>
                    <Icon name="people" size={24} color="#667eea" />
                    <Text style={styles.cardTitle}>–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞</Text>
                </View>
                
                <View style={styles.processingStepsContainer}>
                    {allSteps.map((step, index) => {
                        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞
                        let stepTitle = '';
                        if (step.stepType === 'started') {
                            stepTitle = `${step.roleLabel} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É`;
                        } else if (step.stepType === 'completed') {
                            switch (step.role) {
                                case 'PICKER':
                                    stepTitle = '–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
                                    break;
                                case 'PACKER':
                                    stepTitle = '–£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
                                    break;
                                case 'COURIER':
                                    stepTitle = '–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
                                    break;
                                default:
                                    stepTitle = ORDER_STATUS_LABELS[step.status] || '–≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω';
                            }
                        } else {
                            stepTitle = ORDER_STATUS_LABELS[step.status] || step.roleLabel;
                        }

                        return (
                            <View key={`${index}-${step.status}-${step.stepType}`} style={[
                                styles.processingStep,
                                index === allSteps.length - 1 && styles.lastProcessingStep,
                                step.isVirtual && styles.virtualStep,
                                step.isTemporary && styles.temporaryStep
                            ]}>
                                <View style={styles.stepHeader}>
                                    <View style={styles.stepRole}>
                                        <View style={[styles.roleBadge, { backgroundColor: ORDER_STATUS_COLORS[step.status] }]}>
                                            <Icon name={ORDER_STATUS_ICONS[step.status]} size={16} color="#fff" />
                                            <Text style={styles.roleLabel}>{step.roleLabel}</Text>
                                        </View>
                                        <Text style={styles.stepStatus}>
                                            {stepTitle}
                                        </Text>
                                    </View>
                                    <Text style={styles.stepDate}>
                                        {step.isVirtual ? 
                                            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' : 
                                            step.isTemporary ?
                                                '–¢–æ–ª—å–∫–æ —á—Ç–æ' :
                                                new Date(step.createdAt).toLocaleString('ru-RU')
                                        }
                                    </Text>
                                </View>
                                
                                {step.employeeName && (
                                    <View style={styles.stepEmployee}>
                                        <Icon name="person" size={16} color="#667eea" />
                                        <View style={styles.employeeInfo}>
                                            <Text style={styles.employeeName}>
                                                {step.employeeName}
                                            </Text>
                                            {step.employeePosition && (
                                                <Text style={styles.employeePosition}>
                                                    {step.employeePosition}
                                                </Text>
                                            )}
                                        </View>
                                    </View>
                                )}
                                
                                {step.comment && !step.isVirtual && (
                                    <View style={styles.stepComment}>
                                        <Icon name="comment" size={14} color="#718096" />
                                        <Text style={styles.commentText}>
                                            {step.comment}
                                        </Text>
                                    </View>
                                )}
                                
                                {step.isVirtual && (
                                    <View style={styles.stepComment}>
                                        <Icon name="info" size={14} color="#718096" />
                                        <Text style={[styles.commentText, styles.virtualComment]}>
                                            –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ
                                        </Text>
                                    </View>
                                )}
                            </View>
                        );
                    })}
                </View>
            </View>
        );
    }, [canViewProcessingHistory, getProcessingHistory, localOrderState.temporarySteps, user?.employee]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    const loadOrderDetails = useCallback(async (isRefresh = false) => {
        if (!orderId) {
            setError('ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            setLoading(false);
            return;
        }

        try {
            if (!isRefresh) {
                setLoading(true);
            }
            setError(null);

            const response = await OrderApi.getOrderById(orderId);
            console.log('loadOrderDetails: response -', response);
            console.log('loadOrderDetails: response.status type -', typeof response.status);
            console.log('loadOrderDetails: response.status value -', response.status);
            console.log('loadOrderDetails: response.data type -', typeof response.data);
            console.log('loadOrderDetails: response.data exists -', !!response.data);

            const isSuccess = response.status === 'success';
            const hasData = !!response.data;

            console.log('loadOrderDetails: isSuccess -', isSuccess);
            console.log('loadOrderDetails: hasData -', hasData);
            console.log('loadOrderDetails: combined condition -', isSuccess && hasData);

            if (isSuccess && hasData) {
                console.log('loadOrderDetails: order data -', response.data);
                console.log('loadOrderDetails: order status -', response.data?.status);
                console.log('loadOrderDetails: order assignedTo -', response.data?.assignedTo);
                console.log('loadOrderDetails: order items -', response.data?.items || response.data?.orderItems);
                setOrder(response.data);

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
                Animated.parallel([
                    Animated.timing(fadeAnim, {
                        toValue: 1,
                        duration: 500,
                        useNativeDriver: true,
                    }),
                    Animated.timing(slideAnim, {
                        toValue: 0,
                        duration: 500,
                        useNativeDriver: true,
                    })
                ]).start();
            } else {
                console.log('loadOrderDetails: FAILED CONDITION - status:', response.status, 'data:', !!response.data);
                throw new Error(`Invalid response: status=${response.status}, hasData=${hasData}`);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞:', err);
            setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞');
        } finally {
            setLoading(false);
            if (isRefresh) {
                setRefreshing(false);
            }
        }
    }, [orderId]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —ç–∫—Ä–∞–Ω–∞
    useFocusEffect(
        useCallback(() => {
            loadOrderDetails();
        }, [loadOrderDetails])
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ pull-to-refresh
    const handleRefresh = useCallback(() => {
        setRefreshing(true);
        loadOrderDetails(true);
    }, [loadOrderDetails]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    const handleCancelOrder = useCallback(async () => {
        if (!order || !canCancelOrder(order.status, user?.role || 'CLIENT')) {
            Alert.alert('–û—à–∏–±–∫–∞', '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å');
            return;
        }

        Alert.alert(
            '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ${formatOrderNumber(order.orderNumber)}?`,
            [
                { text: '–ù–µ—Ç', style: 'cancel' },
                {
                    text: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
                    style: 'destructive',
                    onPress: async () => {
                        try {
                            setCancelling(true);
                            await OrderApi.cancelMyOrder(orderId, '–û—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º');
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–ª–µ—Ä—Ç–∞
                            setToastConfig({
                                message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω',
                                type: 'success',
                                duration: 3000
                            });
                            loadOrderDetails();
                        } catch (err) {
                            Alert.alert('–û—à–∏–±–∫–∞', err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑');
                        } finally {
                            setCancelling(false);
                        }
                    }
                }
            ]
        );
    }, [order, orderId, loadOrderDetails]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    const handleDownloadInvoice = useCallback(async () => {
        if (!order || !orderId) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π');
            return;
        }

        try {
            setDownloadingInvoice(true);
            console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
            
            const result = await downloadInvoice(orderId);
            
            if (result.success) {
                Alert.alert('–£—Å–ø–µ—Ö', `–ù–∞–∫–ª–∞–¥–Ω–∞—è "${result.filename}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É`);
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', err);
            Alert.alert('–û—à–∏–±–∫–∞', err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é');
        } finally {
            setDownloadingInvoice(false);
        }
    }, [order, orderId, downloadInvoice]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –∑–∞–∫–∞–∑–∞
    const handleProcessOrder = useCallback(async () => {
        if (!order || !orderId) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
        }

        try {
            setProcessingOrder(true);
            console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞:', orderId);
            
            const result = await completeOrderStage(orderId, processingComment.trim() || undefined);
            
            if (result.success) {
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                const fullEmployeeName = `${user?.employee?.name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'} ${user?.employee?.position || ''}`.trim();
                const newStatus = user?.employee?.processingRole === 'PICKER' ? 'CONFIRMED' :
                               user?.employee?.processingRole === 'PACKER' ? 'PACKING_COMPLETED' : 'DELIVERED';

                const completedTempStep = {
                    id: `temp-completed-${Date.now()}`,
                    status: newStatus,
                    role: user?.employee?.processingRole,
                    roleLabel: user?.employee?.processingRole === 'PICKER' ? '–°–±–æ—Ä—â–∏–∫' :
                              user?.employee?.processingRole === 'PACKER' ? '–£–ø–∞–∫–æ–≤—â–∏–∫' : '–ö—É—Ä—å–µ—Ä',
                    stepType: 'completed',
                    employeeName: fullEmployeeName,
                    employeePosition: user?.employee?.position || '',
                    comment: processingComment.trim() || `${user?.employee?.processingRole === 'PICKER' ? '–°–±–æ—Ä–∫–∞' :
                             user?.employee?.processingRole === 'PACKER' ? '–£–ø–∞–∫–æ–≤–∫–∞' : '–î–æ—Å—Ç–∞–≤–∫–∞'} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`,
                    createdAt: new Date().toISOString(),
                    originalStatus: order?.status,
                    isTemporary: true
                };

                // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
                if (user?.employee?.processingRole === 'COURIER') {
                    console.log('OrderDetailsScreen: –∫—É—Ä—å–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É', {
                        orderId,
                        currentStatus: order?.status,
                        newStatus,
                        employeeName: fullEmployeeName
                    });
                }

                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —ç—Ç–∞–ø–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                setLocalOrderState(prevState => ({
                    assignedToId: prevState.assignedToId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
                    status: order?.status || null, // –°—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    lastAction: 'completed',
                    actionTimestamp: Date.now(),
                    temporarySteps: [...(prevState.temporarySteps || []), completedTempStep],
                    lastKnownHistoryLength: prevState.lastKnownHistoryLength
                }));

                console.log('‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', {
                    employeeId: user?.employee?.id,
                    employeeRole: user?.employee?.processingRole,
                    tempStep: completedTempStep
                });

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–ª–µ—Ä—Ç–∞
                setToastConfig({
                    message: '–≠—Ç–∞–ø –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                    type: 'success',
                    duration: 3000
                });
                setProcessingModalVisible(false);
                setProcessingComment('');
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ–Ω–µ
                console.log('OrderDetailsScreen: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –∫—É—Ä—å–µ—Ä–∞');

                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                setTimeout(() => {
                    console.log('OrderDetailsScreen: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã');
                    loadOrderDetails(true).then((result) => {
                        console.log('OrderDetailsScreen: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞', {
                            orderId,
                            success: !!result,
                            status: result?.status,
                            assignedToId: result?.assignedTo?.id
                        });
                    }).catch((error) => {
                        console.error('OrderDetailsScreen: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞', error);
                    });
                }, 1000);
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø –∑–∞–∫–∞–∑–∞');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', err);
            Alert.alert('–û—à–∏–±–∫–∞', err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø –∑–∞–∫–∞–∑–∞');
        } finally {
            setProcessingOrder(false);
        }
    }, [order, orderId, processingComment, completeOrderStage, loadOrderDetails]);

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    const handleOpenProcessingModal = useCallback(() => {
        setProcessingModalVisible(true);
        setProcessingComment('');
    }, []);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    const handleCloseProcessingModal = useCallback(() => {
        setProcessingModalVisible(false);
        setProcessingComment('');
    }, []);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–ª –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
    const hasEmployeeWorkedOnCurrentStatus = useMemo(() => {
        const currentEmployeeId = user?.employee?.id;
        if (!currentEmployeeId) return false;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –∑–∞–∫–∞–∑–∞
        const actualAssignedId = localOrderState.assignedToId !== null ? localOrderState.assignedToId : order?.assignedTo?.id;
        const actualStatus = localOrderState.status || order?.status;
        const employeeRole = user?.employee?.processingRole;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        const tempStepsForCurrentStatus = localOrderState.temporarySteps.filter(step =>
            step.role === employeeRole &&
            step.originalStatus === actualStatus &&
            step.employeeName?.includes(user?.employee?.name || '')
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        const historyStepsForCurrentStatus = order?.statusHistory?.filter(historyItem =>
            historyItem.comment &&
            (historyItem.comment.includes(user?.employee?.name || '') ||
             historyItem.comment.includes(user?.employee?.position || '')) &&
            historyItem.status === actualStatus
        ) || [];

        const hasWorked = tempStepsForCurrentStatus.length > 0 || historyStepsForCurrentStatus.length > 0;

        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∑–∞–∫–∞–∑–æ–º:', {
            employeeId: currentEmployeeId,
            employeeName: user?.employee?.name,
            employeeRole,
            currentStatus: actualStatus,
            tempStepsCount: tempStepsForCurrentStatus.length,
            historyStepsCount: historyStepsForCurrentStatus.length,
            hasWorked
        });

        return hasWorked;
    }, [user?.employee?.id, user?.employee?.name, user?.employee?.position, user?.employee?.processingRole, localOrderState.assignedToId, localOrderState.status, localOrderState.temporarySteps, order?.assignedTo?.id, order?.status, order?.statusHistory]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É –∏–∑ –¥—Ä—É–≥–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    const hasLocalCompleted = useSelector(state => selectHasLocalOrderAction(orderId, 'completed')(state));
    const hasLocalTaken = useSelector(state => selectHasLocalOrderAction(orderId, 'taken')(state));

    // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const employeeButtonLogic = useMemo(() => {
        const isEmployee = user?.role === 'EMPLOYEE';
        const isAdmin = user?.role === 'ADMIN';

        console.log('üéõÔ∏è employeeButtonLogic - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ:', {
            userRole: user?.role,
            isEmployee,
            isAdmin,
            hasLocalCompleted,
            hasLocalTaken,
            localOrderState: {
                assignedToId: localOrderState.assignedToId,
                lastAction: localOrderState.lastAction,
                tempStepsCount: localOrderState.temporarySteps.length
            },
            order: {
                assignedToId: order?.assignedTo?.id,
                status: order?.status
            }
        });

        if (!isEmployee && !isAdmin) {
            return {
                showTakeButton: false,
                showCompleteButton: false,
                canTakeOrder: false,
                canCompleteStage: false
            };
        }

        const currentEmployeeId = user?.employee?.id;
        const employeeRole = user?.employee?.processingRole; // –†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (PICKER, PACKER, COURIER)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –∑–∞–∫–∞–∑–∞
        const actualAssignedId = localOrderState.assignedToId !== null ? localOrderState.assignedToId : order?.assignedTo?.id;
        const actualStatus = localOrderState.status || order?.status;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        const isAssignedToMe = currentEmployeeId && actualAssignedId && currentEmployeeId === actualAssignedId;

        // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É, –Ω–æ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        if (localOrderState.lastAction === 'taken' && !isAssignedToMe && localOrderState.temporarySteps.length > 0) {
            // –í—Ä–µ–º–µ–Ω–Ω–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞–º
            const tempAssignedToMe = true;
            return {
                showTakeButton: false,
                showCompleteButton: tempAssignedToMe && ['PENDING', 'CONFIRMED', 'IN_DELIVERY'].includes(actualStatus),
                canTakeOrder: false,
                canCompleteStage: tempAssignedToMe,
                isAssignedToMe: tempAssignedToMe,
                employeeRole
            };
        }
        
        // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–∞–ø, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (localOrderState.lastAction === 'completed' || hasLocalCompleted) {
            console.log('üéØ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–∞–ø (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —ç–∫—Ä–∞–Ω–µ), —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞', {
                localCompleted: localOrderState.lastAction === 'completed',
                hasLocalCompleted
            });
            return {
                showTakeButton: false,
                showCompleteButton: false,
                canTakeOrder: false,
                canCompleteStage: false,
                isAssignedToMe: false,
                employeeRole
            };
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        let canTakeBasedOnRole = false;
        if (employeeRole === 'PICKER' && actualStatus === 'PENDING') {
            canTakeBasedOnRole = true; // –°–±–æ—Ä—â–∏–∫ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        } else if (employeeRole === 'PACKER' && actualStatus === 'CONFIRMED') {
            canTakeBasedOnRole = true; // –£–ø–∞–∫–æ–≤—â–∏–∫ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏
        } else if (employeeRole === 'COURIER' && actualStatus === 'IN_DELIVERY') {
            canTakeBasedOnRole = true; // –ö—É—Ä—å–µ—Ä –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        } else if (isAdmin) {
            // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∑—è—Ç—å –ª—é–±–æ–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ
            canTakeBasedOnRole = ['PENDING', 'CONFIRMED', 'IN_DELIVERY'].includes(actualStatus);
        }
        

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É
        // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–∫–∞–∑, –µ—Å–ª–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª —Å –Ω–∏–º –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
        const canTakeOrder = !isAssignedToMe && canTakeBasedOnRole && !hasEmployeeWorkedOnCurrentStatus && !hasLocalTaken;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –µ–º—É)
        const canCompleteStage = isAssignedToMe && ['PENDING', 'CONFIRMED', 'IN_DELIVERY'].includes(actualStatus);
        
        const result = {
            showTakeButton: canTakeOrder,
            showCompleteButton: canCompleteStage,
            canTakeOrder,
            canCompleteStage,
            isAssignedToMe,
            employeeRole
        };

        console.log('üéõÔ∏è employeeButtonLogic - —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
            canTakeOrder,
            canCompleteStage,
            isAssignedToMe,
            hasEmployeeWorkedOnCurrentStatus,
            showTakeButton: result.showTakeButton,
            showCompleteButton: result.showCompleteButton,
            employeeRole,
            currentStatus: actualStatus
        });

        return result;
    }, [user?.role, user?.employee?.id, user?.employee?.processingRole, order?.assignedTo?.id, order?.status, order?.statusHistory, localOrderState.lastAction, localOrderState.temporarySteps, hasEmployeeWorkedOnCurrentStatus, hasLocalCompleted, hasLocalTaken]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    const canDownloadInvoice = useMemo(() => {
        console.log('canDownloadInvoice: user —Ä–æ–ª—å -', user?.role);
        console.log('canDownloadInvoice: user –æ–±—ä–µ–∫—Ç -', user);
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        const hasAccess = user?.role === 'ADMIN' || user?.role === 'EMPLOYEE';
        console.log('canDownloadInvoice: hasAccess -', hasAccess);
        return hasAccess;
    }, [user?.role]);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞
    const renderOrderHeader = useMemo(() => {
        if (!order) return null;

        return (
            <View style={styles.headerContainer}>
                <View style={styles.headerGradient}>
                    <View style={styles.headerContent}>
                        <View style={styles.headerTop}>
                            <View style={styles.orderNumberContainer}>
                                <Text style={styles.orderNumber}>
                                    {formatOrderNumber(order.orderNumber)}
                                </Text>
                                <Text style={styles.orderDate}>
                                    {formatDate(order.createdAt)}
                                </Text>
                            </View>
                            <View style={[styles.statusBadge, { backgroundColor: ORDER_STATUS_COLORS[order.status] }]}>
                                <Icon name={ORDER_STATUS_ICONS[order.status]} size={16} color="#fff" />
                                <Text style={styles.statusText}>{ORDER_STATUS_LABELS[order.status]}</Text>
                            </View>
                        </View>

                        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
                        {['PENDING', 'CONFIRMED', 'IN_DELIVERY', 'DELIVERED'].includes(order.status) && (
                            <View style={styles.progressContainer}>
                                <View style={styles.progressBar}>
                                    <View
                                        style={[
                                            styles.progressFill,
                                            {
                                                width: (getOrderProgress(order.status) / 100) * 300, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                                backgroundColor: ORDER_STATUS_COLORS[order.status]
                                            }
                                        ]}
                                    />
                                </View>
                                <Text style={styles.progressText}>
                                    {getOrderProgress(order.status)}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                                </Text>
                            </View>
                        )}

                        <View style={styles.amountContainer}>
                            <View style={styles.amountInfo}>
                                <Text style={styles.amountLabel}>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞</Text>
                                <Text style={styles.amount}>{formatAmount(order.totalAmount)}</Text>
                            </View>
                            <View style={styles.amountIcon}>
                                <Icon name="payment" size={24} color="#fff" />
                            </View>
                        </View>
                    </View>
                </View>
            </View>
        );
    }, [order]);

    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    const renderDeliveryInfo = useMemo(() => {
        if (!order) return null;

        return (
            <View style={styles.modernCard}>
                <View style={styles.cardHeader}>
                    <Icon name="local-shipping" size={24} color="#667eea" />
                    <Text style={styles.cardTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</Text>
                </View>

                {order.deliveryAddress && (
                    <View style={styles.infoRow}>
                        <View style={styles.infoIconContainer}>
                            <Icon name="location-on" size={20} color="#667eea" />
                        </View>
                        <View style={styles.infoContent}>
                            <Text style={styles.infoLabel}>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</Text>
                            <Text style={styles.infoValue}>{order.deliveryAddress}</Text>
                        </View>
                    </View>
                )}

                {order.expectedDeliveryDate && (
                    <View style={styles.infoRow}>
                        <View style={styles.infoIconContainer}>
                            <Icon name="schedule" size={20} color="#667eea" />
                        </View>
                        <View style={styles.infoContent}>
                            <Text style={styles.infoLabel}>–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</Text>
                            <Text style={styles.infoValue}>
                                {new Date(order.expectedDeliveryDate).toLocaleDateString('ru-RU')}
                            </Text>
                        </View>
                    </View>
                )}

                {order.comment && (
                    <View style={styles.infoRow}>
                        <View style={styles.infoIconContainer}>
                            <Icon name="comment" size={20} color="#667eea" />
                        </View>
                        <View style={styles.infoContent}>
                            <Text style={styles.infoLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</Text>
                            <Text style={styles.infoValue}>{order.comment}</Text>
                        </View>
                    </View>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ */}
                {canViewProcessingHistory && order.assignedTo && (
                    <View style={styles.infoRow}>
                        <View style={styles.infoIconContainer}>
                            <Icon name="person" size={20} color="#667eea" />
                        </View>
                        <View style={styles.infoContent}>
                            <Text style={styles.infoLabel}>–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</Text>
                            <Text style={styles.infoValue}>{order.assignedTo.name}</Text>
                            {order.assignedTo.position && (
                                <Text style={styles.infoSubtext}>{order.assignedTo.position}</Text>
                            )}
                        </View>
                    </View>
                )}
            </View>
        );
    }, [order, canViewProcessingHistory]);

    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const renderOrderItems = useMemo(() => {
        console.log('renderOrderItems: order.items -', order?.items);
        console.log('renderOrderItems: order.orderItems -', order?.orderItems);
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        const items = order?.items || order?.orderItems || [];
        console.log('renderOrderItems: –∏—Ç–æ–≥–æ–≤—ã–µ items -', items);
        
        if (items.length > 0) {
            console.log('renderOrderItems: –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä -', items[0]);
            console.log('renderOrderItems: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ -', items[0]?.product?.images);
        }

        return (
            <View style={styles.modernCard}>
                <View style={styles.cardHeader}>
                    <Icon name="shopping-bag" size={24} color="#667eea" />
                    <Text style={styles.cardTitle}>
                        –¢–æ–≤–∞—Ä—ã ({items.length} –ø–æ–∑.)
                    </Text>
                </View>

                <View style={styles.itemsList}>
                    {items.map((item, index) => (
                    <View key={index} style={[
                        styles.itemContainer,
                        index === items.length - 1 && styles.lastItem
                    ]}>
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                        <View style={styles.imageContainer}>
                            {(() => {
                                const images = item.product?.images;
                                console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', images, '—Ç–∏–ø:', typeof images);
                                
                                let imageUrl = null;
                                if (images) {
                                    if (Array.isArray(images) && images.length > 0) {
                                        imageUrl = images[0];
                                    } else if (typeof images === 'string') {
                                        imageUrl = images;
                                    }
                                }
                                
                                console.log('imageUrl –∏—Å—Ö–æ–¥–Ω—ã–π:', imageUrl);
                                
                                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                                if (imageUrl && !imageUrl.startsWith('http')) {
                                    const baseUrl = 'http://192.168.1.226:5000';
                                    
                                    // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL
                                    imageUrl = imageUrl.replace(/\\/g, '/');
                                    console.log('imageUrl –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —Å–ª–µ—à–µ–π:', imageUrl);
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º /uploads/ –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                                    if (!imageUrl.startsWith('uploads/')) {
                                        imageUrl = `uploads/${imageUrl}`;
                                        console.log('imageUrl –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è uploads:', imageUrl);
                                    }
                                    
                                    imageUrl = imageUrl.startsWith('/') ? `${baseUrl}${imageUrl}` : `${baseUrl}/${imageUrl}`;
                                }
                                
                                console.log('–ò—Ç–æ–≥–æ–≤—ã–π imageUrl:', imageUrl);
                                
                                return imageUrl ? (
                                    <Image
                                        source={{ uri: imageUrl }}
                                        style={styles.itemImage}
                                        resizeMode="cover"
                                        onError={(error) => console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)}
                                        onLoad={() => console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', imageUrl)}
                                    />
                                ) : (
                                    <View style={styles.placeholderImage}>
                                        <Icon name="image" size={30} color="#ccc" />
                                    </View>
                                );
                            })()}
                        </View>

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                        <View style={styles.itemInfo}>
                            <Text style={styles.itemName} numberOfLines={2}>
                                {item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}
                            </Text>

                            {item.product?.supplier && (
                                <View style={styles.supplierContainer}>
                                    <Icon name="store" size={14} color="#999" />
                                    <Text style={styles.itemSupplier}>
                                        {item.product.supplier.companyName || item.product.supplier.name}
                                    </Text>
                                </View>
                            )}

                            <View style={styles.itemDetails}>
                                <View style={styles.quantityContainer}>
                                    <Text style={styles.quantityLabel}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</Text>
                                    <Text style={styles.itemQuantity}>
                                        {formatBoxesCount(item.quantity)}
                                    </Text>
                                </View>
                                <View style={styles.priceContainer}>
                                    <Text style={styles.priceLabel}>–¶–µ–Ω–∞ –∑–∞ –∫–æ—Ä–æ–±–∫—É:</Text>
                                    <Text style={styles.itemPrice}>
                                        {formatAmount(item.price)}
                                    </Text>
                                </View>
                            </View>

                            <View style={styles.totalContainer}>
                                <Text style={styles.totalLabel}>–ò—Ç–æ–≥–æ:</Text>
                                <Text style={styles.itemTotal}>
                                    {formatAmount(item.quantity * item.price)}
                                </Text>
                            </View>
                        </View>
                    </View>
                    ))}
                </View>
            </View>
        );
    }, [order?.items, order?.orderItems]);

    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π
    const renderActions = useMemo(() => {
        console.log('renderActions: order —Å—Ç–∞—Ç—É—Å -', order?.status);
        console.log('renderActions: user -', user);
        console.log('renderActions: user role -', user?.role);

        if (!order) return null;

        const showCancelButton = canCancelOrder(order.status, user?.role || 'CLIENT');
        console.log('renderActions: canCancelOrder result -', canCancelOrder(order.status, user?.role || 'CLIENT'));
        const showDownloadButton = canDownloadInvoice;
        const { showTakeButton, showCompleteButton, employeeRole } = employeeButtonLogic;
        
        console.log('renderActions: showCancelButton -', showCancelButton);
        console.log('renderActions: showDownloadButton -', showDownloadButton);
        console.log('renderActions: showTakeButton -', showTakeButton);
        console.log('renderActions: showCompleteButton -', showCompleteButton);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        console.log('renderActions: employeeButtonLogic —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
            showTakeButton,
            showCompleteButton,
            employeeRole
        });
        console.log('renderActions: user –¥–∞–Ω–Ω—ã–µ:', {
            role: user?.role,
            employeeId: user?.employee?.id,
            employeeName: user?.employee?.name,
            processingRole: user?.employee?.processingRole
        });
        console.log('renderActions: order –¥–∞–Ω–Ω—ã–µ:', {
            status: order?.status,
            assignedToId: order?.assignedTo?.id,
            assignedToName: order?.assignedTo?.name
        });

        if (!showCancelButton && !showDownloadButton && !showTakeButton && !showCompleteButton) {
            console.log('renderActions: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏');
            return null;
        }

        return (
            <View style={styles.actionsContainer}>
                {/* –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
                {showTakeButton && (
                    <TouchableOpacity
                        style={styles.processButton}
                        onPress={async () => {
                            try {
                                setTaking(true);
                                const res = await takeOrder(orderId, '–í–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É');
                                if (!res.success) throw new Error(res.error);

                                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
                                const fullEmployeeName = `${user?.employee?.name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'} ${user?.employee?.position || ''}`.trim();
                                const tempStep = {
                                    id: `temp-${Date.now()}`,
                                    status: user?.employee?.processingRole === 'PICKER' ? 'PICKING' :
                                           user?.employee?.processingRole === 'PACKER' ? 'PACKING' : 'IN_DELIVERY',
                                    role: user?.employee?.processingRole,
                                    roleLabel: user?.employee?.processingRole === 'PICKER' ? '–°–±–æ—Ä—â–∏–∫' :
                                              user?.employee?.processingRole === 'PACKER' ? '–£–ø–∞–∫–æ–≤—â–∏–∫' : '–ö—É—Ä—å–µ—Ä',
                                    stepType: 'started',
                                    employeeName: fullEmployeeName,
                                    employeePosition: user?.employee?.position || '',
                                    comment: `${fullEmployeeName} –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É`,
                                    createdAt: new Date().toISOString(),
                                    originalStatus: order?.status,
                                    isTemporary: true
                                };

                                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —ç—Ç–∞–ø–æ–º
                                setLocalOrderState(prevState => ({
                                    ...prevState,
                                    assignedToId: user?.employee?.id || null,
                                    status: order?.status || null,
                                    lastAction: 'taken',
                                    actionTimestamp: Date.now(),
                                    temporarySteps: [tempStep],
                                    lastKnownHistoryLength: prevState.lastKnownHistoryLength
                                }));

                                console.log('üéØ –ü–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É:', {
                                    assignedToId: user?.employee?.id,
                                    employeeRole: user?.employee?.processingRole,
                                    tempStep: tempStep
                                });

                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–ª–µ—Ä—Ç–∞
                                setToastConfig({
                                    message: '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
                                    type: 'success',
                                    duration: 3000
                                });
                                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
                                loadOrderDetails(true);
                            } catch (e) {
                                Alert.alert('–û—à–∏–±–∫–∞', e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑');
                            } finally {
                                setTaking(false);
                            }
                        }}
                        disabled={taking}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {taking ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="handshake" size={20} color="#fff" />
                                    <Text style={styles.processButtonText}>–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}
                
                {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø" –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
                {showCompleteButton && (
                    <TouchableOpacity
                        style={styles.processButton}
                        onPress={handleOpenProcessingModal}
                        disabled={processingOrder}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {processingOrder ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="check-circle" size={20} color="#fff" />
                                    <Text style={styles.processButtonText}>–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ */}
                {showDownloadButton && (
                    <TouchableOpacity
                        style={[styles.downloadButton, (showTakeButton || showCompleteButton) && styles.buttonSpacing]}
                        onPress={handleDownloadInvoice}
                        disabled={downloadingInvoice}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {downloadingInvoice ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="description" size={20} color="#fff" />
                                    <Text style={styles.downloadButtonText}>–°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ */}
                {console.log('renderActions: rendering cancel button, showCancelButton -', showCancelButton)}
                {showCancelButton && (
                    <TouchableOpacity
                        style={[styles.cancelButton, (showDownloadButton || showTakeButton || showCompleteButton) && styles.buttonSpacing]}
                        onPress={handleCancelOrder}
                        disabled={cancelling}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {cancelling ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="cancel" size={20} color="#fff" />
                                    <Text style={styles.cancelButtonText}>–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}
            </View>
        );
    }, [order?.status, cancelling, downloadingInvoice, processingOrder, taking, canDownloadInvoice, employeeButtonLogic, handleCancelOrder, handleDownloadInvoice, handleOpenProcessingModal]);

    // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
    const renderError = () => (
        <View style={styles.errorContainer}>
            <View style={styles.errorIconContainer}>
                <Icon name="error-outline" size={64} color="#EF5350" />
            </View>
            <Text style={styles.errorTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</Text>
            <Text style={styles.errorSubtitle}>{error}</Text>
            <TouchableOpacity
                style={styles.retryButton}
                onPress={() => {
                    loadOrderDetails();
                }}
                activeOpacity={0.8}
            >
                <Icon name="refresh" size={20} color="#fff" />
                <Text style={styles.retryButtonText}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</Text>
            </TouchableOpacity>
        </View>
    );

    // –†–µ–Ω–¥–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ —Å–∫–µ–ª–µ—Ç–æ–Ω–∞–º–∏
    if (loading && !refreshing) {
        return (
            <View style={styles.container}>
                <StatusBar barStyle="light-content" backgroundColor="#667eea" />
                <ScrollView style={styles.scrollContainer} contentContainerStyle={{ paddingBottom: 32 }}>
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <View style={styles.headerContainer}>
                        <View style={styles.headerGradient}>
                            <View style={styles.headerContent}>
                                <View style={styles.headerTop}>
                                    <View style={styles.orderNumberContainer}>
                                        <View style={{ height: 16, width: 120, backgroundColor: 'rgba(255,255,255,0.3)', borderRadius: 8, marginBottom: 8 }} />
                                        <View style={{ height: 12, width: 80, backgroundColor: 'rgba(255,255,255,0.2)', borderRadius: 6 }} />
                                    </View>
                                    <View style={{ height: 24, width: 100, backgroundColor: 'rgba(255,255,255,0.2)', borderRadius: 12 }} />
                                </View>
                                <View style={{ height: 6, backgroundColor: 'rgba(255,255,255,0.2)', borderRadius: 3, marginTop: 12 }} />
                            </View>
                        </View>
                    </View>

                    {/* –ü–∞—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫-—Å–∫–µ–ª–µ—Ç–æ–Ω–æ–≤ */}
                    {[1,2].map(i => (
                        <View key={i} style={styles.modernCard}>
                            <View style={{ height: 18, width: 160, backgroundColor: '#eee', borderRadius: 8, marginBottom: 16 }} />
                            <View style={{ height: 14, width: '80%', backgroundColor: '#eee', borderRadius: 6, marginBottom: 10 }} />
                            <View style={{ height: 14, width: '60%', backgroundColor: '#eee', borderRadius: 6, marginBottom: 10 }} />
                            <View style={{ height: 14, width: '70%', backgroundColor: '#eee', borderRadius: 6 }} />
                        </View>
                    ))}
                </ScrollView>
            </View>
        );
    }

    // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
    if (error && !loading) {
        return (
            <View style={styles.container}>
                <StatusBar barStyle="light-content" backgroundColor="#667eea" />
                {renderError()}
            </View>
        );
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
    return (
        <View style={styles.container}>
            <StatusBar barStyle="light-content" backgroundColor="#667eea" />

            <Animated.View
                style={[
                    styles.animatedContainer,
                    {
                        opacity: fadeAnim,
                        transform: [{ translateY: slideAnim }]
                    }
                ]}
            >
                <ScrollView
                    style={styles.scrollContainer}
                    contentContainerStyle={styles.scrollContent}
                    showsVerticalScrollIndicator={false}
                    refreshControl={
                        <RefreshControl
                            refreshing={refreshing}
                            onRefresh={handleRefresh}
                            colors={['#667eea']}
                            tintColor="#667eea"
                            progressBackgroundColor="#fff"
                        />
                    }
                >
                    {order && (
                        <>
                            {renderOrderHeader}
                            {renderDeliveryInfo}
                            {renderOrderItems}
                            {renderProcessingHistory}
                            {renderActions}
                        </>
                    )}
                </ScrollView>
            </Animated.View>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ */}
            <Modal
                visible={processingModalVisible}
                animationType="slide"
                transparent={true}
                onRequestClose={handleCloseProcessingModal}
            >
                <View style={styles.modalOverlay}>
                    <View style={styles.modalContent}>
                        <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</Text>
                            <Text style={styles.modalSubtitle}>
                                {order?.orderNumber ? `–ó–∞–∫–∞–∑ ${formatOrderNumber(order.orderNumber)}` : ''}
                            </Text>
                        </View>

                        <View style={styles.modalBody}>
                            <View style={styles.currentStatusContainer}>
                                <Text style={styles.currentStatusLabel}>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</Text>
                                <Text style={styles.currentStatusText}>
                                    {order ? ORDER_STATUS_LABELS[order.status] : ''}
                                </Text>
                            </View>

                            <View style={styles.infoContainer}>
                                <Text style={styles.infoText}>
                                    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø" –∑–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
                                </Text>
                            </View>

                            <View style={styles.commentContainer}>
                                <Text style={styles.commentLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</Text>
                                <TextInput
                                    style={styles.commentInput}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —ç—Ç–∞–ø–∞..."
                                    value={processingComment}
                                    onChangeText={setProcessingComment}
                                    multiline
                                    numberOfLines={3}
                                    maxLength={500}
                                />
                                <Text style={styles.commentCounter}>
                                    {processingComment.length}/500
                                </Text>
                            </View>
                        </View>

                        <View style={styles.modalActions}>
                            <TouchableOpacity
                                style={styles.modalCancelButton}
                                onPress={handleCloseProcessingModal}
                                disabled={processingOrder}
                            >
                                <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                            </TouchableOpacity>

                            <TouchableOpacity
                                style={[
                                    styles.modalConfirmButton,
                                    processingOrder && styles.modalButtonDisabled
                                ]}
                                onPress={handleProcessOrder}
                                disabled={processingOrder}
                            >
                                {processingOrder ? (
                                    <View style={styles.buttonLoader}>
                                        <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                        <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                        <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    </View>
                                ) : (
                                    <Text style={styles.modalConfirmButtonText}>–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø</Text>
                                )}
                            </TouchableOpacity>
                        </View>
                    </View>
                </View>
            </Modal>

            {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
            {toastConfig && (
                <ToastSimple
                    message={toastConfig.message}
                    type={toastConfig.type}
                    duration={toastConfig.duration}
                    onHide={() => setToastConfig(null)}
                />
            )}
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#667eea',
    },
    animatedContainer: {
        flex: 1,
    },
    loadingContainer: {
        flex: 1,
        backgroundColor: '#667eea',
    },
    loadingContent: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 32,
    },
    loadingText: {
        marginTop: 16,
        fontSize: 16,
        color: '#fff',
        fontWeight: '500',
    },
    scrollContainer: {
        flex: 1,
    },
    scrollContent: {
        paddingBottom: 32,
    },

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    headerContainer: {
        marginBottom: 20,
    },
    headerGradient: {
        backgroundColor: '#667eea',
        paddingTop: 16,
        paddingBottom: 24,
        paddingHorizontal: 20,
        borderBottomLeftRadius: 24,
        borderBottomRightRadius: 24,
        shadowColor: '#667eea',
        shadowOffset: { width: 0, height: 8 },
        shadowOpacity: 0.3,
        shadowRadius: 16,
        elevation: 12,
    },
    headerContent: {
        gap: 16,
    },
    headerTop: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'flex-start',
    },
    orderNumberContainer: {
        flex: 1,
    },
    orderNumber: {
        fontSize: 28,
        fontWeight: '800',
        color: '#fff',
        marginBottom: 4,
    },
    orderDate: {
        fontSize: 14,
        color: 'rgba(255, 255, 255, 0.8)',
        fontWeight: '500',
    },
    statusBadge: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 8,
        borderRadius: 20,
        gap: 6,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 4,
        elevation: 4,
    },
    statusText: {
        fontSize: 12,
        fontWeight: '700',
        color: '#fff',
        textTransform: 'uppercase',
        letterSpacing: 0.5,
    },
    progressContainer: {
        gap: 8,
    },
    progressBar: {
        height: 6,
        backgroundColor: 'rgba(255, 255, 255, 0.3)',
        borderRadius: 3,
        overflow: 'hidden',
    },
    progressFill: {
        height: '100%',
        borderRadius: 3,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.2,
        shadowRadius: 2,
        elevation: 2,
    },
    progressText: {
        fontSize: 12,
        color: 'rgba(255, 255, 255, 0.9)',
        fontWeight: '600',
        textAlign: 'center',
    },
    amountContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: 'rgba(255, 255, 255, 0.15)',
        paddingHorizontal: 20,
        paddingVertical: 16,
        borderRadius: 16,
    },
    amountInfo: {
        flex: 1,
    },
    amountLabel: {
        fontSize: 14,
        color: 'rgba(255, 255, 255, 0.8)',
        fontWeight: '500',
        marginBottom: 4,
    },
    amount: {
        fontSize: 24,
        fontWeight: '800',
        color: '#fff',
    },
    amountIcon: {
        width: 48,
        height: 48,
        backgroundColor: 'rgba(255, 255, 255, 0.2)',
        borderRadius: 24,
        justifyContent: 'center',
        alignItems: 'center',
    },

    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    modernCard: {
        backgroundColor: '#fff',
        marginHorizontal: 20,
        marginBottom: 20,
        borderRadius: 20,
        padding: 24,
        shadowColor: '#667eea',
        shadowOffset: { width: 0, height: 8 },
        shadowOpacity: 0.15,
        shadowRadius: 20,
        elevation: 10,
    },
    cardHeader: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 20,
        gap: 12,
    },
    cardTitle: {
        fontSize: 20,
        fontWeight: '700',
        color: '#2d3748',
        flex: 1,
    },

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    infoRow: {
        flexDirection: 'row',
        alignItems: 'flex-start',
        marginBottom: 16,
        gap: 12,
    },
    infoIconContainer: {
        width: 32,
        height: 32,
        backgroundColor: '#f7fafc',
        borderRadius: 16,
        justifyContent: 'center',
        alignItems: 'center',
    },
    infoContent: {
        flex: 1,
    },
    infoLabel: {
        fontSize: 12,
        color: '#718096',
        fontWeight: '600',
        marginBottom: 4,
        textTransform: 'uppercase',
        letterSpacing: 0.5,
    },
    infoValue: {
        fontSize: 16,
        color: '#2d3748',
        lineHeight: 22,
        fontWeight: '500',
    },
    infoSubtext: {
        fontSize: 12,
        color: '#718096',
        marginTop: 2,
    },

    // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    itemsList: {
        gap: 0,
    },
    itemContainer: {
        flexDirection: 'row',
        paddingVertical: 16,
        borderBottomWidth: 1,
        borderBottomColor: '#f1f5f9',
        gap: 16,
    },
    lastItem: {
        borderBottomWidth: 0,
    },
    imageContainer: {
        width: 80,
        height: 80,
        borderRadius: 16,
        overflow: 'hidden',
        backgroundColor: '#f8f9fa',
    },
    itemImage: {
        width: '100%',
        height: '100%',
    },
    placeholderImage: {
        width: '100%',
        height: '100%',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f1f5f9',
    },
    itemInfo: {
        flex: 1,
        gap: 8,
    },
    itemName: {
        fontSize: 16,
        fontWeight: '700',
        color: '#2d3748',
        lineHeight: 22,
    },
    supplierContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 6,
    },
    itemSupplier: {
        fontSize: 12,
        color: '#718096',
        fontWeight: '500',
    },
    itemDetails: {
        gap: 4,
    },
    quantityContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    quantityLabel: {
        fontSize: 14,
        color: '#718096',
        fontWeight: '500',
    },
    itemQuantity: {
        fontSize: 14,
        color: '#2d3748',
        fontWeight: '600',
    },
    priceContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    priceLabel: {
        fontSize: 14,
        color: '#718096',
        fontWeight: '500',
    },
    itemPrice: {
        fontSize: 14,
        color: '#2d3748',
        fontWeight: '600',
    },
    totalContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingTop: 8,
        borderTopWidth: 1,
        borderTopColor: '#f1f5f9',
    },
    totalLabel: {
        fontSize: 16,
        color: '#4a5568',
        fontWeight: '600',
    },
    itemTotal: {
        fontSize: 18,
        fontWeight: '800',
        color: '#667eea',
    },

    // –î–µ–π—Å—Ç–≤–∏—è
    actionsContainer: {
        marginHorizontal: 20,
        marginBottom: 20,
    },
    downloadButton: {
        backgroundColor: '#667eea',
        borderRadius: 16,
        overflow: 'hidden',
        shadowColor: '#667eea',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 6,
    },
    processButton: {
        backgroundColor: '#4CAF50',
        borderRadius: 16,
        overflow: 'hidden',
        shadowColor: '#4CAF50',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 6,
    },
    cancelButton: {
        backgroundColor: '#EF5350',
        borderRadius: 16,
        overflow: 'hidden',
        shadowColor: '#EF5350',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 6,
    },
    buttonSpacing: {
        marginTop: 12,
    },
    buttonContent: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: 16,
        gap: 8,
    },
    downloadButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '700',
        letterSpacing: 0.5,
    },
    processButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '700',
        letterSpacing: 0.5,
    },
    cancelButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '700',
        letterSpacing: 0.5,
    },

    // –û—à–∏–±–∫–∞
    errorContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 32,
        backgroundColor: '#667eea',
    },
    errorIconContainer: {
        width: 120,
        height: 120,
        backgroundColor: '#fff',
        borderRadius: 60,
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 24,
        shadowColor: '#EF5350',
        shadowOffset: { width: 0, height: 8 },
        shadowOpacity: 0.15,
        shadowRadius: 20,
        elevation: 10,
    },
    errorTitle: {
        fontSize: 24,
        fontWeight: '700',
        color: '#fff',
        marginBottom: 12,
        textAlign: 'center',
    },
    errorSubtitle: {
        fontSize: 16,
        color: 'rgba(255, 255, 255, 0.8)',
        textAlign: 'center',
        lineHeight: 22,
        marginBottom: 32,
    },
    retryButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#fff',
        paddingHorizontal: 32,
        paddingVertical: 16,
        borderRadius: 16,
        gap: 8,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 8,
        elevation: 6,
    },
    retryButtonText: {
        color: '#667eea',
        fontSize: 16,
        fontWeight: '700',
    },

    // –°—Ç–∏–ª–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processingStepsContainer: {
        gap: 16,
    },
    processingStep: {
        paddingBottom: 16,
        borderBottomWidth: 1,
        borderBottomColor: '#f1f5f9',
    },
    lastProcessingStep: {
        borderBottomWidth: 0,
        paddingBottom: 0,
    },
    stepHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'flex-start',
        marginBottom: 12,
    },
    stepRole: {
        flex: 1,
        gap: 8,
    },
    roleBadge: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 16,
        gap: 6,
        alignSelf: 'flex-start',
    },
    roleLabel: {
        fontSize: 12,
        fontWeight: '700',
        color: '#fff',
        textTransform: 'uppercase',
        letterSpacing: 0.5,
    },
    stepStatus: {
        fontSize: 14,
        fontWeight: '600',
        color: '#2d3748',
    },
    stepDate: {
        fontSize: 12,
        color: '#718096',
        fontWeight: '500',
    },
    stepEmployee: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 8,
        marginBottom: 8,
    },
    employeeInfo: {
        flex: 1,
    },
    employeeName: {
        fontSize: 14,
        fontWeight: '600',
        color: '#2d3748',
        marginBottom: 2,
    },
    employeePosition: {
        fontSize: 12,
        color: '#718096',
    },
    stepComment: {
        flexDirection: 'row',
        alignItems: 'flex-start',
        gap: 6,
        paddingTop: 8,
        borderTopWidth: 1,
        borderTopColor: '#f1f5f9',
    },
    commentText: {
        flex: 1,
        fontSize: 12,
        color: '#718096',
        fontStyle: 'italic',
        lineHeight: 16,
    },
    virtualStep: {
        opacity: 0.8,
        backgroundColor: '#f8f9fa',
        borderRadius: 8,
        padding: 12,
    },
    virtualComment: {
        fontStyle: 'normal',
        color: '#6b7280',
    },
    temporaryStep: {
        backgroundColor: '#e8f5e8',
        borderLeftWidth: 4,
        borderLeftColor: '#4CAF50',
        borderRadius: 8,
        padding: 12,
        opacity: 0.9,
    },

    // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    buttonLoader: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        gap: 4,
    },
    buttonLoaderDot: {
        width: 8,
        height: 8,
        borderRadius: 4,
    },

    // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    modalOverlay: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    modalContent: {
        backgroundColor: '#fff',
        borderRadius: 16,
        width: '100%',
        maxWidth: 500,
        maxHeight: '80%',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 8,
        elevation: 8,
    },
    modalHeader: {
        padding: 20,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',
        alignItems: 'center',
    },
    modalTitle: {
        fontSize: 18,
        fontWeight: '700',
        color: '#1a1a1a',
        marginBottom: 4,
        textAlign: 'center',
    },
    modalSubtitle: {
        fontSize: 14,
        color: '#666',
        textAlign: 'center',
    },
    modalBody: {
        maxHeight: 400,
        padding: 20,
    },
    currentStatusContainer: {
        marginBottom: 20,
        padding: 12,
        backgroundColor: '#f8f9fa',
        borderRadius: 8,
    },
    currentStatusLabel: {
        fontSize: 12,
        color: '#666',
        marginBottom: 4,
        fontWeight: '600',
        textTransform: 'uppercase',
    },
    currentStatusText: {
        fontSize: 16,
        color: '#1a1a1a',
        fontWeight: '600',
    },
    infoContainer: {
        backgroundColor: '#f0f2ff',
        padding: 12,
        borderRadius: 8,
        borderLeftWidth: 4,
        borderLeftColor: '#667eea',
        marginBottom: 20,
    },
    infoText: {
        fontSize: 14,
        color: '#1a1a1a',
        lineHeight: 20,
    },
    commentContainer: {
        marginBottom: 20,
    },
    commentLabel: {
        fontSize: 14,
        color: '#1a1a1a',
        marginBottom: 8,
        fontWeight: '600',
    },
    commentInput: {
        borderWidth: 1,
        borderColor: '#e0e0e0',
        borderRadius: 8,
        padding: 12,
        fontSize: 14,
        color: '#1a1a1a',
        backgroundColor: '#fff',
        textAlignVertical: 'top',
        minHeight: 80,
    },
    commentCounter: {
        fontSize: 12,
        color: '#999',
        textAlign: 'right',
        marginTop: 4,
    },
    modalActions: {
        flexDirection: 'row',
        padding: 20,
        borderTopWidth: 1,
        borderTopColor: '#f0f0f0',
        gap: 12,
    },
    modalCancelButton: {
        flex: 1,
        padding: 12,
        borderRadius: 8,
        backgroundColor: '#f8f9fa',
        borderWidth: 1,
        borderColor: '#e0e0e0',
        alignItems: 'center',
    },
    modalCancelButtonText: {
        fontSize: 14,
        color: '#666',
        fontWeight: '600',
    },
    modalConfirmButton: {
        flex: 1,
        padding: 12,
        borderRadius: 8,
        backgroundColor: '#4CAF50',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: 44,
    },
    modalConfirmButtonText: {
        fontSize: 14,
        color: '#fff',
        fontWeight: '600',
    },
    modalButtonDisabled: {
        backgroundColor: '#ccc',
        opacity: 0.6,
    },
});