import React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';
import { View, ScrollView, RefreshControl, Animated, Alert, StatusBar, TouchableOpacity, Text, Modal, TextInput } from 'react-native';
import { useRoute, useNavigation, useFocusEffect } from '@react-navigation/native';
import { useDispatch, useSelector } from 'react-redux';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { OrderApi } from '@entities/order';
import { useOrders } from '@entities/order';
import { useAuth } from '@entities/auth/hooks/useAuth';
import { selectHasLocalOrderAction, selectLocalOrderActions } from '@entities/order';
import { clearLocalOrderAction, setLocalOrderAction } from '@entities/order/model/slice';
import { CONSTANTS } from '@entities/order/lib/constants';
import { ToastSimple } from '@shared/ui/Toast/ui/ToastSimple';

// –ò–º–ø–æ—Ä—Ç—ã –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç
import { useOrderDetails } from '@shared/hooks/useOrderDetails';
import { canCancelOrder, canDownloadInvoice, canViewProcessingHistory } from '@shared/lib/orderUtils';
import { EMPLOYEE_ROLES, EMPLOYEE_ROLE_LABELS, ORDER_STATUS_LABELS } from '@shared/lib/orderConstants';
import { createOrderDetailsStyles } from '@shared/ui/OrderDetailsStyles';
import { OrderHeader } from '@shared/ui/OrderHeader/ui/OrderHeader';
import { DeliveryInfo } from '@shared/ui/DeliveryInfo/ui/DeliveryInfo';
import { OrderItems } from '@shared/ui/OrderItems/ui/OrderItems';
import { OrderProcessingHistory } from '@shared/ui/OrderProcessingHistory/ui/OrderProcessingHistory';
import { OrderLoadingState, OrderErrorState } from '@shared/ui/OrderLoadingState/ui/OrderLoadingState';

const styles = createOrderDetailsStyles();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
const canEmployeeTakeOrder = (employeeRole, status, isAdmin = false) => {
    if (employeeRole === 'PICKER' && status === 'PENDING') return true;
    if (employeeRole === 'PACKER') return false; // PACKER –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã
    if (employeeRole === 'COURIER' && status === 'IN_DELIVERY') return true;
    if (isAdmin) return ['PENDING', 'CONFIRMED', 'IN_DELIVERY'].includes(status);
    return false;
};

const isOrderAssignedToEmployee = (employeeId, assignedId, hasLocalReleased) => {
    return employeeId && assignedId && employeeId === assignedId && !hasLocalReleased;
};

const shouldShowWorkButtons = (isAssignedToMe, actualStatus) => {
    return isAssignedToMe && ['PENDING', 'CONFIRMED', 'IN_DELIVERY'].includes(actualStatus);
};

export const OrderDetailsEmployeeScreen = () => {
    const route = useRoute();
    const navigation = useNavigation();
    const { orderId } = route.params || {};

    // –•—É–∫–∏
    const { currentUser: user } = useAuth();
    const { downloadInvoice, completeOrderStage, takeOrder, releaseOrder } = useOrders();
    const dispatch = useDispatch();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [taking, setTaking] = useState(false);
    const [releasing, setReleasing] = useState(false);
    const [downloadingInvoice, setDownloadingInvoice] = useState(false);
    const [processingModalVisible, setProcessingModalVisible] = useState(false);
    const [processingComment, setProcessingComment] = useState('');
    const [processingOrder, setProcessingOrder] = useState(false);
    const [toastConfig, setToastConfig] = useState(null);

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    const fadeAnim = useRef(new Animated.Value(0)).current;
    const slideAnim = useRef(new Animated.Value(30)).current;

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è localOrderState —Å Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    useEffect(() => {
        if (hasLocalReleased && localOrderState && localOrderState.lastAction !== 'released') {
            setLocalOrderState(prevState => ({
                ...prevState,
                lastAction: 'released',
                actionTimestamp: Date.now()
            }));
        }
    }, [hasLocalReleased, localOrderState?.lastAction]);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    const {
        order,
        loading,
        refreshing,
        error,
        loadOrderDetails,
        refreshOrderDetails,
        setOrder
    } = useOrderDetails(orderId);

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const [localOrderState, setLocalOrderState] = useState({
        assignedToId: null,
        status: null,
        lastAction: null, // 'taken' | 'completed' | null
        actionTimestamp: null,
        temporarySteps: [] // –ú–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
    useEffect(() => {
        if (order) {
            setLocalOrderState(prevState => {
                // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º assignedToId, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
                const newState = {
                    ...prevState,
                    // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º assignedToId –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    assignedToId: prevState.assignedToId !== null ? prevState.assignedToId : (order.assignedTo?.id || null),
                    status: order.status,
                    lastKnownHistoryLength: order?.statusHistory?.length || 0
                };

                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', {
                    prevAssignedToId: prevState.assignedToId,
                    orderAssignedToId: order.assignedTo?.id,
                    newAssignedToId: newState.assignedToId,
                    prevLastAction: prevState.lastAction,
                    prevStatus: prevState.status,
                    orderStatus: order.status
                });

                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
                const hasDataChanged = prevState.assignedToId !== newState.assignedToId ||
                                      prevState.status !== newState.status ||
                                      (prevState.lastKnownHistoryLength !== (order?.statusHistory?.length || 0));

                if (hasDataChanged) {
                    const historyLengthChanged = prevState.lastKnownHistoryLength !== (order?.statusHistory?.length || 0);

                    if (historyLengthChanged) {
                        if ((order?.statusHistory?.length || 0) > prevState.lastKnownHistoryLength) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ –Ω–∞—à–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
                            const isOurAction = prevState.lastAction === 'completed' || prevState.lastAction === 'taken' || prevState.lastAction === 'released';
                            const isRecentAction = prevState.actionTimestamp && (Date.now() - prevState.actionTimestamp) < 5000; // 5 —Å–µ–∫—É–Ω–¥

                            if (!isOurAction || !isRecentAction) {
                                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                                newState.lastAction = null;
                                newState.actionTimestamp = null;
                                newState.assignedToId = order.assignedTo?.id || null; // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                                newState.temporarySteps = [];

                                // –û—á–∏—â–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                                dispatch(clearLocalOrderAction({ orderId }));

                                // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ released –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è true,
                                // —á—Ç–æ–±—ã –∑–∞–∫–∞–∑ –æ—Å—Ç–∞–≤–∞–ª—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
                                // –§–ª–∞–≥ released —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É
                            }
                        }
                    }
                }

                return newState;
            });
        }
    }, [order?.assignedTo?.id, order?.status, order?.statusHistory?.length, orderId, dispatch]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —ç–∫—Ä–∞–Ω–∞
    useFocusEffect(
        useCallback(() => {
            loadOrderDetails();
        }, [loadOrderDetails])
    );

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞
    useEffect(() => {
        if (order && !loading) {
            Animated.parallel([
                Animated.timing(fadeAnim, {
                    toValue: 1,
                    duration: 500,
                    useNativeDriver: true,
                }),
                Animated.timing(slideAnim, {
                    toValue: 0,
                    duration: 500,
                    useNativeDriver: true,
                })
            ]).start();
        }
    }, [order, loading, fadeAnim, slideAnim]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–ª –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
    const hasEmployeeWorkedOnCurrentStatus = useMemo(() => {
        const currentEmployeeId = user?.employee?.id;
        if (!currentEmployeeId) return false;

        const actualAssignedId = localOrderState.assignedToId !== null ? localOrderState.assignedToId : order?.assignedTo?.id;
        const actualStatus = localOrderState.status || order?.status;
        const employeeRole = user?.employee?.processingRole;

        console.log('üîç hasEmployeeWorkedOnCurrentStatus: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', {
            currentEmployeeId,
            actualStatus,
            employeeRole,
            localOrderStateStatus: localOrderState.status,
            orderStatus: order?.status,
            temporaryStepsLength: localOrderState.temporarySteps.length,
            statusHistoryLength: order?.statusHistory?.length || 0,
            userName: user?.employee?.name,
            userPosition: user?.employee?.position
        });

        const tempStepsForCurrentStatus = localOrderState.temporarySteps.filter(step => {
            const matches = step.role === employeeRole &&
                           step.originalStatus === actualStatus &&
                           step.employeeName?.includes(user?.employee?.name || '');
            if (matches) {
                console.log('üéØ –ù–∞–π–¥–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–≥:', step);
            }
            return matches;
        });

        const historyStepsForCurrentStatus = order?.statusHistory?.filter(historyItem => {
            const matches = historyItem.comment &&
                           (historyItem.comment.includes(user?.employee?.name || '') ||
                            historyItem.comment.includes(user?.employee?.position || '')) &&
                           historyItem.status === actualStatus &&
                           !historyItem.comment.includes('—Å–Ω—è—Ç —Å —Ä–∞–±–æ—Ç—ã'); // –ò—Å–∫–ª—é—á–∞–µ–º —à–∞–≥–∏ —Å–Ω—è—Ç–∏—è —Å —Ä–∞–±–æ—Ç—ã
            if (matches) {
                console.log('üéØ –ù–∞–π–¥–µ–Ω —à–∞–≥ –≤ –∏—Å—Ç–æ—Ä–∏–∏:', historyItem);
            }
            return matches;
        }) || [];

        console.log('‚úÖ hasEmployeeWorkedOnCurrentStatus: —Ä–µ–∑—É–ª—å—Ç–∞—Ç', {
            tempStepsCount: tempStepsForCurrentStatus.length,
            historyStepsCount: historyStepsForCurrentStatus.length,
            result: tempStepsForCurrentStatus.length > 0 || historyStepsForCurrentStatus.length > 0
        });

        return tempStepsForCurrentStatus.length > 0 || historyStepsForCurrentStatus.length > 0;
    }, [user?.employee?.id, user?.employee?.name, user?.employee?.position, user?.employee?.processingRole, localOrderState.assignedToId, localOrderState.status, localOrderState.temporarySteps, order?.assignedTo?.id, order?.status, order?.statusHistory]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const hasLocalCompleted = useSelector(state => selectHasLocalOrderAction(orderId, 'completed')(state));
    const hasLocalTaken = useSelector(state => selectHasLocalOrderAction(orderId, 'taken')(state));
    const hasLocalReleased = useSelector(state => selectHasLocalOrderAction(orderId, 'released')(state));

    console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:', {
        orderId,
        hasLocalReleased,
        hasLocalTaken,
        hasLocalCompleted,
        localOrderActions: useSelector(selectLocalOrderActions)
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–∑—è—Ç–∏—è
    const isOrderAvailable = useMemo(() => {
        // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É
        if (order?.status && CONSTANTS.COMPLETED_STATUSES.includes(order.status)) {
            return false;
        }

        const notAssigned = !order?.assignedTo?.id;
        const wasReleased = hasLocalReleased;
        const wasTakenButNotReleased = hasLocalTaken && !hasLocalReleased;

        return notAssigned || wasReleased || wasTakenButNotReleased;
    }, [order?.assignedTo?.id, order?.status, hasLocalTaken, hasLocalReleased]);

    // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const employeeButtonLogic = useMemo(() => {
        const isEmployee = user?.role === 'EMPLOYEE';
        const isAdmin = user?.role === 'ADMIN';

        if (!isEmployee && !isAdmin) {
            return {
                showTakeButton: false,
                showCompleteButton: false,
                showReleaseButton: false,
                canTakeOrder: false,
                canCompleteStage: false,
                canReleaseOrder: false
            };
        }

        const currentEmployeeId = user?.employee?.id;
        const employeeRole = user?.employee?.processingRole;

        // –ü–æ—Å–ª–µ —Å–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const actualAssignedId = localOrderState.assignedToId !== null ? localOrderState.assignedToId :
                                (localOrderState.lastAction === 'released' ? null : order?.assignedTo?.id);
        const actualStatus = localOrderState.status || order?.status;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
        const isOrderCompleted = actualStatus && CONSTANTS.COMPLETED_STATUSES.includes(actualStatus);
        const isAlreadyProcessedByMe = localOrderState.lastAction === 'completed' && localOrderState.status;

        if (isOrderCompleted || isAlreadyProcessedByMe) {
            return {
                showTakeButton: false,
                showCompleteButton: false,
                showReleaseButton: false,
                canTakeOrder: false,
                canCompleteStage: false,
                canReleaseOrder: false
            };
        }

        const isAssignedToMe = isOrderAssignedToEmployee(currentEmployeeId, actualAssignedId, hasLocalReleased);

        // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É
        if (localOrderState.lastAction === 'taken' && !isAssignedToMe && localOrderState.temporarySteps.length > 0 && !hasLocalReleased) {
            return {
                showTakeButton: false,
                showCompleteButton: shouldShowWorkButtons(true, actualStatus),
                showReleaseButton: true,
                canTakeOrder: false,
                canCompleteStage: true,
                canReleaseOrder: true
            };
        }

        // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–∞–ø
        if (localOrderState.lastAction === 'completed' || hasLocalCompleted) {
            return {
                showTakeButton: false,
                showCompleteButton: false,
                showReleaseButton: false,
                canTakeOrder: false,
                canCompleteStage: false,
                canReleaseOrder: false
            };
        }

        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª —Å–Ω—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
        if (hasLocalReleased || localOrderState.lastAction === 'released') {
            const canTakeBasedOnRole = canEmployeeTakeOrder(employeeRole, actualStatus, isAdmin);
            const canTakeOrder = canTakeBasedOnRole && !hasEmployeeWorkedOnCurrentStatus;

            return {
                showTakeButton: canTakeOrder,
                showCompleteButton: false,
                showReleaseButton: false,
                canTakeOrder,
                canCompleteStage: false,
                canReleaseOrder: false
            };
        }

        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–æ–º
        if (isAssignedToMe) {
            return {
                showTakeButton: false,
                showCompleteButton: shouldShowWorkButtons(isAssignedToMe, actualStatus),
                showReleaseButton: true,
                canTakeOrder: false,
                canCompleteStage: true,
                canReleaseOrder: true
            };
        }

        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑—è—Ç–∏—è
        if (isOrderAvailable) {
            const canTakeBasedOnRole = canEmployeeTakeOrder(employeeRole, actualStatus, isAdmin);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            const hasEmployeeReleasedOrder = order?.statusHistory?.some(historyItem =>
                historyItem.comment &&
                historyItem.comment.includes(user?.employee?.name || '') &&
                historyItem.comment.includes('—Å–Ω—è—Ç —Å —Ä–∞–±–æ—Ç—ã')
            ) || false;

            const canTakeAgainAfterRelease = localOrderState.lastAction === 'released' &&
                                            localOrderState.actionTimestamp &&
                                            (Date.now() - localOrderState.actionTimestamp) < 30000;

            const canTakeOrder = !isAssignedToMe && canTakeBasedOnRole &&
                                (!hasEmployeeWorkedOnCurrentStatus || canTakeAgainAfterRelease || hasEmployeeReleasedOrder);

            return {
                showTakeButton: canTakeOrder && (!isAssignedToMe || hasLocalReleased),
                showCompleteButton: false,
                showReleaseButton: false,
                canTakeOrder,
                canCompleteStage: false,
                canReleaseOrder: false
            };
        }

        return {
            showTakeButton: false,
            showCompleteButton: false,
            showReleaseButton: false,
            canTakeOrder: false,
            canCompleteStage: false,
            canReleaseOrder: false
        };
    }, [user?.role, user?.employee?.id, user?.employee?.processingRole, order?.assignedTo?.id, order?.status, order?.statusHistory, localOrderState.lastAction, localOrderState.temporarySteps, localOrderState.actionTimestamp, hasEmployeeWorkedOnCurrentStatus, hasLocalCompleted, hasLocalTaken, hasLocalReleased, isOrderAvailable]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É
    const handleTakeOrder = useCallback(async () => {
        try {
            setTaking(true);
            const res = await takeOrder(orderId, '–í–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É');
            if (!res.success) throw new Error(res.error);

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ç–∞–ø
            const fullEmployeeName = `${user?.employee?.name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'} ${user?.employee?.position || ''}`.trim();
            const tempStep = {
                id: `temp-${Date.now()}`,
                status: user?.employee?.processingRole === 'PICKER' ? 'PICKING' :
                       user?.employee?.processingRole === 'PACKER' ? 'PACKING' : 'IN_DELIVERY', // PACKER —ç—Ç–∞–ø —É–±—Ä–∞–Ω, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                role: user?.employee?.processingRole,
                roleLabel: user?.employee?.processingRole === 'PICKER' ? '–°–±–æ—Ä—â–∏–∫' :
                          user?.employee?.processingRole === 'PACKER' ? '–£–ø–∞–∫–æ–≤—â–∏–∫' : '–ö—É—Ä—å–µ—Ä',
                stepType: 'started',
                employeeName: fullEmployeeName,
                employeePosition: user?.employee?.position || '',
                comment: `${fullEmployeeName} –≤–∑—è–ª –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É`,
                createdAt: new Date().toISOString(),
                originalStatus: order?.status,
                isTemporary: true
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const newAssignedToId = user?.employee?.id || null;
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:', {
                employeeId: user?.employee?.id,
                newAssignedToId,
                orderId
            });

            setLocalOrderState(prevState => ({
                ...prevState,
                assignedToId: newAssignedToId,
                status: order?.status || null,
                lastAction: 'taken',
                actionTimestamp: Date.now(),
                temporarySteps: [tempStep],
                lastKnownHistoryLength: prevState.lastKnownHistoryLength
            }));

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redux
            dispatch(setLocalOrderAction({
                orderId: orderId,
                action: 'taken',
                value: true
            }));

            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ released, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
            dispatch(setLocalOrderAction({
                orderId: orderId,
                action: 'released',
                value: false
            }));

            setToastConfig({
                message: '–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
                type: 'success',
                duration: 3000
            });

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å
            setTimeout(() => {
                console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞');
                loadOrderDetails(true);
            }, 100);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É:', e);
            Alert.alert('–û—à–∏–±–∫–∞', e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑');

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            setLocalOrderState(prevState => ({
                ...prevState,
                assignedToId: null,
                status: order?.status || null,
                lastAction: null,
                actionTimestamp: null,
                temporarySteps: []
            }));

            dispatch(clearLocalOrderAction({ orderId }));
        } finally {
            setTaking(false);
        }
    }, [orderId, takeOrder, user?.employee, order?.status, dispatch, loadOrderDetails]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞
    const handleProcessOrder = useCallback(async () => {
        try {
            setProcessingOrder(true);

            const result = await completeOrderStage(orderId, processingComment.trim() || undefined);

            if (result.success) {
                const fullEmployeeName = `${user?.employee?.name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'} ${user?.employee?.position || ''}`.trim();
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                const newStatus = user?.employee?.processingRole === 'PICKER' ? 'IN_DELIVERY' : // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø —É–ø–∞–∫–æ–≤–∫–∏
                               user?.employee?.processingRole === 'PACKER' ? 'PACKING_COMPLETED' : 'DELIVERED';

                console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
                    employeeRole: user?.employee?.processingRole,
                    currentStatus: order?.status,
                    newStatus,
                    orderId
                });

                const completedTempStep = {
                    id: `temp-completed-${Date.now()}`,
                    status: newStatus,
                    role: user?.employee?.processingRole,
                    roleLabel: user?.employee?.processingRole === 'PICKER' ? '–°–±–æ—Ä—â–∏–∫' :
                              user?.employee?.processingRole === 'PACKER' ? '–£–ø–∞–∫–æ–≤—â–∏–∫' : '–ö—É—Ä—å–µ—Ä',
                    stepType: 'completed',
                    employeeName: fullEmployeeName,
                    employeePosition: user?.employee?.position || '',
                    comment: processingComment.trim() || `${user?.employee?.processingRole === 'PICKER' ? '–°–±–æ—Ä–∫–∞' :
                             user?.employee?.processingRole === 'PACKER' ? '–£–ø–∞–∫–æ–≤–∫–∞' : '–î–æ—Å—Ç–∞–≤–∫–∞'} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`,
                    createdAt: new Date().toISOString(),
                    originalStatus: order?.status,
                    isTemporary: true
                };

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ Redux –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                dispatch(setLocalOrderAction({
                    orderId: orderId,
                    action: 'completed',
                    value: true
                }));

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                console.log('üîÑ handleProcessOrder: –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', {
                    oldStatus: order?.status,
                    newStatus,
                    employeeRole: user?.employee?.processingRole,
                    orderId
                });

                setLocalOrderState(prevState => ({
                    assignedToId: prevState.assignedToId,
                    status: newStatus, // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    lastAction: 'completed',
                    actionTimestamp: Date.now(),
                    temporarySteps: [...(prevState.temporarySteps || []), completedTempStep],
                    lastKnownHistoryLength: prevState.lastKnownHistoryLength
                }));

                setToastConfig({
                    message: '–≠—Ç–∞–ø –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                    type: 'success',
                    duration: 3000
                });

                setProcessingModalVisible(false);
                setProcessingComment('');

                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
                setTimeout(() => {
                    loadOrderDetails(true);
                }, 1000);
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø –∑–∞–∫–∞–∑–∞');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', err);
            Alert.alert('–û—à–∏–±–∫–∞', err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø –∑–∞–∫–∞–∑–∞');
        } finally {
            setProcessingOrder(false);
        }
    }, [orderId, processingComment, completeOrderStage, user?.employee, order?.status, loadOrderDetails]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–±–æ—Ç—ã
    const handleReleaseOrder = useCallback(async () => {
        try {
            setReleasing(true);
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–±–æ—Ç—ã:', orderId);

            const result = await releaseOrder(orderId, '–°–Ω—è—Ç —Å —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º');
            if (!result.success) throw new Error(result.error);

            console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —á–µ—Ä–µ–∑ API');

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ released –≤ Redux –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
            dispatch(setLocalOrderAction({
                orderId: orderId,
                action: 'released',
                value: true
            }));

            console.log('üìù Redux action –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

            // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Redux

            setToastConfig({
                message: '–ó–∞–∫–∞–∑ —Å–Ω—è—Ç —Å —Ä–∞–±–æ—Ç—ã',
                type: 'success',
                duration: 3000
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ä–∞–∑—É
            loadOrderDetails(true);

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–±–æ—Ç—ã:', err);
            Alert.alert('–û—à–∏–±–∫–∞', err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∑–∞–∫–∞–∑ —Å —Ä–∞–±–æ—Ç—ã');
        } finally {
            setReleasing(false);
        }
    }, [orderId, releaseOrder, order?.status, dispatch, loadOrderDetails]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    const handleDownloadInvoice = useCallback(async () => {
        try {
            setDownloadingInvoice(true);
            const result = await downloadInvoice(orderId);

            if (result.success) {
                Alert.alert('–£—Å–ø–µ—Ö', `–ù–∞–∫–ª–∞–¥–Ω–∞—è "${result.filename}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
            } else {
                throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:', err);
            Alert.alert('–û—à–∏–±–∫–∞', err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é');
        } finally {
            setDownloadingInvoice(false);
        }
    }, [orderId, downloadInvoice]);

    // –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    const renderEmployeeActions = () => {
        if (!order) return null;

        const { showTakeButton, showCompleteButton, showReleaseButton } = employeeButtonLogic;
        const showDownloadButton = canDownloadInvoice(user?.role);

        console.log('üéØ renderEmployeeActions', {
            showTakeButton,
            showCompleteButton,
            showReleaseButton,
            showDownloadButton,
            isOrderAvailable,
            hasLocalReleased,
            localOrderState: {
                assignedToId: localOrderState.assignedToId,
                lastAction: localOrderState.lastAction,
                actionTimestamp: localOrderState.actionTimestamp
            },
            orderAssignedTo: order?.assignedTo?.id,
            userRole: user?.role,
            userEmployeeId: user?.employee?.id
        });

        if (!showTakeButton && !showCompleteButton && !showDownloadButton && !showReleaseButton) {
            console.log('‚ùå –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
                showTakeButton,
                showCompleteButton,
                showDownloadButton,
                showReleaseButton,
                isAssignedToMe: user?.employee?.id && order?.assignedTo?.id && user.employee.id === order.assignedTo.id,
                hasLocalReleased,
                lastAction: localOrderState.lastAction
            });
            return null;
        }

        return (
            <View style={styles.actionsContainer}>
                {/* –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É" */}
                {showTakeButton && (
                    <TouchableOpacity
                        style={styles.processButton}
                        onPress={handleTakeOrder}
                        disabled={taking}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {taking ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="handshake" size={20} color="#fff" />
                                    <Text style={styles.processButtonText}>–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø" */}
                {showCompleteButton && (
                    <TouchableOpacity
                        style={styles.processButton}
                        onPress={() => setProcessingModalVisible(true)}
                        disabled={processingOrder}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {processingOrder ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="check-circle" size={20} color="#fff" />
                                    <Text style={styles.processButtonText}>–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ "–°–Ω—è—Ç—å —Å —Ä–∞–±–æ—Ç—ã" */}
                {showReleaseButton && (
                    <TouchableOpacity
                        style={[styles.cancelButton, { backgroundColor: '#FF9800' }]}
                        onPress={handleReleaseOrder}
                        disabled={releasing}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {releasing ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="undo" size={20} color="#fff" />
                                    <Text style={styles.cancelButtonText}>–°–Ω—è—Ç—å —Å —Ä–∞–±–æ—Ç—ã</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π */}
                {showDownloadButton && (
                    <TouchableOpacity
                        style={[styles.downloadButton, (showTakeButton || showCompleteButton || showReleaseButton) && styles.buttonSpacing]}
                        onPress={handleDownloadInvoice}
                        disabled={downloadingInvoice}
                        activeOpacity={0.8}
                    >
                        <View style={styles.buttonContent}>
                            {downloadingInvoice ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <>
                                    <Icon name="description" size={20} color="#fff" />
                                    <Text style={styles.downloadButtonText}>–°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é</Text>
                                </>
                            )}
                        </View>
                    </TouchableOpacity>
                )}
            </View>
        );
    };

    // –†–µ–Ω–¥–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
    const renderProcessingModal = () => (
        <Modal
            visible={processingModalVisible}
            animationType="slide"
            transparent={true}
            onRequestClose={() => setProcessingModalVisible(false)}
        >
            <View style={styles.modalOverlay}>
                <View style={styles.modalContent}>
                    <View style={styles.modalHeader}>
                        <Text style={styles.modalTitle}>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</Text>
                        <Text style={styles.modalSubtitle}>
                            {order?.orderNumber ? `–ó–∞–∫–∞–∑ ${order.orderNumber}` : ''}
                        </Text>
                    </View>

                    <View style={styles.modalBody}>
                        <View style={styles.currentStatusContainer}>
                            <Text style={styles.currentStatusLabel}>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</Text>
                            <Text style={styles.currentStatusText}>
                                {order ? ORDER_STATUS_LABELS[order.status] : ''}
                            </Text>
                        </View>

                        <View style={styles.infoContainer}>
                            <Text style={styles.infoText}>
                                –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø" –∑–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
                            </Text>
                        </View>

                        <View style={styles.commentContainer}>
                            <Text style={styles.commentLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</Text>
                            <TextInput
                                style={styles.commentInput}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —ç—Ç–∞–ø–∞..."
                                value={processingComment}
                                onChangeText={setProcessingComment}
                                multiline
                                numberOfLines={3}
                                maxLength={500}
                            />
                            <Text style={styles.commentCounter}>
                                {processingComment.length}/500
                            </Text>
                        </View>
                    </View>

                    <View style={styles.modalActions}>
                        <TouchableOpacity
                            style={styles.modalCancelButton}
                            onPress={() => setProcessingModalVisible(false)}
                            disabled={processingOrder}
                        >
                            <Text style={styles.modalCancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
                        </TouchableOpacity>

                        <TouchableOpacity
                            style={[styles.modalConfirmButton, processingOrder && styles.modalButtonDisabled]}
                            onPress={handleProcessOrder}
                            disabled={processingOrder}
                        >
                            {processingOrder ? (
                                <View style={styles.buttonLoader}>
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                    <View style={[styles.buttonLoaderDot, { backgroundColor: '#fff' }]} />
                                </View>
                            ) : (
                                <Text style={styles.modalConfirmButtonText}>–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø</Text>
                            )}
                        </TouchableOpacity>
                    </View>
                </View>
            </View>
        </Modal>
    );

    // –†–µ–Ω–¥–µ—Ä —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading && !refreshing) {
        return <OrderLoadingState />;
    }

    // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
    if (error && !loading) {
        return (
            <OrderErrorState
                error={error}
                onRetry={() => loadOrderDetails()}
            />
        );
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
    return (
        <View style={styles.container}>
            <StatusBar barStyle="light-content" backgroundColor="#667eea" />

            <Animated.View
                style={[
                    styles.animatedContainer,
                    {
                        opacity: fadeAnim,
                        transform: [{ translateY: slideAnim }]
                    }
                ]}
            >
                <ScrollView
                    style={styles.scrollContainer}
                    contentContainerStyle={styles.scrollContent}
                    showsVerticalScrollIndicator={false}
                    refreshControl={
                        <RefreshControl
                            refreshing={refreshing}
                            onRefresh={refreshOrderDetails}
                            colors={['#667eea']}
                            tintColor="#667eea"
                            progressBackgroundColor="#fff"
                        />
                    }
                >
                    {order && (
                        <>
                            <OrderHeader order={order} />
                            <DeliveryInfo
                                order={order}
                                userRole={user?.role}
                                assignedTo={order.assignedTo}
                            />
                            <OrderItems order={order} />
                            <OrderProcessingHistory
                                order={order}
                                userRole={user?.role}
                                temporarySteps={localOrderState.temporarySteps}
                            />
                            {renderEmployeeActions()}
                        </>
                    )}
                </ScrollView>
            </Animated.View>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ */}
            {renderProcessingModal()}

            {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
            {toastConfig && (
                <ToastSimple
                    message={toastConfig.message}
                    type={toastConfig.type}
                    duration={toastConfig.duration}
                    onHide={() => setToastConfig(null)}
                />
            )}
        </View>
    );
};
