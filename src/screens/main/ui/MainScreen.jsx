import React, { useState, useRef, useEffect, useCallback } from 'react';
import {View, StyleSheet, Text, TouchableOpacity} from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { fetchProducts } from '@entities/product/model/slice';
import { 
    selectProducts, 
    selectProductsLoading, 
    selectProductsLoadingMore, 
    selectProductsError,
    selectProductsHasMore,
    selectProductsCurrentPage 
} from '@entities/product/model/selectors';
import { fetchBanners, selectActiveMainBanners, selectBannerStatus } from '@entities/banner';
import { fetchCategories } from '@entities/category/model/slice';
import { fetchCart, useCartAvailability } from '@entities/cart';

import { Color } from '@app/styles/GlobalStyles';
import { Header } from "@widgets/header";
import { PromoBanner } from "@widgets/promoSlider";
import { CategoriesBar } from "@widgets/categoriesBar";
import { ProductsList } from "@widgets/product/productsList";
// import { Loader } from "@shared/ui/Loader";

import { selectCategories, selectCategoriesLoading, setCategories } from "@entities/category";
import DriverLocator from "@features/driver/driverLocator/ui/DriverLocator";
import { useFocusEffect } from '@react-navigation/native';

import { useNotifications } from '@entities/notification';
import { useAuth } from '@entities/auth/hooks/useAuth';

const PRODUCTS_PER_PAGE = 10;
const LOAD_MORE_THRESHOLD = 8;
const REFRESH_INTERVAL = 300000; // –æ—Ç–∫–ª—é—á–∏–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–¥–≥—Ä—É–∑–æ–∫ –Ω–∞ –∫–∞–∂–¥—ã–π —Ñ–æ–∫—É—Å
const CACHE_KEY = 'main_screen_cache';
const CACHE_EXPIRY = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

const selectFetchCompleted = (state) => state.products?.fetchCompleted || false;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
const saveCacheData = async (data) => {
    try {
        const cacheData = {
            timestamp: Date.now(),
            data
        };
        await AsyncStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞:', error);
    }
};

const loadCacheData = async () => {
    try {
        const cacheStr = await AsyncStorage.getItem(CACHE_KEY);
        if (cacheStr) {
            const cache = JSON.parse(cacheStr);
            const now = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
            if (now - cache.timestamp < CACHE_EXPIRY) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–µ –≤ –ø–æ–ª–µ data
                const { timestamp, ...data } = cache;
                return data;
            } else {
                // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫—ç—à
                await AsyncStorage.removeItem(CACHE_KEY);
            }
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        return null;
    }
};

const clearCache = async () => {
    try {
        await AsyncStorage.removeItem(CACHE_KEY);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
};

export const MainScreen = ({ navigation, route }) => {
    const dispatch = useDispatch();
    const { isCartAvailable } = useCartAvailability();
    const { currentUser: user } = useAuth();

    const notifications = useNotifications(navigation);

    const unreadCount = useSelector(state => state.notification?.unreadCount || 0);

    useEffect(() => {
        // Badge sync logic
    }, [unreadCount]);

    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const products = useSelector(selectProducts);
    const isProductsLoading = useSelector(selectProductsLoading);
    const isLoadingMore = useSelector(selectProductsLoadingMore);
    const productsError = useSelector(selectProductsError);
    const hasMore = useSelector(selectProductsHasMore);
    const currentPage = useSelector(selectProductsCurrentPage);
    const activeBanners = useSelector(selectActiveMainBanners);
    const bannerStatus = useSelector(selectBannerStatus);
    const categories = useSelector(selectCategories);
    const isCategoriesLoading = useSelector(selectCategoriesLoading);
    const fetchCompleted = useSelector(selectFetchCompleted);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const [isInitialLoading, setIsInitialLoading] = useState(true);
    const [dataLoaded, setDataLoaded] = useState(false);
    const [lastFetchTime, setLastFetchTime] = useState(0);
    const [loadingStates, setLoadingStates] = useState({
        products: false,
        banners: false,
        categories: false
    });

    const refreshTimerRef = useRef(null);
    const isMountedRef = useRef(true);
    const loadingRef = useRef(false);
    const initialLoadRef = useRef(false);
    const cacheTimeoutRef = useRef(null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    const shouldRefreshData = useCallback(() => {
        const now = Date.now();
        const timeSinceLastFetch = now - lastFetchTime;
        return !isProductsLoading && timeSinceLastFetch > REFRESH_INTERVAL;
    }, [lastFetchTime, isProductsLoading]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const hasCachedData = useCallback(() => {
        return (Array.isArray(products) && products.length > 0) || 
               (Array.isArray(activeBanners) && activeBanners.length > 0) || 
               (Array.isArray(categories) && categories.length > 0);
    }, [products, activeBanners, categories]);

    // –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const loadAllData = useCallback(async (refresh = false) => {
        if (loadingRef.current) {
            console.log('loadAllData: –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ - —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞');
            return;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—Ä–∞–∑—É
        if (!refresh && hasCachedData() && dataLoaded) {
            console.log('loadAllData: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            setIsInitialLoading(false);
            initialLoadRef.current = true;
            return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if (!refresh && !dataLoaded && !initialLoadRef.current) {
            const cachedData = await loadCacheData();
            if (cachedData) {
                console.log('loadAllData: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redux store –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (cachedData.products && cachedData.products.length > 0) {
                    // –ü—Ä–æ–¥—É–∫—Ç—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ store, –Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                }
                if (cachedData.categories && cachedData.categories.length > 0) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ store
                    console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞:', cachedData.categories.length);
                    dispatch(setCategories(cachedData.categories));
                }
                if (cachedData.banners && cachedData.banners.length > 0) {
                    // –ë–∞–Ω–Ω–µ—Ä—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ store, –Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                }
                
                setIsInitialLoading(false);
                initialLoadRef.current = true;
                setDataLoaded(true);
                setLastFetchTime(cachedData.timestamp || Date.now());
                return;
            }
        }

        if (refresh || shouldRefreshData() || !dataLoaded) {
            console.log('loadAllData: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö', { 
                refresh, 
                shouldRefresh: shouldRefreshData(), 
                dataLoaded,
                isInitialLoading,
                hasCachedData: hasCachedData()
            });

            loadingRef.current = true;
            setLoadingStates({
                products: true,
                banners: true,
                categories: true
            });

            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                const promises = [];

                // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                const productsPromise = dispatch(fetchProducts({ page: 1, limit: PRODUCTS_PER_PAGE, refresh }))
                    .finally(() => {
                        if (isMountedRef.current) {
                            setLoadingStates(prev => ({ ...prev, products: false }));
                        }
                    });
                promises.push(productsPromise);

                // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–Ω–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
                if (!activeBanners?.length && bannerStatus !== 'loading') {
                    const bannersPromise = dispatch(fetchBanners({ type: 'MAIN', active: true }))
                        .finally(() => {
                            if (isMountedRef.current) {
                                setLoadingStates(prev => ({ ...prev, banners: false }));
                            }
                        });
                    promises.push(bannersPromise);
                } else {
                    setLoadingStates(prev => ({ ...prev, banners: false }));
                }

                // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
                if (refresh || !categories?.length || !dataLoaded) {
                    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', { refresh, categoriesLength: categories?.length, dataLoaded });
                    const categoriesPromise = dispatch(fetchCategories())
                        .finally(() => {
                            if (isMountedRef.current) {
                                setLoadingStates(prev => ({ ...prev, categories: false }));
                            }
                        });
                    promises.push(categoriesPromise);
                } else {
                    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', { refresh, categoriesLength: categories?.length, dataLoaded });
                    setLoadingStates(prev => ({ ...prev, categories: false }));
                }

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
                await Promise.all(promises);

                if (isMountedRef.current) {
                    const currentTime = Date.now();
                    setLastFetchTime(currentTime);
                    setDataLoaded(true);
                    setIsInitialLoading(false);
                    initialLoadRef.current = true;

                    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    const currentState = {
                        products: products,
                        banners: activeBanners,
                        categories: categories
                    };

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
                    const cacheData = {
                        timestamp: currentTime,
                        ...currentState
                    };
                    await saveCacheData(cacheData);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
                // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                if (isMountedRef.current) {
                    setIsInitialLoading(false);
                    initialLoadRef.current = true;
                }
            } finally {
                loadingRef.current = false;
            }
        }
    }, [dispatch, isProductsLoading, shouldRefreshData, dataLoaded,
        activeBanners, bannerStatus, categories, isCategoriesLoading, hasCachedData]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const loadMoreProducts = useCallback(() => {
        if (!hasMore || isLoadingMore || isProductsLoading) {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:', { hasMore, isLoadingMore, isProductsLoading });
            return;
        }

        const nextPage = currentPage + 1;
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', nextPage);
        
        dispatch(fetchProducts({ page: nextPage, limit: PRODUCTS_PER_PAGE }));
    }, [dispatch, hasMore, isLoadingMore, isProductsLoading, currentPage]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        isMountedRef.current = true;
        
        const initializeScreen = async () => {
            // –ï—Å–ª–∏ –≤ Redux —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
            if (hasCachedData()) {
                console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                if (!initialLoadRef.current) {
                    setIsInitialLoading(false);
                    initialLoadRef.current = true;
                }
                if (!dataLoaded) setDataLoaded(true);
                if (!lastFetchTime) setLastFetchTime(Date.now());
                return;
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
            const cachedData = await loadCacheData();
            if (cachedData) {
                console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');

                if (cachedData.categories && cachedData.categories.length > 0) {
                    console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', cachedData.categories.length);
                    dispatch(setCategories(cachedData.categories));
                }

                if (!initialLoadRef.current) {
                    setIsInitialLoading(false);
                    initialLoadRef.current = true;
                }
                if (!dataLoaded) setDataLoaded(true);
                if (!lastFetchTime) setLastFetchTime(cachedData.timestamp || Date.now());
                return;
            }

            // –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –≤ Redux, –Ω–∏ –≤ –∫—ç—à–µ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑
            if (!initialLoadRef.current) {
                console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö');
                loadAllData();
            }
        };

        initializeScreen();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        if (!categories?.length && !isCategoriesLoading) {
            console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            dispatch(fetchCategories());
        }

        if (notifications.initializePushNotifications) {
            notifications.initializePushNotifications();
        }

        // –û—Ç–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–¥–≥—Ä—É–∑–æ–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
        // refreshTimerRef.current = setInterval(() => {
        //     if (isMountedRef.current && shouldRefreshData()) {
        //         console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        //         loadAllData(true);
        //     }
        // }, REFRESH_INTERVAL);

        return () => {
            isMountedRef.current = false;
            if (refreshTimerRef.current) {
                clearInterval(refreshTimerRef.current);
            }
            if (cacheTimeoutRef.current) {
                clearTimeout(cacheTimeoutRef.current);
            }
        };
    }, []);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ —ç–∫—Ä–∞–Ω–∞
    useFocusEffect(
        useCallback(() => {
            // –ù–∞ —Ñ–æ–∫—É—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º, —Ç–æ–ª—å–∫–æ –º—è–≥–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if (route?.params?.resetProduct) {
                navigation.setParams({ resetProduct: undefined });
            }

            if (isCartAvailable) {
                dispatch(fetchCart(true));
            }

            if (notifications?.refreshNotifications && user?.role === 'CLIENT') {
                notifications.refreshNotifications();
            }
        }, [navigation, route?.params, isCartAvailable, dispatch, notifications, user?.role])
    );

    const handleProductPress = useCallback((productId) => {
        navigation.navigate('ProductDetail', {
            productId,
            fromScreen: 'MainTab'
        });
    }, [navigation]);

    const handleDriverLocatorPress = useCallback(() => {
        navigation.navigate('StopsListScreen');
    }, [navigation]);

    const handleRefresh = useCallback(() => {
        loadAllData(true);
    }, [loadAllData]);

    const renderHeader = useCallback(() => {
        const isInitialLoad = isInitialLoading || (isAnyLoading && !hasAnyData);
        
        return (
            <>
                <Header navigation={navigation} />
                <PromoBanner hideLoader={true} />
                <CategoriesBar hideLoader={true} />
                <DriverLocator onPress={handleDriverLocatorPress} />
            </>
        );
    }, [handleDriverLocatorPress, navigation, isInitialLoading, isAnyLoading, hasAnyData]);

    const renderFooter = useCallback(() => (
        <View style={styles.bottomSpacer} />
    ), []);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const isAnyLoading = loadingStates.products || loadingStates.banners || loadingStates.categories || isProductsLoading;
    const hasAnyData = (Array.isArray(products) && products.length > 0) || 
                       (Array.isArray(activeBanners) && activeBanners.length > 0) || 
                       (Array.isArray(categories) && categories.length > 0);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    const shouldShowLoader = (isInitialLoading || (isAnyLoading && !hasAnyData)) && !hasCachedData();

    // –ï–¥–∏–Ω—ã–π –ª–æ–∞–¥–µ—Ä —Å–æ —Å–∫–µ–ª–µ—Ç–æ–Ω–æ–º –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (shouldShowLoader) {
        return (
            <View style={styles.container}>
                <Header navigation={navigation} />
                <PromoBanner hideLoader={false} />
                <CategoriesBar hideLoader={false} />
                {/* –°–∫–µ–ª–µ—Ç–æ–Ω —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
                <View style={{ paddingHorizontal: 16, paddingTop: 8 }}>
                    {[...Array(8)].map((_, i) => (
                        <View key={i} style={styles.skeletonProductCard}>
                            <View style={styles.skeletonProductImage} />
                            <View style={styles.skeletonProductContent}>
                                <View style={styles.skeletonLineWide} />
                                <View style={styles.skeletonLine} />
                                <View style={styles.skeletonPrice} />
                            </View>
                        </View>
                    ))}
                </View>
            </View>
        );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (productsError) {
        return (
            <View style={styles.container}>
                <Header navigation={navigation} />
                <View style={styles.messageContainer}>
                    <Text style={styles.errorText}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {productsError}</Text>
                    <TouchableOpacity
                        style={styles.retryButton}
                        onPress={handleRefresh}
                    >
                        <Text style={styles.retryButtonText}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</Text>
                    </TouchableOpacity>
                </View>
            </View>
        );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!Array.isArray(products) || products.length === 0) {
        return (
            <View style={styles.container}>
                <Header navigation={navigation} />
                <PromoBanner hideLoader={false} />
                <CategoriesBar hideLoader={false} />
                <DriverLocator onPress={handleDriverLocatorPress} />
                <View style={styles.messageContainer}>
                    <Text style={styles.messageText}>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
                    <TouchableOpacity
                        style={styles.retryButton}
                        onPress={handleRefresh}
                    >
                        <Text style={styles.retryButtonText}>–û–±–Ω–æ–≤–∏—Ç—å</Text>
                    </TouchableOpacity>
                </View>
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <ProductsList
                onProductPress={handleProductPress}
                fromScreen="MainTab"
                onEndReached={loadMoreProducts}
                onEndReachedThreshold={LOAD_MORE_THRESHOLD}
                isLoadingMore={isLoadingMore}
                hasMore={hasMore}
                ListHeaderComponent={renderHeader}
                ListFooterComponent={renderFooter}
                hideLoader={isInitialLoading || (isAnyLoading && !hasAnyData)}
                key={`products-${products.length}`}
            />
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: Color.colorLightMode,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal: 20,
    },
    skeletonProductCard: {
        flexDirection: 'row',
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 12,
        marginBottom: 10,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.06,
        shadowRadius: 4,
        elevation: 2,
        borderWidth: 1,
        borderColor: '#f0f0f0',
    },
    skeletonProductImage: {
        width: 64,
        height: 64,
        borderRadius: 8,
        backgroundColor: '#eee',
        marginRight: 12,
    },
    skeletonProductContent: {
        flex: 1,
        justifyContent: 'center',
    },
    skeletonLineWide: {
        height: 14,
        width: '80%',
        backgroundColor: '#eee',
        borderRadius: 6,
        marginBottom: 6,
    },
    skeletonLine: {
        height: 12,
        width: '60%',
        backgroundColor: '#eee',
        borderRadius: 6,
        marginBottom: 10,
    },
    skeletonPrice: {
        height: 16,
        width: 90,
        backgroundColor: '#eee',
        borderRadius: 8,
    },
    bottomSpacer: {
        height: 60,
    },
    messageContainer: {
        padding: 20,
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: 200,
    },
    messageText: {
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 10,
        color: '#666',
    },
    errorText: {
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 16,
        color: '#d32f2f',
    },
    retryButton: {
        backgroundColor: '#3339b0',
        paddingVertical: 10,
        paddingHorizontal: 20,
        borderRadius: 8,
        marginTop: 10,
    },
    retryButtonText: {
        color: 'white',
        fontSize: 14,
        fontWeight: '500',
    },
});