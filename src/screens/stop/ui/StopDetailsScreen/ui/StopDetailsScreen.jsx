import React, { useEffect, useState } from 'react';
import { StyleSheet, SafeAreaView } from 'react-native';
import { useRoute, useFocusEffect } from '@react-navigation/native';
import { useSelector, useDispatch } from 'react-redux';
import { selectDriverLoading, selectDriverError } from '@entities/driver';
import { StopDetailsContent } from './StopDetailsContent';
import { LoadingState } from '@shared/ui/states/LoadingState';
import { ErrorState } from '@shared/ui/states/ErrorState';
import { selectStopById, selectStops, fetchAllStops } from "@entities/stop";

export const StopDetailsScreen = ({ navigation }) => {
    const route = useRoute();
    const dispatch = useDispatch();
    const { stopId } = route.params || {};

    const [isLoadingStops, setIsLoadingStops] = useState(false);
    const [retryCount, setRetryCount] = useState(0);
    const [forceLoading, setForceLoading] = useState(true);

    const stop = useSelector(state => selectStopById(state, stopId));
    const allStops = useSelector(selectStops);
    const isLoading = useSelector(selectDriverLoading);
    const error = useSelector(selectDriverError);

    console.log('üîç StopDetailsScreen state:', {
        stopId,
        hasStop: !!stop,
        allStopsCount: allStops?.length || 0,
        isLoading,
        isLoadingStops,
        retryCount,
        error
    });

    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const loadStopsImmediately = async () => {
            if (!stopId) {
                console.error('‚ùå No stopId provided');
                setForceLoading(false);
                return;
            }

            console.log('üöÄ FORCE loading stops for stopId:', stopId);
            setIsLoadingStops(true);
            setForceLoading(true);

            try {
                console.log('üì° Dispatching fetchAllStops...');
                const result = await dispatch(fetchAllStops()).unwrap();
                console.log('‚úÖ Stops loaded successfully, count:', result?.length || 'unknown');
                setRetryCount(0);

                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                setTimeout(() => {
                    setForceLoading(false);
                }, 500);

            } catch (error) {
                console.error('‚ùå Error loading stops:', error);
                setRetryCount(prev => prev + 1);
                setForceLoading(false);
            } finally {
                setIsLoadingStops(false);
            }
        };

        loadStopsImmediately();
    }, [stopId, dispatch]);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        if (stopId && allStops.length > 0 && !stop && retryCount < 3) {
            console.log('‚ö†Ô∏è Stop still not found after loading, retry count:', retryCount);

            const timer = setTimeout(() => {
                console.log('üîÑ Retrying to find stop in loaded data...');
                setRetryCount(prev => prev + 1);

                // –ò—â–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä—É—á–Ω—É—é –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                const foundStop = allStops.find(s => s.id === parseInt(stopId));
                console.log('üîç Manual search result:', foundStop ? 'found' : 'not found');

                if (!foundStop && retryCount < 2) {
                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    loadStopsData();
                }
            }, 1000 * (retryCount + 1)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

            return () => clearTimeout(timer);
        }
    }, [stopId, stop, allStops.length, retryCount]);

    // –§–æ–∫—É—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    useFocusEffect(
        React.useCallback(() => {
            console.log('üëÅÔ∏è Screen focused, stopId:', stopId, 'hasStop:', !!stop);

            if (!stop && stopId && !isLoadingStops && allStops.length === 0) {
                console.log('üîÑ Screen focused without data, loading...');
                loadStopsData();
            }
        }, [stopId, stop, isLoadingStops, allStops.length])
    );

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const loadStopsData = async () => {
        if (isLoadingStops) {
            console.log('üö´ Already loading, skipping...');
            return;
        }

        setIsLoadingStops(true);
        console.log('üîÑ Manual loading stops data...');

        try {
            await dispatch(fetchAllStops()).unwrap();
            console.log('‚úÖ Manual stops loaded successfully');
            setRetryCount(0);
        } catch (error) {
            console.error('‚ùå Error in manual loading:', error);
            setRetryCount(prev => prev + 1);
        } finally {
            setIsLoadingStops(false);
        }
    };

    const handleRetry = () => {
        console.log('üîÑ Manual retry triggered by user');
        setRetryCount(0);
        setForceLoading(true);
        loadStopsData();
    };

    const handleGoBack = () => {
        console.log('üîô Going back to previous screen');
        navigation.goBack();
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    if (isLoading || isLoadingStops || forceLoading) {
        return <LoadingState />;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç stopId –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    if (!stopId) {
        console.error('‚ùå No stopId in route params');
        return (
            <ErrorState
                message="–ù–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                onRetry={handleGoBack}
                buttonText="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
            />
        );
    }

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (!stop && stopId) {
        const errorMessage = allStops.length === 0
            ? "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫"
            : `–û—Å—Ç–∞–Ω–æ–≤–∫–∞ #${stopId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ ${allStops.length} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫`;

        console.error('‚ùå Stop not found:', {
            stopId,
            allStopsCount: allStops.length,
            retryCount,
            firstFewStops: allStops.slice(0, 3).map(s => ({ id: s.id, address: s.address }))
        });

        return (
            <ErrorState
                message={errorMessage}
                onRetry={handleRetry}
                buttonText={retryCount < 3 ? "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É" : "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}
            />
        );
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∞—è –æ—à–∏–±–∫–∞
    if (error) {
        return (
            <ErrorState
                message={error}
                onRetry={handleGoBack}
                buttonText="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
            />
        );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    console.log('‚úÖ Showing stop content for:', stop?.address || 'unknown');
    return (
        <SafeAreaView style={styles.container}>
            <StopDetailsContent stop={stop} navigation={navigation} />
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
});